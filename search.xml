<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Hexo插本地图不借助插件和图床</title>
      <link href="/website/hexopicissue/"/>
      <url>/website/hexopicissue/</url>
      
        <content type="html"><![CDATA[<p>收到七牛云的【测试域名过期通知】时，我不得不写下这篇文章了。</p><blockquote><p>怎么让Hexo插入本地图时，本地预览和推送都能正常显示呢？</p></blockquote><a id="more"></a><h1 id="插件方案"><a href="#插件方案" class="headerlink" title="插件方案"></a>插件方案</h1><p>网上搜了下，用这个<a href="https://github.com/CodeFalling/hexo-asset-image" target="_blank" rel="noopener">hexo-asset-image</a>插件的比较多：</p><p>然而让我不能接受的就是，用这个插件必须让 <code>post_asset_folder: true</code> in  <code>_config.yml</code></p><p>这就会导致，每篇博客都带一个同名文件夹。</p><p><strong>（特别适合每篇文章都会引入各种图片的人）</strong></p><p>这怎么行🙂🙂🙂🙃🙃🙃😤😤😤</p><p>我可是在本地也<em><u>把文章按照分类分好存在对应文件夹</u></em>的☺。</p><p>我宁愿费事一点，或者 <em><u>牺牲 本地预览效果</u></em>  来让文件夹结构清晰。</p><p>没想到的是，我这个<strong><u><em>牺牲 本地预览效果</em></u></strong> ，配合上我<em><u><strong>把文章按照分类分好存在对应文件夹</strong></u></em>，竟然就实现了，本地可预览，上传正常显示。</p><h1 id="最终方案"><a href="#最终方案" class="headerlink" title="最终方案"></a>最终方案</h1><p>刚刚说了，我的每个文章都会按照分类存放在一个个的文件夹里，就像这样：</p><p><img src="../../images/image-20181108104754938.png" alt="image-20181108104754938"></p><p>而这时候Typora这么设置</p><p><img src="../../images/image-20181108103011357.png" alt="image-20181108103011357"></p><hr><p><strong>重点来了</strong></p><hr><ul><li><p>Typora按照上图设置好。</p></li><li><p><code>hexo new</code> 一个新文章，</p><p>此时文章是在 <code>_post</code> 根目录下的，</p><p><strong>我们把它放到对应分类的文件夹里</strong>。比如我放在了<code>_post/分类1</code> 里</p></li><li><p>复制图片, 然后直接在Typora粘贴，就会自动生成下面这种格式的路径<br> <img src="../../images/image-20181108105325807.png" alt="image-20181108105325807"></p><blockquote><p>正是由于我们的文章在<code>_post/分类1</code> 这<strong>子目录</strong>下，</p><p>Typora自动生成的相对路径变成了<code>../../</code>    就是往<strong>后退了两级</strong></p><p>而<code>hexo g</code>生成的静态页面，对应的images文件夹也是往<strong>后退两级</strong></p></blockquote></li><li><p>大功告成。</p></li></ul><p>Typroa本地可预览，生成静态html，图片正常显示</p>]]></content>
      
      
      <categories>
          
          <category> Website </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>排序算法</title>
      <link href="/algorithm/pai-xu-suan-fa/"/>
      <url>/algorithm/pai-xu-suan-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="完美排序"><a href="#完美排序" class="headerlink" title="完美排序"></a>完美排序</h1><p>思想：</p><ul><li><code>if</code>i位置比j位置小，二者交换。</li><li>循环结束条件 i等于j</li><li>三分数组，先递归前2/3。再递归2/3。再递归前2/3</li></ul><p>代码美观。<br>效率低。</p><p><a href="/Downloads/sort.cpp">代码下载</a></p><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Sort </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>LeetCodeMedium</title>
      <link href="/algorithm/leetcodemedium/"/>
      <url>/algorithm/leetcodemedium/</url>
      
        <content type="html"><![CDATA[<p>代码基本都在这里了：<a href="https://github.com/ixsim/OJ" target="_blank" rel="noopener">https://github.com/ixsim/OJ</a></p><a id="more"></a><h1 id="2-两数之和"><a href="#2-两数之和" class="headerlink" title="2 两数之和"></a>2 两数之和</h1><p>easy</p><h1 id="3-无重复字符的最长子串"><a href="#3-无重复字符的最长子串" class="headerlink" title="3 无重复字符的最长子串"></a>3 无重复字符的最长子串</h1><ul><li><p>不能判断到有重复字符就从0开始算啊。字符串的头尾不固定的。</p><p>比如 <code>avadc</code> 虽然a在第三个位置出现了。但是不能重新计数。前面的v也可以算的。</p><ul><li>很快就解决了这个问题。就是 计数的变量count 找到重复字符后，不置为0，而是置为 两个相同字符的坐标差。这样就包含了后面的字符。</li><li>新问题就是，从新计数的单词，之前的字母还在map中没清空。怎么办？<ul><li>我设了一个开始坐标start，只有在map中且坐标大于这个start才算重复出现。</li></ul></li></ul></li></ul><p>看下第一的答案：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> subStringStart <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>subStringEnd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> maxLength <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    string subString<span class="token punctuation">;</span>    size_t occPos<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>subStringEnd<span class="token punctuation">;</span>subStringEnd<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>subStringEnd<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//查找subStringStart位置之后是否有要插入的字符</span>        occPos <span class="token operator">=</span> subString<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>subStringEnd<span class="token punctuation">]</span><span class="token punctuation">,</span>subStringStart<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果subString中已有带插入字符，将子串中已有字符的位置(occPos)</span>        <span class="token comment" spellcheck="true">//的下一位置(occPos + 1)设置为无重复子串的开始位置,即向右移动滑窗</span>        <span class="token comment" spellcheck="true">//不断调整无重复子字符串的开始位置</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>occPos <span class="token operator">!=</span> string<span class="token operator">::</span>npos<span class="token punctuation">)</span><span class="token punctuation">{</span>            subStringStart <span class="token operator">=</span> occPos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//依次将s中的元素插入subString中，同时不断计算最长子字符串长度并更新</span>        subString<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>subStringEnd<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        maxLength <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>maxLength<span class="token punctuation">,</span> subStringEnd<span class="token operator">-</span>subStringStart<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> maxLength<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="5最长回文子串"><a href="#5最长回文子串" class="headerlink" title="5最长回文子串"></a>5最长回文子串</h1><p>没想到我的方法效率还不错。</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>APPRTC分析记录</title>
      <link href="/webrtc/apprtc-fen-xi-ji-lu/"/>
      <url>/webrtc/apprtc-fen-xi-ji-lu/</url>
      
        <content type="html"><![CDATA[<p>  WebRTC iOS端官方Demo 看 APPRTC 源码的记录</p>  <a id="more"></a><h1 id="AppRTCMobile根目录"><a href="#AppRTCMobile根目录" class="headerlink" title="AppRTCMobile根目录"></a>AppRTCMobile根目录</h1><ul><li><p><code>ARDAppClient+Internal.h</code></p></li><li><p><code>ARDAppClient.h</code></p><p><code>ARDAppClient.m</code></p></li><li><p><code>ARDAppEngineClient.h</code></p><p><code>ARDAppEngineClient.m</code></p></li><li><p><code>ARDBitrateTracker.h</code></p><p><code>ARDBitrateTracker.m</code></p></li><li><p><code>ARDCaptureController.h</code></p><p><code>ARDCaptureController.m</code></p></li><li><p><code>ARDJoinResponse+ Internal.h</code></p></li><li><p><code>ARDJoinResponse.h</code></p><p><code>ARDJoinResponse.m</code></p></li><li><p><code>ARDMessageResponse +Internal.h</code></p></li><li><p><code>ARDMessageResponse.h</code></p><p><code>ARDMessageResponse.m</code></p></li><li><p><code>ARDRoomServerClient.h</code></p></li><li><p><code>ARDSettingsModel+Priva</code></p></li><li><p><code>ARDSettingsModel.h</code></p><p><code>ARDSettingsModel.m</code></p></li><li><p><code>ARDSettingsStore.h</code></p><p><code>ARDSettingsStore.m</code></p></li><li><p><code>ARDSignalingChannel.h</code></p></li><li><p><code>ARDSignalingMessage.h</code></p><p><code>ARDSignalingMessage.m</code></p></li><li><p><code>ARDStatsBuilder.h</code></p><p><code>ARDStatsBuilder.m</code></p></li><li><p><code>ARDTURNCIient+ Internal.h</code></p></li><li><p><code>ARDTURNClient.h</code></p><p><code>-</code>ARDTURNClient.m<code></code></p></li><li><p><code>ARDWebSocketChannel.h</code></p><p><code>ARDWebSocketChannel.m</code></p></li><li><p><code>RTClceCandidate+JSON.h</code></p><p><code>RTClceCandidate+JSON.m</code></p></li><li><p><code>RTClceServer+JSON.h</code></p><p><code>RTClceServer+JSON.m</code></p></li><li><p><code>RTCMediaConstraints+JSON.h</code></p><p><code>RTCMediaConstraints+JSON.m</code></p></li><li><p><code>RTCSessionDescription+JSON.h</code></p><p>RTCSessionDescription+JSONm</p><h2 id="iOS文件夹"><a href="#iOS文件夹" class="headerlink" title="iOS文件夹"></a>iOS文件夹</h2></li><li><p><code>ARDAppDelegate.h</code></p><p><code>ARDAppDelegate.m</code></p></li><li><p><code>ARDFileCaptureController.</code></p><p><code>ARDFileCaptureController.m</code></p></li><li><p><code>ARDMainView.h</code> 第一页面 配置房间号和各种参数</p><p><code>ARDMainView.m</code></p></li><li><p><code>ARDMainViewController.</code></p><p><code>ARDMainViewController.m</code></p></li><li><p><code>ARDSettingsViewControllerh</code>  App的设置 ⚙ </p><p><code>ARDSettingsViewContrller.m</code></p></li><li><p><code>ARDStatsView.h</code>  通话状态的界面变化</p><p><code>ARDStatsView.m</code></p></li><li><p><code>ARDVideoCallView.h</code>  视频通话界面的一些按钮布局</p><p><code>ARDVideoCallView.m</code></p></li><li><p><code>ARDVideoCallViewController.h</code>  视频通话界面 视频画面相关的</p><p><code>ARDVideoCallViewController.m</code></p></li><li><p><code>Info.plist</code></p></li><li><p><code>RTCVideoCodeclnfo+ HumanReadable.h</code></p><p><code>RTCVideoCodeclnfo+ HumanReadable.m</code></p></li><li><p><code>UIlmage+ ARDUtilities.h</code></p><p><code>UIlmage+ARDUtilities.m</code></p></li><li><p><code>main.m</code> </p></li></ul>]]></content>
      
      
      <categories>
          
          <category> WebRTC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>剑指offer</title>
      <link href="/algorithm/jian-zhi-offer/"/>
      <url>/algorithm/jian-zhi-offer/</url>
      
        <content type="html"><![CDATA[<p>《剑指Offer》读书笔记。感谢强哥给的书。希望明年的我也可以Offer满满~</p><p>代码基本都在这里了：<a href="https://github.com/ixsim/OJ" target="_blank" rel="noopener">https://github.com/ixsim/OJ</a></p><a id="more"></a><h1 id="Problems"><a href="#Problems" class="headerlink" title="Problems"></a>Problems</h1><ul><li style="list-style: none"><input type="checkbox"> P25这个例子。先学好C++基础吧！</li><li style="list-style: none"><input type="checkbox"> P28 C#和C++不一样那一段。在堆上分配内存和在栈上分配内存有什么不同。</li><li style="list-style: none"><input type="checkbox"> P31单例模式  研究不了 PASS </li><li style="list-style: none"><input type="checkbox"> 红黑树    据说和30题有关</li><li style="list-style: none"><input type="checkbox"> P75 斐波那契的公式法</li><li style="list-style: none"><input type="checkbox"> P82 位运算相关的题目和笔记是薄弱环节</li><li style="list-style: none"><input type="checkbox"> <a href="#11 数值的整数次方">11 数值的整数次方</a> 高效法重刷</li><li style="list-style: none"><input type="checkbox"> <a href="#12 打印1到n位最大数">12</a> 递归法重刷</li><li style="list-style: none"><input type="checkbox"> </li></ul><h1 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h1><ul><li>在C/C++中，数组作为函数的参数进行传递时，数组就自动退化为同类型的指针。</li><li>很多需要快速找到最大值或最小值的问题都可以用【堆】来解决</li><li>由于精度原因不能用等号判断两个小数是否相等。如果两个小数差的绝对值很小，就可以认为他们相等</li><li></li></ul><h1 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h1><h2 id="3搜索二维数组"><a href="#3搜索二维数组" class="headerlink" title="3搜索二维数组"></a>3搜索二维数组</h2><ul><li><p>牛客的没AC。先LeetCode上找了74搜索二维矩阵，这个稍微简单点，用一个二分查找就可以。然后240题搜索二维矩阵II就是一样的了。</p></li><li><p>看书知道了要删减的思路后。就从右上角开始。先排除的列，又排除的行。然后继续用<strong>最笨的方法去查找</strong>（其实也是一步步排除行和列的过程）。没有考虑到：</p><p>排除 列 和 行 的过程可以<strong>同时进行</strong>，直到循环结束啊。</p></li><li><p>PS:我之前这种思路是错误的：</p><p>类似二分查找，先找到要搜的列，再从这一列用二分查找。这样其实有的元素存在，但并不在你要找的这一列。</p></li></ul><h2 id="4替换空格"><a href="#4替换空格" class="headerlink" title="4替换空格"></a>4替换空格</h2><h2 id="5尾到头打印链表"><a href="#5尾到头打印链表" class="headerlink" title="5尾到头打印链表"></a>5尾到头打印链表</h2><p>用栈比较easy了.但是<strong>递归</strong>的写法注意：</p><pre class="line-numbers language-c++"><code class="language-c++">//我的写法：while(node->next!=nullptr){function递归(a,b);}//1.递归不能用while 要用if 啊//2.不能只看是不是最后一个节点。还要看当前节点：if(node!=null){    if(node!=nullptr){        func();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6重建二叉树"><a href="#6重建二叉树" class="headerlink" title="6重建二叉树"></a>6重建二叉树</h2><p>确定递归思路后全靠自己一口气撸下来，⌘ + R , 测试没问题 。提交OJ。PASS。这一周看书最爽的一次AC。</p><h2 id="7用两个栈实现队列"><a href="#7用两个栈实现队列" class="headerlink" title="7用两个栈实现队列"></a>7用两个栈实现队列</h2><p>虽然自己写AC了。但是方案不如书上。</p><p>我是借助stack2进行pop, 每次pop完再回传给stack1。</p><p>其实不需要的。好好考虑考虑吧！</p><h2 id="8-旋转数组的min"><a href="#8-旋转数组的min" class="headerlink" title="8 旋转数组的min"></a>8 旋转数组的min</h2><p>看似水题。但遍历一次要O(N)</p><p>二分查找可以边O(logN)。然后还要考虑特殊情况。不可轻视</p><h2 id="9-斐波那契"><a href="#9-斐波那契" class="headerlink" title="9 斐波那契"></a>9 斐波那契</h2><p>除了普通法和递归法，要注意还有O(logN)的解法。</p><h2 id="10-二进制中1的个数"><a href="#10-二进制中1的个数" class="headerlink" title="10 二进制中1的个数"></a>10 二进制中1的个数</h2><p>位运算。</p><ul><li><p>1不停地执行左移。执行到首位（符号位）不就成了负的？然后再左移不就永远成了负的？</p><p>ANS: 左移不会保留符号位。右移才保留</p></li><li><p>位运算效率远高于乘除。尽可能得用位运算代替乘除。</p></li></ul><h1 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h1><h2 id="11-数值的整数次方"><a href="#11-数值的整数次方" class="headerlink" title="11 数值的整数次方"></a>11 数值的整数次方</h2><p>马马虎虎地过了，看了书后发现，我并没有考虑底数是特殊值的情况。（只分了指数的情况）</p><p>其实底数也有特殊情况。就是底数为0的时候，指数为负要抛出异常。</p><p>Note：</p><ul><li>用全局变量的方式抛出异常。</li><li>由于底数是double型，不能直接用==判断是否是0。要专门写一个函数来判断。</li></ul><p>然后就是高效的解法：</p><ul><li style="list-style: none"><input type="checkbox"> 这个解法一定要重刷！</li></ul><h2 id="12-打印1到n位最大数"><a href="#12-打印1到n位最大数" class="headerlink" title="12 打印1到n位最大数"></a>12 打印1到n位最大数</h2><p>不能用int型。要用string型。</p><ul><li style="list-style: none"><input type="checkbox"> 递归的写法要注意！</li></ul><h2 id="13-O-1-时间内删除链表节点"><a href="#13-O-1-时间内删除链表节点" class="headerlink" title="13 O(1)时间内删除链表节点"></a>13 O(1)时间内删除链表节点</h2><p>题目思路简单。注意这种情况：</p><ul><li><strong>只有一个节点，要删除这个节点。</strong></li></ul><h2 id="14-调整数组顺序"><a href="#14-调整数组顺序" class="headerlink" title="14 调整数组顺序"></a>14 调整数组顺序</h2><p>判断奇数偶数这回我知道用位运算了。但是请注意这个Warn：</p><ul><li><code>&amp; has lower precedence than ==;</code>  等号运算符的优先级高于&amp;！所以要用位运算判断的与或非 <strong>记得加括号</strong></li></ul><h2 id="15-链表中倒数第k个节点"><a href="#15-链表中倒数第k个节点" class="headerlink" title="15 链表中倒数第k个节点"></a>15 链表中倒数第k个节点</h2><ul><li><p>我这个二傻子。把节点一个个存到栈里。然后出栈到第k个。AC了。</p><p>为啥不存到vector里然后用下标就能返回倒数第k个呢。</p></li><li><p>书上的方法，用两个指针，两个相距k，当一个走到尾的时候，另个就是答案了。</p><ul><li style="list-style: none"><input type="checkbox"> 这个方法需要重刷。因为要考虑到鲁棒性问题。</li></ul></li></ul><h2 id="16-反转链表"><a href="#16-反转链表" class="headerlink" title="16 反转链表"></a>16 反转链表</h2><p>先用了栈做。龙哥刚好过来。让我自己想想别用栈。我一想。哈哈。挺简单。</p><h2 id="17-合并有序链表"><a href="#17-合并有序链表" class="headerlink" title="17 合并有序链表"></a>17 合并有序链表</h2><p>我用循环写的。比较简单。Note:</p><ul><li style="list-style: none"><input type="checkbox"> 用递归做一遍</li></ul><h2 id="18-判断是不是树的子结构"><a href="#18-判断是不是树的子结构" class="headerlink" title="18 判断是不是树的子结构"></a>18 判断是不是树的子结构</h2><p>我最后AC的版本存在本地了。有这么个错误代码需要注意：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">HasSubtree</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> p1<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> p2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p1<span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token operator">||</span>p2<span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p1<span class="token operator">-</span><span class="token operator">></span>val<span class="token operator">==</span>p2<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span>    <span class="token punctuation">{</span>           <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isSame</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>p1<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span>                <span class="token function">HasSubtree</span><span class="token punctuation">(</span>p1<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">,</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">if</span><span class="token punctuation">(</span>p1<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span>                <span class="token function">HasSubtree</span><span class="token punctuation">(</span>p1<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">,</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>问题出现在第10行。我的想法是，如果有左子树就去走左子树。但是Debug的时候我发现，就算走到了第7行的return true, 程序也不会返回true的。因为我的第10行根本没有返回啊。只是去走一走。返回的一个true是从栈里返回到了第10行，并没有从第10行返回给main啊。</p><ul><li style="list-style: none"><input type="checkbox"> 重刷标记</li></ul><p>PS：这题牛客的测试用例绝对不全。</p><h3 id="amp-amp-的短路特性"><a href="#amp-amp-的短路特性" class="headerlink" title="&amp;&amp;的短路特性"></a>&amp;&amp;的短路特性</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*求1+2+…+n，要求不能使用乘除法、for、while、if、else、switch、case等关键字以及条件判断语句.解：利用&amp;&amp;的短路特性：如a&amp;&amp;b即如果a为假，b则被短路（不运算）*/</span><span class="token keyword">int</span> <span class="token function">add_fun</span><span class="token punctuation">(</span>intn<span class="token punctuation">)</span>                  <span class="token punctuation">{</span>   <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span>n<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>num<span class="token operator">=</span>n<span class="token operator">+</span><span class="token function">add_fun</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> num<span class="token punctuation">;</span>       <span class="token punctuation">}</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>     intsum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>     intn<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">add_fun</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     return0<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h1><h2 id="19-二叉树的镜像"><a href="#19-二叉树的镜像" class="headerlink" title="19 二叉树的镜像"></a>19 二叉树的镜像</h2><p>easy 秒过</p><h2 id="20-顺时针打印"><a href="#20-顺时针打印" class="headerlink" title="20 顺时针打印"></a>20 顺时针打印</h2><p>思路清晰。一次撸过。下次看看自己怎么写的就好啦。</p><p>不要二刷。</p><h2 id="21最小栈"><a href="#21最小栈" class="headerlink" title="21最小栈"></a>21最小栈</h2><p>easy不多说</p><h2 id="22入栈出栈次序"><a href="#22入栈出栈次序" class="headerlink" title="22入栈出栈次序"></a>22入栈出栈次序</h2><p>知道了用辅助栈的思路。比较好写。</p><p>不过，我没仔细看书上的代码。有空还是好好看一看。</p><h2 id="23二叉树层序遍历"><a href="#23二叉树层序遍历" class="headerlink" title="23二叉树层序遍历"></a>23二叉树层序遍历</h2><p>层序遍历就用队列嘛。easy。</p><h2 id="24判断是不是后序遍历序列"><a href="#24判断是不是后序遍历序列" class="headerlink" title="24判断是不是后序遍历序列"></a>24判断是不是后序遍历序列</h2><p>没思路。看书吧！</p><p>看书知道了思路。过了。其中输入数组为空的情况没考虑。细心点！</p><h2 id="25路径选择"><a href="#25路径选择" class="headerlink" title="25路径选择"></a>25路径选择</h2><p>应该是深度优先搜索。但我最近脑子不转，写递归的思路老是抽。</p><p>老是想，这个节点遍历完往回退的时候，怎么减到当前的节点。</p><p>其实在循环的最后一步把栈给POP一下就行了</p><h2 id="26复杂链表的复制"><a href="#26复杂链表的复制" class="headerlink" title="26复杂链表的复制"></a>26复杂链表的复制</h2><p>我的思路还是很清晰的。用一个map存。Key是原链表的地址，Value是新链表的地址。这样就有了一一对应关系。看代码：</p><pre class="line-numbers language-cpp"><code class="language-cpp">RandomListNode<span class="token operator">*</span> <span class="token function">Clone</span><span class="token punctuation">(</span>RandomListNode<span class="token operator">*</span> pHead<span class="token punctuation">)</span><span class="token punctuation">{</span>    RandomListNode <span class="token operator">*</span>ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">RandomListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    RandomListNode <span class="token operator">*</span>cur <span class="token operator">=</span> ans<span class="token punctuation">;</span>    map<span class="token operator">&lt;</span>RandomListNode <span class="token operator">*</span><span class="token punctuation">,</span>RandomListNode <span class="token operator">*</span><span class="token operator">></span> map<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>pHead<span class="token operator">!=</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>pHead<span class="token punctuation">)</span><span class="token operator">!=</span>map<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果有就不new了</span>            cur<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> map<span class="token punctuation">[</span>pHead<span class="token punctuation">]</span><span class="token punctuation">;</span>            cur <span class="token operator">=</span> cur<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//没有就new了 并存到map里</span>            RandomListNode <span class="token operator">*</span>tmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">RandomListNode</span><span class="token punctuation">(</span>pHead<span class="token operator">-</span><span class="token operator">></span>label<span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">[</span>pHead<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>            cur<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> tmp<span class="token punctuation">;</span>            cur <span class="token operator">=</span> cur<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pHead<span class="token operator">-</span><span class="token operator">></span>random<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//寻找 map 中有没有 pHead的random</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>pHead<span class="token operator">-</span><span class="token operator">></span>random<span class="token punctuation">)</span><span class="token operator">!=</span>map<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果有就指向</span>                cur<span class="token operator">-</span><span class="token operator">></span>random <span class="token operator">=</span> map<span class="token punctuation">[</span>pHead<span class="token operator">-</span><span class="token operator">></span>random<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//没有就new了并存到map里</span>                RandomListNode <span class="token operator">*</span>tmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">RandomListNode</span><span class="token punctuation">(</span>pHead<span class="token operator">-</span><span class="token operator">></span>random<span class="token operator">-</span><span class="token operator">></span>label<span class="token punctuation">)</span><span class="token punctuation">;</span>                map<span class="token punctuation">[</span>pHead<span class="token operator">-</span><span class="token operator">></span>random<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>                cur<span class="token operator">-</span><span class="token operator">></span>random <span class="token operator">=</span> tmp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        pHead <span class="token operator">=</span> pHead<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>注意第20行的<code>if(pHead-&gt;random)</code> 之前一直过不了正是由于有的节点没有random指针，为空时自然取不到label值。以后写的时候要思考全面。</li><li style="list-style: none"><input type="checkbox"> 用书上的好方法刷一次</li></ul><h2 id="27-二叉树与双向链表"><a href="#27-二叉树与双向链表" class="headerlink" title="27 二叉树与双向链表"></a>27 二叉树与双向链表</h2><p>先中序遍历，存到栈里。</p><p>然后再设置左右子树就很简单了。</p><p>思路好想，关键是输入为null的特殊情况我一直没处理。导致过不了。</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PackageMananger相关</title>
      <link href="/others/packagemananger/"/>
      <url>/others/packagemananger/</url>
      
        <content type="html"><![CDATA[<p>Homebrew,Ruby,CocoaPods,npm使用时遇到的的命令、更换源、出现的问题，简单记录</p><a id="more"></a><h1 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li>Mac的软件包管理工具，类似于linux的<code>apt-get</code>，能在mac中方便地安装软件或者卸载软件。</li></ul><h2 id="安装Homebrew"><a href="#安装Homebrew" class="headerlink" title="安装Homebrew"></a>安装Homebrew</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li><p>Homebrew依赖xcode和其Command Line Tools。</p><ol><li>在App Store中安装最新版本的xcode；</li><li>执行<code>xcode-select --install</code>安装Command Line Tools。</li></ol></li><li><p>把Homebrew安装到<code>/usr/local</code>。</p><pre><code>/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</code></pre></li></ul><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><pre><code>ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)&quot;</code></pre><h3 id="重装"><a href="#重装" class="headerlink" title="重装"></a>重装</h3><ol><li><p>备份<code>/usr/local/Cellar</code>。</p></li><li><p>删除Homebrew相关文件。</p><pre><code>cd /usr/localsudo rm -rf Library .git .gitignore bin/brew README.md share/man/man1/brewsudo rm -rf Homebrewsudo rm -rf ~/Library/Caches/Homebrew</code></pre></li><li><p>卸载Homebrew。</p><pre><code>ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)&quot;</code></pre></li><li><p>安装Homebrew。</p><pre><code>/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</code></pre></li><li><p>将第1步中的备份拷贝回<code>/usr/local/Cellar</code>。</p></li><li><p>更新Homebrew及其管理的各软件。</p><pre><code>brew updatebrew upgradebrew cleanup</code></pre></li><li><p><code>brew doctor</code>检测Homebrew潜在问题，并自行排错。如使用<code>brew link 软件名</code>将备份的软件重新symlink到Homebrew上。</p></li></ol><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h3><p><code>brew install 软件名</code>，如<code>brew install git</code>。</p><h3 id="卸载软件"><a href="#卸载软件" class="headerlink" title="卸载软件"></a>卸载软件</h3><p><code>brew uninstall 软件名</code>，如<code>brew uninstall git</code>。</p><h3 id="查找软件"><a href="#查找软件" class="headerlink" title="查找软件"></a>查找软件</h3><pre><code>brew search 查询内容</code></pre><ol><li>普通查询，<code>brew search git</code></li><li>正则查询，<code>brew search /gi*/</code></li></ol><h3 id="升级软件"><a href="#升级软件" class="headerlink" title="升级软件"></a>升级软件</h3><ul><li><code>brew upgrade 软件名</code>：更新指定软件，如<code>brew update git</code>。</li><li><code>brew upgrade</code>：更新所有软件。</li></ul><h3 id="清理软件"><a href="#清理软件" class="headerlink" title="清理软件"></a>清理软件</h3><ul><li><code>brew cleanup -n</code>：查看哪些软件包要被清除。</li><li><code>brew cleanup 软件名</code>：清除指定软件包的所有老版本。</li><li><code>brew cleanup</code>：清除所有软件包的所有老版本。</li></ul><h3 id="关联软件"><a href="#关联软件" class="headerlink" title="关联软件"></a>关联软件</h3><ul><li><p><code>brew prune</code>：清理无用的symlink，且清理与之相关的位于<code>/Applications</code>和<code>~/Applications</code>中的无用App链接。</p></li><li><p><code>brew link 软件名</code>：将指定软件的安装文件symlink到Homebrew上。</p><blockquote><p><code>brew install</code>安装的软件会自动执行link操作；<br>DIY安装的需要手动执行link操作；<br>加上<code>--overwrite</code>选项，会先删除旧的symlink，再进行新的link操作。</p></blockquote></li></ul><h3 id="信息查询"><a href="#信息查询" class="headerlink" title="信息查询"></a>信息查询</h3><ul><li><code>brew -v</code>：查看Homebrew版本号。</li><li><code>brew list</code>：列出已安装的软件。</li><li><code>brew home</code>：用浏览器打开homebrew官网。</li><li><code>brew info</code>：显示软件信息。</li></ul><h3 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h3><ul><li><code>brew update</code>：升级Homebrew自身。</li><li><code>brew doctor</code>：检测系统中与Homebrew有关的潜在问题。</li></ul><h2 id="疑难杂症"><a href="#疑难杂症" class="headerlink" title="疑难杂症"></a>疑难杂症</h2><h3 id="清除-HOMEBREW-缓存"><a href="#清除-HOMEBREW-缓存" class="headerlink" title="清除 HOMEBREW 缓存"></a>清除 HOMEBREW 缓存</h3><p><code>brew cleanup</code> 命令会删除旧版 <code>cellar</code>，以及所有 <code>brew</code> 缓存。</p><p>(<code>man brew</code>可以查看手册)</p><h3 id="文件权限问题"><a href="#文件权限问题" class="headerlink" title="文件权限问题"></a>文件权限问题</h3><ul><li><p><code>/usr/local</code>权限问题：</p><ol><li>打开Finder；</li><li>前往文件夹<code>/usr</code>；</li><li>右键文件夹local，点击显示简介；</li><li>给当前用户添加对<code>/usr/local</code>的读写权限</li></ol></li><li><p><code>/usr/local/share</code>权限问题：</p><pre><code>sudo chown -R $(whoami) /usr/local/share/</code></pre></li></ul><h1 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h1><h2 id="ruby-gem源更换国内源"><a href="#ruby-gem源更换国内源" class="headerlink" title="ruby gem源更换国内源"></a>ruby gem源更换国内源</h2><p><code>gem sources -l</code></p><p><code>gem sources --add https://gems.ruby-china.org/ --remove https://rubygems.org/</code></p><p>更新缓存<br><code>gem sources -u</code></p><h1 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h1><h2 id="npm-install提示没有package-json"><a href="#npm-install提示没有package-json" class="headerlink" title="npm install提示没有package.json"></a>npm install提示没有package.json</h2><h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><p>首先，初始化项目，一路回车就行</p><pre class="line-numbers language-shell"><code class="language-shell">npm init -f<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>-f</code>表示force的意思，不加这个，npm会让你输入一堆信息，比如name、version之类，如果只是做做实验小demo，直接<code>-f</code>，npm帮你初始化package.json，并填充各种默认值，省事。</p><p>接着安装依赖</p><pre class="line-numbers language-shell"><code class="language-shell">npm install formidable --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>--save</code>表示将安装的包加入依赖列表的意思，可以看下package.json 里的<code>dependencies</code>字段。后面再运行 <code>npm install</code>，就会把所有依赖安装下来。如果不加<code>--save</code>，什么都不会安装。</p><h2 id="淘宝-npm-镜像"><a href="#淘宝-npm-镜像" class="headerlink" title="淘宝 npm 镜像"></a>淘宝 npm 镜像</h2><p><code>npm config set registry https://registry.npm.taobao.org</code></p><h2 id="npm安装全局模块没有权限"><a href="#npm安装全局模块没有权限" class="headerlink" title="npm安装全局模块没有权限"></a>npm安装全局模块没有权限</h2><p>提示：npm WARN checkPermissions Missing write access to xxx</p><p>Mac直接用<code>brew install</code> Linux用yum</p><p>后来还不行。在 npm 前加了 <code>sudo</code>搞定了</p>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
            <tag> Homebrew </tag>
            
            <tag> Ruby </tag>
            
            <tag> CocoaPods </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>LeetCodeEasy</title>
      <link href="/algorithm/leetcodeeasy/"/>
      <url>/algorithm/leetcodeeasy/</url>
      
        <content type="html"><![CDATA[<p>知识点：<code>Hash、双指针</code>[1]     <code>int的范围</code>[7]     <code>stack、ascii</code>[20]<br><code>str.substr(pos,n)注意n是子串长</code> [14]     <code>int的范围、牛顿迭代法</code><a href="#69 x的平方根">[69]</a>      <code>copy(1.begin,1.end,2.begin)、rbegin\rend</code><a href="#88合并两个有序数组">[88]</a>      <code>摩尔投票算法</code>[169]   <code>reverse()的理解</code>[189]     <code>位运算</code>[136]   <code>string.erase()</code>[171]     <code>vt.erase()</code>[283]</p><a id="more"></a><h1 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1.两数之和"></a>1.两数之和</h1><ul><li>朴素法</li></ul><p>我的第一道LeetCode。上来就暴力解。我还纳闷呢，怎么输出结果和答案都一样。就是过不了。</p><p>原来是，时间复杂度为O(N)。过不了的。</p><ul><li>Hash O(nlogn)</li></ul><p>哈希表Hash[x]  下标x表示x在nums中的下标。</p><p><strong>注意“</strong> map底层使用平衡树一类的数据结构进行实现，插入和查询是O(logn)级别的。</p><p>代码</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">twoSum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        std<span class="token operator">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> Hash<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//建Hash</span>        <span class="token punctuation">{</span>            Hash<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">ans</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Hash<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!=</span>Hash<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>Hash<span class="token punctuation">[</span>target<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">!=</span>i<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>                ans<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> Hash<span class="token punctuation">[</span>target<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面这个版本更好理解。</p><p>然后看到这个版本更简洁。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">twoSum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> N <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>        map<span class="token operator">&lt;</span><span class="token keyword">int</span> <span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> subMap<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">auto</span> it <span class="token operator">=</span> subMap<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>it <span class="token operator">!=</span> subMap<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>it<span class="token operator">-</span><span class="token operator">></span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>                 res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            subMap<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//i=0时肯定不会输出结果，这样建Hash和判断合二为一。</span>        <span class="token punctuation">}</span>                <span class="token keyword">return</span> res<span class="token punctuation">;</span>           <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>知识点：</li></ul><p>为啥要和 <code>map.end()</code> 比较呢？</p><blockquote><p><strong>修改和查找数据</strong></p><p> （1）修改Map[“sunquan”]=11111;</p><p> （2）查找数据 用Map.find(key); 可以通过键来查。</p><p><strong>切记不要用int value=Map[key];</strong></p><p><strong>这样会在Map中增加这个key</strong>，<strong>而value就是缺省值（int 为0，string为空字符串）</strong>。</p><p>通过方法（2），会返回迭代器的地址， <strong>key不存在的话迭代器的值为</strong><code>Map.end()</code></p></blockquote><p>初学map哈哈。</p><p><a href="https://www.cnblogs.com/panweiwei/p/6657583.html" target="_blank" rel="noopener">https://www.cnblogs.com/panweiwei/p/6657583.html</a></p><h1 id="7-反转整数"><a href="#7-反转整数" class="headerlink" title="7.反转整数"></a>7.反转整数</h1><ul><li>正解</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span><span class="token operator">-</span><span class="token number">2147483648</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sign <span class="token punctuation">;</span>    x<span class="token operator">></span><span class="token number">0</span><span class="token operator">?</span> sign<span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span> <span class="token punctuation">(</span>sign<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token operator">=</span><span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> tmp <span class="token operator">=</span> x<span class="token punctuation">;</span>        x <span class="token operator">=</span> x<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>        ans <span class="token operator">=</span> ans<span class="token operator">*</span><span class="token number">10</span> <span class="token operator">+</span> <span class="token punctuation">(</span>tmp<span class="token operator">-</span>x<span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ans <span class="token operator">></span> INT_MAX<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ans<span class="token operator">*</span>sign<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Problems</li></ul><ol><li><p>第一次问题出在ans的类型上。没有存成<code>long</code>。</p><p>输入是1534236469时，输出错误。</p><p>Int 的范围是 -2^31 ~ 2^31-1，即-2147483648~2147483647</p><p>输入1534236469输出应该是9646435461都就90多亿了。int最大存21亿。</p><p>所以应该输出零。而且这个数在ans存的时候要用<code>long</code>型，再和<code>INT_MAX</code>判断一次再return。</p></li><li><p>改了long之后。1032个用例就差一个过不了了。就是-2147483648。</p><p>-2147483648会被转成正2147483648。而正int里最大是2147483647。存不下2147483648 。所以特判了。</p></li></ol><h1 id="9-回文数"><a href="#9-回文数" class="headerlink" title="9.回文数"></a>9.回文数</h1><ul><li>解法</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> tmp <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token operator">%</span><span class="token number">10</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>        y <span class="token operator">=</span> y<span class="token operator">*</span><span class="token number">10</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        x <span class="token operator">=</span> x<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">==</span>tmp<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Problems</li></ul><ol><li><p>开始忘了把x先存到tmp中。最后就直接判断<code>y==x</code> 结果每次都是返回false。</p><p>很尴尬。x在while中肯定会被改成0啊。</p></li><li><p>最后一个if只判断了true的情况，忘了写else😂😂😂</p></li></ol><p>低级错误。见笑。</p><ul><li>知识点  取消cin同步。取消cin与cout绑定。</li></ul><p>在这题和翻转数字那题的优化解里都看到这么一断：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//lambda 表达式，可以立即执行，在main函数之前执行，取消输入输出同步，较快输入输出速度</span><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">auto</span> ban_io_sync <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    std<span class="token operator">::</span>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//以后直接当模板用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <strong><code>std::ios::sync_with_stdio(false)</code></strong></p><p>这句语句是用来<strong>取消cin的同步</strong>，什么叫同步呢？就是iostream的缓冲跟stdio的同步。如果你已经在头文件上用了using namespace std;那么就可以去掉前面的std::了。</p><p>取消后就cin就不能和scanf，sscanf, getchar, fgets之类同时用了，否则就可能会导致输出和预期的不一样。 </p><p>取消同步的目的，是为了让cin不超时，另外<strong>cout的时候尽量少用endl，换用”\n”，也是防止超时的方法</strong>。<br>当然，<strong>尽量用scanf，printf就不用考虑这种因为缓冲的超时</strong>了。</p><p> <strong><code>cin.tie(NULL)</code></strong></p><p>取消cin与cout的绑定</p><hr><pre><code>把上一段代码加到我的解法前面，运行时间直接从120ms到了64ms。</code></pre><hr><ul><li><p>再看这个解法</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">static</span> <span class="token keyword">auto</span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        stringstream ss<span class="token punctuation">;</span>        ss <span class="token operator">&lt;&lt;</span> x<span class="token punctuation">;</span>        string str<span class="token punctuation">;</span>        ss <span class="token operator">>></span> str<span class="token punctuation">;</span>        string strTmp <span class="token operator">=</span> str<span class="token punctuation">;</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> str<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>strTmp <span class="token operator">==</span> str<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>存成字符串。然后用了个reverse翻转。STL里面啥都有啊。</p></li></ul><h1 id="13-罗马数字转整数"><a href="#13-罗马数字转整数" class="headerlink" title="13.罗马数字转整数"></a>13.罗马数字转整数</h1><ul><li>无聊的一题</li></ul><h1 id="14-最长公共前缀"><a href="#14-最长公共前缀" class="headerlink" title="14.最长公共前缀"></a>14.最长公共前缀</h1><ul><li>解</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp">string <span class="token function">Prefix2</span><span class="token punctuation">(</span>string a<span class="token punctuation">,</span>string b<span class="token punctuation">)</span><span class="token punctuation">{</span>        string ans <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>p <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> p <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">==</span> b <span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        ans <span class="token operator">+</span><span class="token operator">=</span> a<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>                        p<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span>string <span class="token function">longestCommonPrefix</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> strs<span class="token punctuation">)</span> <span class="token punctuation">{</span>    string ans <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>strs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>strs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> iter1 <span class="token operator">=</span> strs<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>iter1 <span class="token operator">!=</span> <span class="token punctuation">(</span>strs<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">auto</span> iter2 <span class="token operator">=</span> iter1 <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        ans <span class="token operator">=</span> <span class="token function">Prefix2</span><span class="token punctuation">(</span><span class="token operator">*</span>iter1<span class="token punctuation">,</span><span class="token operator">*</span>iter2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ans <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        iter1<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token operator">*</span>iter1 <span class="token operator">=</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我的解真是弱爆了。</p><p><strong>Problems</strong></p><ul><li><p>第一次报错</p><blockquote><p>“Runtime Error Message:reference binding to null pointer of type ‘struct value_type’</p><p> Last executed input: []</p></blockquote><p>百度了一下。<a href="https://blog.csdn.net/zy2317878/article/details/78820900" target="_blank" rel="noopener">https://blog.csdn.net/zy2317878/article/details/78820900</a>  特判：如果size()是0则返回””</p><p>边界值特殊值要考虑好啊。</p></li><li><p>第二次是输入只有1个单词的时候。因为我是自己写了个比较两个单词最长前缀的函数。所以输入只有一个的时候，直接返回了””。正确答案应该是返回这个单词。我又强行加了这么一种情况。</p></li><li><p>我的解法效率极低。下面去看看大神们怎么解吧。</p></li></ul><p>优化解</p><pre class="line-numbers language-cpp"><code class="language-cpp">string <span class="token function">longestCommonPrefix</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> strs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> vec_len<span class="token operator">=</span>strs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>vec_len<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> str_len<span class="token operator">=</span>strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>str_len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>          <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>vec_len<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>知识点：</p><ul><li><code>str.substr(x,y)</code>就是取子串。</li><li><code>str.substr(0,0)</code>应该就是<code>&quot;&quot;</code></li></ul><p>这个解的逻辑确实很清晰！</p><ul><li><p>相同的逻辑，解答里还有一个0ms的写法就是</p><p><code>while((strs[0])[i])</code></p></li></ul><h1 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="20.有效的括号"></a>20.有效的括号</h1><p><strong>Problems</strong></p><ul><li><p><code>char</code>类型就用<strong>单引号</strong>啊！！！</p><p>之前写 <code>s[i] == &quot;(&quot;</code>一直报错。我就是整不明白为啥报错。</p><p><strong>单引号啊！！！</strong></p></li><li><p><code>vector.end()</code>是地址，而且还是最后一个元素后面的地址。所以最后一个元素应该是</p><p><code>*(vector.end()-1)</code> </p><p>遍历的话可以用<code>for(auto s:vector)</code></p></li><li><p>拿过题就用vector声明了一个栈做。不知道有<code>stack</code>都。NAIVE~</p></li><li><p>判断”)}]”这三种情况的时候应该先看栈里是不是空。再看栈顶的元素。不然如果栈为空，取栈top()会跑不出来。</p></li><li><p>每次<code>return flase</code>之后都要记得<strong>break</strong>跳出循环啊</p></li><li><p><strong>vector中v[i]与v.at(i)的区别</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp">v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// A</span>v<span class="token punctuation">.</span>at<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// B</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果v非空，A行和B行没有任何区别。</p><p>如果<strong>v为空或者下标越界</strong>，B行会抛出std::out_of_range异常，A行的行为未定义。</p><p>c++标准不要求vector::operator[]进行下标越界检查，原因是为了效率，总是强制下标越界检查会增加程序的性能开销。设计vector是用来代替内置数组的，所以效率问题也应该考虑。不过使用operator[]就要自己承担越界风险了。</p><p>如果需要下标越界检查，请使用at。</p></li></ul><p>我的解效率特别差。看一下人家的</p><p><strong>优化解</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">isValid</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>       stack<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> sta<span class="token punctuation">;</span>    <span class="token keyword">int</span> length <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sta<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            sta<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>sta<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> s<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">||</span> sta<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> s<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            sta<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            sta<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sta<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>哎！简洁又效率。</p><ul><li><p>先判断了长度是奇数返回false.为空返回false.</p></li><li><p>没有瞎判断字符是不是<code>&#39;{([])}&#39;</code></p><p>而是利用了ascii码。那为啥有 -1 有 -2 呢？</p><p>看了ascii码表你就知道了。</p></li></ul><table><thead><tr><th>ASCII值</th><th>控制字符</th><th>ASCII值</th><th>控制字符</th><th>ASCII值</th><th>控制字符</th><th>ASCII值</th><th>控制字符</th></tr></thead><tbody><tr><td>0</td><td>NUT</td><td>32</td><td>(space)</td><td>64</td><td>@</td><td>96</td><td>、</td></tr><tr><td>1</td><td>SOH</td><td>33</td><td>!</td><td>65</td><td>A</td><td>97</td><td>a</td></tr><tr><td>2</td><td>STX</td><td>34</td><td>“</td><td>66</td><td>B</td><td>98</td><td>b</td></tr><tr><td>3</td><td>ETX</td><td>35</td><td>#</td><td>67</td><td>C</td><td>99</td><td>c</td></tr><tr><td>4</td><td>EOT</td><td>36</td><td>$</td><td>68</td><td>D</td><td>100</td><td>d</td></tr><tr><td>5</td><td>ENQ</td><td>37</td><td>%</td><td>69</td><td>E</td><td>101</td><td>e</td></tr><tr><td>6</td><td>ACK</td><td>38</td><td>&amp;</td><td>70</td><td>F</td><td>102</td><td>f</td></tr><tr><td>7</td><td>BEL</td><td>39</td><td>,</td><td>71</td><td>G</td><td>103</td><td>g</td></tr><tr><td>8</td><td>BS</td><td><strong>40</strong></td><td><strong>(</strong></td><td>72</td><td>H</td><td>104</td><td>h</td></tr><tr><td>9</td><td>HT</td><td><strong>41</strong></td><td><strong>)</strong></td><td>73</td><td>I</td><td>105</td><td>i</td></tr><tr><td>10</td><td>LF</td><td>42</td><td>*</td><td>74</td><td>J</td><td>106</td><td>j</td></tr><tr><td>11</td><td>VT</td><td>43</td><td>+</td><td>75</td><td>K</td><td>107</td><td>k</td></tr><tr><td>12</td><td>FF</td><td>44</td><td>,</td><td>76</td><td>L</td><td>108</td><td>l</td></tr><tr><td>13</td><td>CR</td><td>45</td><td>-</td><td>77</td><td>M</td><td>109</td><td>m</td></tr><tr><td>14</td><td>SO</td><td>46</td><td>.</td><td>78</td><td>N</td><td>110</td><td>n</td></tr><tr><td>15</td><td>SI</td><td>47</td><td>/</td><td>79</td><td>O</td><td>111</td><td>o</td></tr><tr><td>16</td><td>DLE</td><td>48</td><td>0</td><td>80</td><td>P</td><td>112</td><td>p</td></tr><tr><td>17</td><td>DCI</td><td>49</td><td>1</td><td>81</td><td>Q</td><td>113</td><td>q</td></tr><tr><td>18</td><td>DC2</td><td>50</td><td>2</td><td>82</td><td>R</td><td>114</td><td>r</td></tr><tr><td>19</td><td>DC3</td><td>51</td><td>3</td><td>83</td><td>S</td><td>115</td><td>s</td></tr><tr><td>20</td><td>DC4</td><td>52</td><td>4</td><td>84</td><td>T</td><td>116</td><td>t</td></tr><tr><td>21</td><td>NAK</td><td>53</td><td>5</td><td>85</td><td>U</td><td>117</td><td>u</td></tr><tr><td>22</td><td>SYN</td><td>54</td><td>6</td><td>86</td><td>V</td><td>118</td><td>v</td></tr><tr><td>23</td><td>TB</td><td>55</td><td>7</td><td>87</td><td>W</td><td>119</td><td>w</td></tr><tr><td>24</td><td>CAN</td><td>56</td><td>8</td><td>88</td><td>X</td><td>120</td><td>x</td></tr><tr><td>25</td><td>EM</td><td>57</td><td>9</td><td>89</td><td>Y</td><td>121</td><td>y</td></tr><tr><td>26</td><td>SUB</td><td>58</td><td>:</td><td>90</td><td>Z</td><td>122</td><td>z</td></tr><tr><td>27</td><td>ESC</td><td>59</td><td>;</td><td><strong>91</strong></td><td><strong>[</strong></td><td><strong>123</strong></td><td><strong>{</strong></td></tr><tr><td>28</td><td>FS</td><td>60</td><td>&lt;</td><td>92</td><td>/</td><td>124</td><td></td></tr><tr><td>29</td><td>GS</td><td>61</td><td>=</td><td><strong>93</strong></td><td><strong>]</strong></td><td><strong>125</strong></td><td><strong>}</strong></td></tr><tr><td>30</td><td>RS</td><td>62</td><td>&gt;</td><td>94</td><td>^</td><td>126</td><td>`</td></tr><tr><td>31</td><td>US</td><td>63</td><td>?</td><td>95</td><td>_</td><td>127</td><td>DEL</td></tr></tbody></table><h1 id="26-删除排序数组中的重复项"><a href="#26-删除排序数组中的重复项" class="headerlink" title="26. 删除排序数组中的重复项"></a>26. 删除排序数组中的重复项</h1><ul><li>循环左移之后。记得这一轮就不要让标记位置走到下一个了。</li><li>传入空字符串的时候。我的程序会完全没有符合的条件。而导致没有返回值超时。以后要注意写条件的时候就想清楚会不会有特殊情况。</li><li>sb了。没看题是排好序的。而且遍历的时候是遍历你返回值n的前n个。</li></ul><h1 id="27-移除元素"><a href="#27-移除元素" class="headerlink" title="27. 移除元素"></a>27. 移除元素</h1><p>吸收了上一题的答案。直接超越100%：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>val<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//只要不是val就存进来</span>        nums<span class="token punctuation">[</span>n<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> n<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="35-搜索插入位置"><a href="#35-搜索插入位置" class="headerlink" title="35. 搜索插入位置"></a>35. 搜索插入位置</h1><p>PASS</p><h1 id="53-最大子序和"><a href="#53-最大子序和" class="headerlink" title="53. 最大子序和"></a>53. 最大子序和</h1><p>暴力写出来了。人家怎么就想到这么写呢：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> res <span class="token operator">=</span> INT_MIN<span class="token punctuation">,</span> curSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    curSum <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>curSum <span class="token operator">+</span> num<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>    res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> curSum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> res<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="66-加一"><a href="#66-加一" class="headerlink" title="66. 加一"></a>66. 加一</h1><p>水</p><h1 id="69-x的平方根"><a href="#69-x的平方根" class="headerlink" title="69 x的平方根"></a>69 x的平方根</h1><ul><li><p>int 的范围问题。本来用的int。结果人家给的输入。int平方之后就超过了范围了。以后要注意！</p></li><li><p>牛顿迭代法Mark。还可用用来解多次方程</p></li></ul><h1 id="70爬楼梯"><a href="#70爬楼梯" class="headerlink" title="70爬楼梯"></a>70爬楼梯</h1><p>其实就是斐波那契这题。我用递归写的。<strong>但是！</strong>我的写法，在输入是40以后，就超时咯（我特判了过的）。这么写不错：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> dp0<span class="token punctuation">,</span> dp1<span class="token punctuation">,</span> dp<span class="token punctuation">;</span>    dp0 <span class="token operator">=</span> dp1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        dp <span class="token operator">=</span> dp0 <span class="token operator">+</span> dp1<span class="token punctuation">;</span>        dp0 <span class="token operator">=</span> dp1<span class="token punctuation">;</span>        dp1 <span class="token operator">=</span> dp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> dp<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="88合并两个有序数组"><a href="#88合并两个有序数组" class="headerlink" title="88合并两个有序数组"></a>88合并两个有序数组</h1><p>🙂🙂🙂</p><p>一晚上我没做出来这题</p><ul><li><p>结束void函数，直接<code>return;</code></p></li><li><p>看了提示。从后往前插入。写出来了。速度不行。看一下这个0ms的：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums2<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">auto</span> b1 <span class="token operator">=</span> nums1<span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> n<span class="token punctuation">,</span> b2 <span class="token operator">=</span> nums2<span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> cur <span class="token operator">=</span> nums1<span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> b1 <span class="token operator">!=</span> nums1<span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>cur<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b2 <span class="token operator">==</span> nums2<span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>b2 <span class="token operator">&lt;</span> <span class="token operator">*</span>b1<span class="token punctuation">)</span>            <span class="token operator">*</span>cur <span class="token operator">=</span> <span class="token operator">*</span>b1<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token operator">*</span>cur <span class="token operator">=</span> <span class="token operator">*</span>b2<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">copy</span><span class="token punctuation">(</span>b2<span class="token punctuation">,</span> nums2<span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums1<span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>nums2<span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> b2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="100-相同的树"><a href="#100-相同的树" class="headerlink" title="100.相同的树"></a>100.相同的树</h1><p>先来看我之前写法：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">isSameTree</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> p<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">&amp;&amp;</span>q<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token operator">></span>val<span class="token operator">!=</span>q<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">&amp;&amp;</span><span class="token operator">!</span>q<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token operator">&amp;&amp;</span><span class="token operator">!</span>p<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token operator">&amp;&amp;</span><span class="token operator">!</span>q<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token operator">></span>left<span class="token operator">&amp;&amp;</span>q<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//加上这个if条件是因为不然会因为p\q指向空指针报这个错：member access null pointer of type 'struct TreeNode'</span>        <span class="token function">isSameTree</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">,</span>q<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token operator">></span>right<span class="token operator">&amp;&amp;</span>q<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span>        <span class="token function">isSameTree</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">,</span>q<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这写法过不了。师哥改：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">isSameTree</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> p<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">&amp;&amp;</span>q<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token operator">></span>val<span class="token operator">!=</span>q<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">&amp;&amp;</span><span class="token operator">!</span>q<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token operator">&amp;&amp;</span><span class="token operator">!</span>p<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token operator">&amp;&amp;</span><span class="token operator">!</span>q<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">isSameTree</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">,</span>q<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span>        <span class="token operator">&amp;&amp;</span><span class="token function">isSameTree</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">,</span>q<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span>        <span class="token operator">&amp;&amp;</span>p<span class="token operator">-</span><span class="token operator">></span>val<span class="token operator">==</span>q<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//直接返回两个结果&amp;&amp;起来不就解决了吗。这样有一边走到了false都会返回false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="101-对称二叉树"><a href="#101-对称二叉树" class="headerlink" title="101.对称二叉树"></a>101.对称二叉树</h1><ul><li><p>开始写成了判断节点的两个孩子是否相同。完全整错了题。</p></li><li><p>用两个前序遍历把结果存到vector里。一个先遍历左孩子，一个先遍历右孩子。然后比较两个vt相同。</p><ul><li>Problem，空节点的时候，不会存入vector，导致一些情况判错。解决方法：空节点存入-9999</li></ul></li><li><p>正经的解法：</p><pre class="line-numbers language-cpp"><code class="language-cpp"> <span class="token keyword">bool</span> <span class="token function">symmetric</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> left<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>left <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>right<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>left <span class="token operator">||</span> <span class="token operator">!</span>right<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> left<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">==</span> right<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">&amp;&amp;</span> <span class="token function">symmetric</span><span class="token punctuation">(</span>left<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">,</span> right<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">symmetric</span><span class="token punctuation">(</span>left<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">,</span> right<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">isSymmetric</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">symmetric</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">,</span> root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="04二叉树的最大深度"><a href="#04二叉树的最大深度" class="headerlink" title="04二叉树的最大深度"></a>04二叉树的最大深度</h1><p>必备</p><h1 id="107二叉树的层次遍历-II"><a href="#107二叉树的层次遍历-II" class="headerlink" title="107二叉树的层次遍历 II"></a>107二叉树的层次遍历 II</h1><h1 id="121-122-买股票1-买股票2"><a href="#121-122-买股票1-买股票2" class="headerlink" title="121/122 买股票1 买股票2"></a>121/122 买股票1 买股票2</h1><ul><li><p>121：比较简单。但我第一次用的O(n2)。显得很没水平。只要记录最小值和最大值就可以了。不需要两层循环遍历的。</p></li><li><p>122：有了上一题的启发。很快解决。（本来想半天）</p></li></ul><h1 id="189旋转数组"><a href="#189旋转数组" class="headerlink" title="189旋转数组"></a>189旋转数组</h1><ul><li><p>开始想用一个临时数组存原来的数。然后根据需要copy。</p><p>结果发现人家让空间复杂度O(1)原地完成。</p></li><li><p>想到了多次Reverse的方法。这个思路还是很清晰的。以下两点需要注意：</p><ul><li><p>如vt的内容是 1 2 3 4 5 6 7</p><p><code>reverse(vt.begin(),vt.begin()+3)</code>执行后，反转的就是前三个数。变成：</p><p>321  4567</p><p>虽然vt.begin()+3已经指向了4这个元素。</p><p>这也可以解释为什么<code>reverse(vt.begin(),vt.end())</code>在end()指向空的时候，为什么可以翻转整个vector。</p></li><li><p>输入的位移量大于数组长度的情况要考虑到，取余即可。（怕的是想不到）</p></li></ul></li></ul><h1 id="136只出现一次的数字"><a href="#136只出现一次的数字" class="headerlink" title="136只出现一次的数字"></a>136只出现一次的数字</h1><p>高端操作：位运算</p><ul><li>延伸阅读：<a href="https://blog.csdn.net/bitboss/article/details/51594037" target="_blank" rel="noopener">https://blog.csdn.net/bitboss/article/details/51594037</a><ul><li>进阶1： <strong>一个数组中，只有一个数字出现了一次，其他数字都出现了三次，找出这个出现了一次的数字；</strong></li><li>进阶2：<strong>&lt;百度面试题&gt;：在一个数组中，其他元素都是成对出现，只有两个数字只出现了一次，找出这两个数；</strong></li></ul></li></ul><h1 id="151最小栈"><a href="#151最小栈" class="headerlink" title="151最小栈"></a>151最小栈</h1><ul><li>可以用<code>*(vt.end()-1)</code>的方式取到vector的最后一个元素啊。</li><li></li></ul><h1 id="两个数组的交集-II"><a href="#两个数组的交集-II" class="headerlink" title="两个数组的交集 II"></a>两个数组的交集 II</h1><p>关于map的遍历：</p><ul><li>如果输入的map下标不存在则会创建这个下标。</li><li>map.find()是查的关键字</li></ul><h1 id="168-EXCELL表列名"><a href="#168-EXCELL表列名" class="headerlink" title="168 EXCELL表列名"></a>168 EXCELL表列名</h1><p>就是输入1输出A 输入28输出AB</p><ul><li><p>注意输入26时，余数为0。这种情况需要特判。</p><p>输入26时。n的循环也会多走一圈。需要特判。不然输入26会输出ZA。</p></li><li><p>每轮循环结束是 <code>n = n/26</code> 还是<code>n = n-26</code> ?    请思考清楚</p></li></ul><h1 id="171和168相对"><a href="#171和168相对" class="headerlink" title="171和168相对"></a>171和168相对</h1><p><code>string.erase(pos,len)</code>,从pos位置开始删除len个字符。len缺省则删除到末尾。返回string的一个引用。</p><p>比如<code>str.erase(str.size()-5,5);</code> 删除了后5个字符。注意是.size()-5 。就是用下标来控制的。</p><p>我个人更喜欢用<code>str = str.substr(pos1,pos2)</code>这种方式删除</p><h1 id="169绝对众数"><a href="#169绝对众数" class="headerlink" title="169绝对众数"></a>169绝对众数</h1><ul><li>用map做感觉是水题。</li></ul><p>但是在别人的解法里学到了摩尔投票算法：</p><blockquote><p>首先请考虑最基本的摩尔投票问题，找出一组数字序列中出现次数大于总数1/2的数字（并且假设这个数字一定存在）。显然这个数字只可能有一个。<strong>摩尔投票算法是基于这个事实：每次从序列里选择两个不相同的数字删除掉（或称为“抵消”），最后剩下一个数字或几个相同的数字，就是出现次数大于总数一半的那个</strong>。</p></blockquote><ul><li>继续延伸：1/k众数</li></ul><p>Ex:k=3。求1/3众数。注：这样的数可能不存在</p><pre class="line-numbers language-cpp"><code class="language-cpp">    <span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>    <span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib></span></span>    <span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>    <span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iterator></span></span>    <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">FindMode</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> mode<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> m<span class="token punctuation">,</span>n<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//候选值</span>    <span class="token keyword">int</span> cm <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> cn <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//候选值m、n的个数</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cm <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            m <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            cm <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>cn <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            n <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            cn <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>m <span class="token operator">==</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cm<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cn<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            cm<span class="token operator">--</span><span class="token punctuation">;</span>            cn<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//↑ 运行到此处时的m、n一定是众数，同时也是可能存在的1/3众数。</span>    cm <span class="token operator">=</span> cn <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//为确保一定存在（因为1/3众数可能不存在），一定要重新遍历统计出现次数</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>m <span class="token operator">==</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cm<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cn<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cm <span class="token operator">></span> size<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        mode<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        cout&lt;&lt; m&lt;&lt;" ";</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cn <span class="token operator">></span> size<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        mode<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        cout&lt;&lt; n&lt;&lt;" ";</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Print</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vector<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>vector<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span> vector<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> mode<span class="token punctuation">;</span>    <span class="token function">FindMode</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span>mode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Print</span><span class="token punctuation">(</span>mode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="172阶乘后的零"><a href="#172阶乘后的零" class="headerlink" title="172阶乘后的零"></a>172阶乘后的零</h1><ul><li><p>13的阶乘就已经超INT范围了。用了<code>long long</code>型之后，它给我输入了个30🙂🙂🙂</p><p>思路有问题🙃</p></li><li><p>找到了规律。其实有几个零就是和因子里有几个5有关系。所以遇到 5、25、125、675~这种要处理，可是刁钻的问题出现了。测试用例给了一个1808548329。5的13次方是1220703125。我的算法可以给出答案。但是超时了。后面还有个过不了的用例2147483647。就是INT_MAX呗。超时了。我直接特判了这两个过的。</p></li><li><p>结果发现0ms的答案只有这么几行：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">trailingZeroes</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> i<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">=</span>i<span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">)</span>        sum<span class="token operator">=</span>sum<span class="token operator">+</span>n<span class="token operator">/</span>i<span class="token punctuation">;</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>这时候再回头看一下我自己写的【超时版】答案。其实不就是一个意思吗：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> ans <span class="token operator">=</span> n<span class="token operator">/</span><span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//先除以5</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/*小于25的时候。里面每有一个25就++(这不就是m/pow(5,2)吗？我傻不拉几的在那用循环判断每次ans++)*/</span>    <span class="token keyword">int</span> tmp <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>tmp<span class="token operator">>=</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ans <span class="token operator">++</span><span class="token punctuation">;</span>        tmp <span class="token operator">-</span><span class="token operator">=</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> ans<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="283移动零"><a href="#283移动零" class="headerlink" title="283移动零"></a>283移动零</h1><p>输入 0 1 0 3 2</p><p>输出 1 3 2 0 0 </p><ul><li>注意，用迭代器it控制，vt.erase(it) 时，删除了it指向的元素，且it会指向下一个it。</li><li>出现的问题：<ul><li>开始我只用迭代器来控制遍历，当迭代器为end时终止遍历，没考虑到，我会不停地在vector尾部push_back(0)，这样遍历永远都不会结束。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Heroku搭建自己的ss服务器教程</title>
      <link href="/others/heroku-ssh/"/>
      <url>/others/heroku-ssh/</url>
      
        <content type="html"><![CDATA[<p>Heroku是日本一家网站。为开发者提供了免费部署项目的服务器。虽然访问<strong>Heroku是被qiang</strong>的。但是用Heroku部署后的应用(saas/web app)其主机在美国和欧洲，且主机地址没有被qiang。利用这一点就可以免费搭建一个自己的ss服务器。</p><p>由于有GitHub上的开源项目，其搭建过程可以称之为傻瓜式。</p><a id="more"></a><h1 id="注册Heroku"><a href="#注册Heroku" class="headerlink" title="注册Heroku"></a>注册Heroku</h1><p>到这里注册： <a href="https://signup.heroku.com/" target="_blank" rel="noopener">https://signup.heroku.com/</a>   <del>[<em>需要富强上网</em>]</del></p><blockquote><p>ps：建议用gmail邮箱注册。163啥的应该是注册不了滴</p></blockquote><p><del>这一步需要靠你自己了。什么蓝🙃灯赛🙂风我相信你可以的。</del></p><p><del>如果你实在一点办法都没有。我给你俩<strong>在线代理</strong>的网站。速度可能慢点。</del> <del><a href="https://www.anyproxy.top" target="_blank" rel="noopener">https://www.anyproxy.top</a></del> <del><a href="https://www.anyproxy.cn" target="_blank" rel="noopener">https://www.anyproxy.cn</a></del><del>只能帮你到这了！</del>      </p><p><strong>惊奇地发现，Heroku好像不被qiang了😃😃😃</strong></p><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>登录上你的Heroku之后，</p><p><a href="https://heroku.com/deploy?template=https://github.com/onplus/shadowsocks-heroku/tree/re" target="_blank" rel="noopener">—–》》》点这里《《《—–</a></p><p>进去之后改两个地方：</p><ul><li><strong>App name</strong><ul><li>起个名字。是唯一标识的。会提示你可不可用。</li></ul></li><li><strong>KEY</strong><ul><li>设置一个密码。</li></ul></li></ul><p>这两个地方我们会在下一步用到。</p><p>一切从简，其他地方不必修改。</p><h1 id="启动本地客户端"><a href="#启动本地客户端" class="headerlink" title="启动本地客户端"></a>启动本地客户端</h1><ul><li><p>下载：<a href="https://github.com/onplus/shadowsocks-heroku/releases" target="_blank" rel="noopener">https://github.com/onplus/shadowsocks-heroku/releases</a></p><p>根据你是什么系统。下载对应的客户端压缩包。</p></li><li><p>解压后有个<code>config.json</code>文件：</p><pre class="line-numbers language-json"><code class="language-json">  <span class="token punctuation">{</span>    <span class="token property">"server"</span><span class="token operator">:</span> <span class="token string">"你设置的AppName.herokuapp.com"</span><span class="token punctuation">,</span>    <span class="token property">"local_address"</span><span class="token operator">:</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span>    <span class="token property">"scheme"</span><span class="token operator">:</span> <span class="token string">"ws"</span><span class="token punctuation">,</span>    <span class="token property">"local_port"</span><span class="token operator">:</span> <span class="token string">"1080"</span><span class="token punctuation">,</span>    <span class="token property">"remote_port"</span><span class="token operator">:</span> <span class="token string">"80"</span><span class="token punctuation">,</span>    <span class="token property">"password"</span><span class="token operator">:</span> <span class="token string">"这里输入你设置的密码"</span><span class="token punctuation">,</span>    <span class="token property">"timeout"</span><span class="token operator">:</span> <span class="token number">600</span><span class="token punctuation">,</span>    <span class="token property">"method"</span><span class="token operator">:</span> <span class="token string">"aes-256-cfb"</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>启动</p><ul><li><p>Windows：</p><p>直接打开start或ssh的exe文件都可以打开。区别是一个在后台运行了。一个是有黑框界面。</p></li><li><p>Mac/Linux:</p><p>cd到该目录下，执行<code>./ss-h</code> 。你会看到一条server listening at {xxx}的提示。</p><p><img src="http://p66eruxmw.bkt.clouddn.com/20180912153672940559052.png" alt="20180912153672940559052.png"></p></li></ul></li></ul><p>这样本地客户端就启动了。</p><h1 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h1><p>在Chrome浏览器安装Proxy SwitchyOmega插件</p><h2 id="安装Proxy-SwitchyOmega"><a href="#安装Proxy-SwitchyOmega" class="headerlink" title="安装Proxy SwitchyOmega"></a>安装Proxy SwitchyOmega</h2><p><a href="https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif?utm_source=chrome-ntp-icon" target="_blank" rel="noopener">chrome应用商店下载</a></p><ul><li><p>不能访问谷歌的到这里下载：</p><p><a href="http://crx.2333.me/" target="_blank" rel="noopener">http://crx.2333.me/</a></p><p>进去后输入id：padekgcemlokbadohgkifijomclgjgif</p></li></ul><h2 id="配置Proxy-SwitchyOmega"><a href="#配置Proxy-SwitchyOmega" class="headerlink" title="配置Proxy SwitchyOmega"></a>配置Proxy SwitchyOmega</h2><p>如图。6步。</p><p><img src="http://p66eruxmw.bkt.clouddn.com/20180912153673022932762.png" alt="20180912153673022932762.png"></p><p>切换到proxy模式就可以Google了~</p><p><img src="http://p66eruxmw.bkt.clouddn.com/2018091215367302988462.png" alt="2018091215367302988462.png"></p><h2 id="进阶配置"><a href="#进阶配置" class="headerlink" title="进阶配置"></a>进阶配置</h2><p>proxy模式就是所有的网站都通过代理来访问。这样其实有点多余。</p><p>下面我们通过添加规则，让插件去判断什么情况下启用代理。</p><p>在插件的 auto switch里，添加规则列表网站：</p><p><code>https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt</code></p><p>如图，记得点应用选项以保存。</p><p><img src="http://p66eruxmw.bkt.clouddn.com/20180912153673062820324.png" alt="20180912153673062820324.png"></p><p>这样你选择auto switch模式，插件就可以按照规则来判断是否使用代理。</p><p>如果你想访问的 网站不在规则列表里。在上面的规则上自己添加一个条件就好啦~</p><p>本篇教程结束。这种方法永久免费还不会被封。</p><p>缺点就是只能在PC端使用。关于手机端的教程下次再写啦~</p>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tips </tag>
            
            <tag> Heroku </tag>
            
            <tag> ss </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>LeetCode 字符串+简单</title>
      <link href="/algorithm/string-easy/"/>
      <url>/algorithm/string-easy/</url>
      
        <content type="html"><![CDATA[<p>知识点：<code>String</code>、  <code>reverse()</code>[557]、   <code>istringstream</code>[557] 、<code>memset</code>[387] 、<code>树</code>[606]、<code>to_string()</code>[788]、<code>npos</code>[345] 、<code>transform()</code>[819]、<code>strA.find(strB) != string:npos</code>[#686]</p><a id="more"></a><h1 id="基础部分"><a href="#基础部分" class="headerlink" title="基础部分"></a>基础部分</h1><ul><li><p>string对象的操作</p><pre class="line-numbers language-cpp"><code class="language-cpp">istringstram osos<span class="token operator">&lt;&lt;</span>s   <span class="token comment" spellcheck="true">//s写入到输出流os中。返回os</span>is<span class="token operator">>></span>s    <span class="token comment" spellcheck="true">//从输入流is读取字符串赋给s，返回is。</span>s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span>s<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//n从0计</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="709-转换成小写字母"><a href="#709-转换成小写字母" class="headerlink" title="709. 转换成小写字母"></a>709. 转换成小写字母</h1><p><code>A~Z</code>的ascii码为<code>65~90</code>   小写字母对应+32</p><h1 id="657-机器人能否返回原点"><a href="#657-机器人能否返回原点" class="headerlink" title="657. 机器人能否返回原点"></a>657. 机器人能否返回原点</h1><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">judgeCircle</span><span class="token punctuation">(</span>string moves<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> tb<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> ch <span class="token operator">:</span> moves<span class="token punctuation">)</span>        <span class="token operator">++</span>tb<span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> tb<span class="token punctuation">[</span><span class="token string">'R'</span><span class="token punctuation">]</span> <span class="token operator">==</span> tb<span class="token punctuation">[</span><span class="token string">'L'</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> tb<span class="token punctuation">[</span><span class="token string">'U'</span><span class="token punctuation">]</span> <span class="token operator">==</span> tb<span class="token punctuation">[</span><span class="token string">'D'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="344-反转字符串"><a href="#344-反转字符串" class="headerlink" title="344. 反转字符串"></a>344. 反转字符串</h1><p>EASY</p><h1 id="557-反转字符串中的单词III"><a href="#557-反转字符串中的单词III" class="headerlink" title="557. 反转字符串中的单词III"></a>557. 反转字符串中的单词III</h1><p>从句子里取单词的方法：</p><pre class="line-numbers language-cpp"><code class="language-cpp">string <span class="token function">reverseWords</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    istringstream <span class="token function">is</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    string t <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    string res <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>is <span class="token operator">>></span> t<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        res <span class="token operator">+</span><span class="token operator">=</span> t <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    res<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="521-最长特殊序列I"><a href="#521-最长特殊序列I" class="headerlink" title="521. 最长特殊序列I"></a>521. 最长特殊序列I</h1><p>抠定义的题。直接返回最长的子串长度即可。</p><h1 id="520-检测大写字母"><a href="#520-检测大写字母" class="headerlink" title="520. 检测大写字母"></a>520. 检测大写字母</h1><p>各种if分情况🙂</p><h1 id="788-旋转数字"><a href="#788-旋转数字" class="headerlink" title="788. 旋转数字"></a>788. 旋转数字</h1><ul><li><p>int转string： <code>str = tostring(i);</code></p></li><li><p>最好不要一次写两次循环。能拆出函数来就写一个函数。</p></li></ul><h1 id="824-山羊拉丁文"><a href="#824-山羊拉丁文" class="headerlink" title="824. 山羊拉丁文"></a>824. 山羊拉丁文</h1><ul><li><p>用istringsteam挨个读单词并处理。处理后加一个空格。</p><p>注意，这样句子最后就会多一个空格。需要输出<code>ans.substr(0,ans.size()-1)</code></p></li><li><p>把单词的第一个字母放到最后的方法：</p><pre class="line-numbers language-cpp"><code class="language-cpp">stringsteam oss<span class="token punctuation">;</span>oss<span class="token operator">&lt;&lt;</span>word<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>word<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h1 id="606-根据二叉树创建字符串"><a href="#606-根据二叉树创建字符串" class="headerlink" title="606. 根据二叉树创建字符串"></a>606. 根据二叉树创建字符串</h1><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//唯一要注意的地方就是函数定义参数时ans前面加引用&amp;</span><span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> t<span class="token punctuation">,</span>string <span class="token operator">&amp;</span>ans<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">to_string</span><span class="token punctuation">(</span>t<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span>        ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"("</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>t<span class="token operator">-</span><span class="token operator">></span>left<span class="token operator">&amp;&amp;</span>t<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果没有←但是有→儿子</span>        ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"()"</span><span class="token punctuation">;</span>    <span class="token function">visit</span><span class="token punctuation">(</span>t<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span>        ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">")"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span>        ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"("</span><span class="token punctuation">;</span>    <span class="token function">visit</span><span class="token punctuation">(</span>t<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span>        ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">")"</span><span class="token punctuation">;</span><span class="token punctuation">}</span>string <span class="token function">tree2str</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>    string ans <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token function">visit</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="38-报数"><a href="#38-报数" class="headerlink" title="38. 报数"></a>38. 报数</h1><p>水题不解释</p><h1 id="696-计数二进制子串"><a href="#696-计数二进制子串" class="headerlink" title="696. 计数二进制子串"></a>696. 计数二进制子串</h1><ul><li><p>挨个取子串的解法过了85/90用例。败在一个超级长的的字符串上。也是，人家长度范围就是50000呢。咋整捏。</p></li><li><p>找到了规律。奇低的效率过了。</p></li><li><p>看个好答案吧：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">countBinarySubstrings</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>pre<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>cur<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>s<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token operator">++</span>cur<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            pre<span class="token operator">=</span>cur<span class="token punctuation">;</span>            cur<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pre<span class="token operator">>=</span>cur<span class="token punctuation">)</span>            <span class="token operator">++</span>res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="893-特殊等价字符串组"><a href="#893-特殊等价字符串组" class="headerlink" title="893. 特殊等价字符串组"></a>893. 特殊等价字符串组</h1><p>不会🙂</p><h1 id="551-学生出勤记录"><a href="#551-学生出勤记录" class="headerlink" title="551. 学生出勤记录"></a>551. 学生出勤记录</h1><p>水题</p><h1 id="67-二进制求和"><a href="#67-二进制求和" class="headerlink" title="67. 二进制求和"></a>67. 二进制求和</h1><ul><li>二进制转了int。发现人家给的二进制数太大了int存不下–》换long，存不下。–》long long，存不下—》unsigned long long，存下了，加和以后存不下。😂。—》此方法卒。</li><li>纯字符判断的方法过了~没啥意思。</li></ul><h1 id="345-反转字符串中的元音字母"><a href="#345-反转字符串中的元音字母" class="headerlink" title="345. 反转字符串中的元音字母"></a>345. 反转字符串中的元音字母</h1><p>水题 </p><ul><li><p>学到知识点 : npos</p><p>std::string::npos 常数值，等于size_t的最大值。通常用来做string<strong>不存在的位置</strong>的标记。</p></li></ul><h1 id="541-反转字符串-II"><a href="#541-反转字符串-II" class="headerlink" title="541. 反转字符串 II"></a>541. 反转字符串 II</h1><p><code>#557</code>知道了有reverse()后。分分钟。</p><ul><li>进阶：<code>reverse(s.begin(),s.begin()+i)</code> 可以用<strong>s.begin()+i</strong>这种方式定位</li></ul><h1 id="383-赎金信"><a href="#383-赎金信" class="headerlink" title="383.赎金信"></a>383.赎金信</h1><p>水。存数组OK</p><h1 id="819-最常见的单词"><a href="#819-最常见的单词" class="headerlink" title="819. 最常见的单词"></a>819. 最常见的单词</h1><ul><li><p>vector中没有find方法。要利用algorithm这个头文件。</p><pre class="line-numbers language-cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">::</span>iterator it <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>vt<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>vt<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>it <span class="token operator">!=</span> vt<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>字符串转小写：<code>transform(s.begin(),s.end(),s.begin(),::towlower);</code></p></li></ul><h1 id="28-实现strStr"><a href="#28-实现strStr" class="headerlink" title="28. 实现strStr()"></a>28. 实现strStr()</h1><ul><li>小写字母ascii码是大写的  <strong>+</strong>   32</li></ul><h1 id="125-验证回文串"><a href="#125-验证回文串" class="headerlink" title="125. 验证回文串"></a>125. 验证回文串</h1><p>水。</p><h1 id="459-重复的子字符串"><a href="#459-重复的子字符串" class="headerlink" title="459. 重复的子字符串"></a>459. 重复的子字符串</h1><ul><li>之前我取 tmp = s.substr(0,step) 取出来之后 每次让tmp加上自己来增加。没考虑到这样tmp这样是2的指数级增加。</li><li>有continue的情况却忘了i— 进入了死循环</li></ul><h1 id="387-字符串中的第一个唯一字符"><a href="#387-字符串中的第一个唯一字符" class="headerlink" title="387. 字符串中的第一个唯一字符"></a>387. 字符串中的第一个唯一字符</h1><ul><li><p>初始化数组全为0：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> nums<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h1 id="443-压缩字符串"><a href="#443-压缩字符串" class="headerlink" title="443. 压缩字符串"></a>443. 压缩字符串</h1><p><strong>不会！</strong></p><h1 id="58-最后一个单词的长度"><a href="#58-最后一个单词的长度" class="headerlink" title="58.最后一个单词的长度"></a>58.最后一个单词的长度</h1><p>4行就解决的问题不明白为啥通过这么低</p><pre class="line-numbers language-cpp"><code class="language-cpp">istringstream <span class="token function">is</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>string tmp<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>is<span class="token operator">>></span>tmp<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">return</span> tmp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="434-字符串中的单词数"><a href="#434-字符串中的单词数" class="headerlink" title="434.字符串中的单词数"></a>434.字符串中的单词数</h1><p>和上题一样水。</p><h1 id="68-验证回文字符串-Ⅱ"><a href="#68-验证回文字符串-Ⅱ" class="headerlink" title="68.验证回文字符串 Ⅱ"></a>68.验证回文字符串 Ⅱ</h1><p>排除一个字符只让一个标记移动的时候。要判断清除。(不好形容)</p><p>比如字符串cuucu。s[0]≠s[4]…</p><p>但是s[1]=s[4]..这时候如果让第一个标记右移，新字符串是uucu就错了。</p><p>因为其实s[0]=s[3]..应该让第二个标记左移。得到新串cuuc。</p><h1 id="686-重复叠加字符串匹配"><a href="#686-重复叠加字符串匹配" class="headerlink" title="686. 重复叠加字符串匹配"></a>686. 重复叠加字符串匹配</h1><p>折腾半天。过了。这题要二刷。样例太狗了哈哈。</p><h1 id="859-亲密字符串"><a href="#859-亲密字符串" class="headerlink" title="859. 亲密字符串"></a>859. 亲密字符串</h1><ul><li>突然有个感悟就是。不要老是在判断过程中就 <code>return true ,false</code> 的。导致常常有的情况都没有return 的。最好是这样  <code>ans = 1; break;</code>、然后最后<code>return ans;</code>    稳</li></ul><hr><p>字符串的Easy完结啦。下面按Easy题号刷满100再做计划！</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Problems in Using VSCode</title>
      <link href="/others/problemsinusingvscode/"/>
      <url>/others/problemsinusingvscode/</url>
      
        <content type="html"><![CDATA[<p>Sublime转战VS Code。因为Debug。</p><a id="more"></a><h1 id="先加入环境变量"><a href="#先加入环境变量" class="headerlink" title="先加入环境变量"></a>先加入环境变量</h1><p>从终端调起VS Code还是很常用的。</p><p>先打开环境变量配置文件。目录是<code>~/.bash_profile</code>。我用Sublime打开（玩不了vim）命令就是</p><pre class="line-numbers language-shell"><code class="language-shell">subl ~/.bash_profile //哈哈过河拆桥系列<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后加入这么一行</p><pre><code>export PATH=/Applications/Visual\ Studio\ Code.app/Contents/Resources/app/bin:$PATH</code></pre><p>这样就能用 <code>code</code>这个命令了。 比如 <code>code .</code>就是打开当前文件夹。</p><p>再补充一个知识点。</p><p>就是可以给命令加别名。在<code>.bash_profile</code>文件添加这样的语句：</p><pre><code>alias  web=&quot;code ~/work/web&quot;</code></pre><p>最后运行<code>source ~/.bash_profile</code>让配置文件生效。</p><p>就是说<code>web</code>已经成了一个命令。 alias就是别名嘛~</p><h1 id="配置C-C-环境"><a href="#配置C-C-环境" class="headerlink" title="配置C/C++环境"></a>配置C/C++环境</h1><ul><li>如果只是编译。<del>一个Code Runner的插件就够了。</del>但是想Debug。还是要动动手啊！</li></ul><p>然后我主要参考了这篇博客。还是很清楚的。</p><p><a href="https://blog.csdn.net/qq547276542/article/details/73823570?locationNum=5&amp;fps=1" target="_blank" rel="noopener">https://blog.csdn.net/qq547276542/article/details/73823570?locationNum=5&amp;fps=1</a></p><ul><li><p>现在遗留了一个问题就是。Debug的过程必须在系统的终端进行。怎么在VSCode里内置的终端呢。那样看起来就方便很多了。</p></li><li><p>放弃Code Runner ，换用了另一个叫 <code>C/C++ complie</code>的插件。</p><p>用⌘+R就可以允许。很方便。</p></li></ul><h1 id="快捷键积累"><a href="#快捷键积累" class="headerlink" title="快捷键积累"></a>快捷键积累</h1><p>用到啥记点啥挺不错 ⌘⇧⌃⌥</p><ul><li><p>后退： <strong>⌃ -</strong>  </p><p>前进：<strong>⌃⇧ -</strong> </p></li><li><p>扩选：<strong>⌘⇧⌃→</strong></p><p>缩选：<strong>⌘⇧⌃←</strong></p></li><li><p>选择下一个匹配项：<strong>⌘D</strong></p><p>选择所有匹配项：<strong>⌘⇧L</strong></p></li><li><p>向上移动一行：<strong>⌥↑</strong></p><p>向下移动一行：<strong>⌥↓</strong></p></li><li><p>向上复制一行：<strong>⇧⌥↑</strong></p><p>向下复制一行：<strong>⇧⌥↓</strong></p></li><li><p>在上面添加光标：<strong>⌘⌥↑</strong></p><p>在下面添加光标：<strong>⌘⌥↓</strong></p></li><li><p>到行首：<strong>ctrl + a</strong></p><p>到行尾：<strong>ctrl + e</strong></p><p>前进后退：<strong>ctrl + f/b</strong> (相当于左右方向键)</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tips </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>LeetCode 链表Esay题</title>
      <link href="/algorithm/listnode-easy/"/>
      <url>/algorithm/listnode-easy/</url>
      
        <content type="html"><![CDATA[<p>知识点：<code>ListNode单链表</code>、 快慢指针</p><a id="more"></a><h1 id="基础部分"><a href="#基础部分" class="headerlink" title="基础部分"></a>基础部分</h1><p>这段代码便于在IDE调试。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> ListNode<span class="token punctuation">{</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span>    <span class="token keyword">struct</span> ListNode <span class="token operator">*</span>next<span class="token punctuation">;</span>    <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">val</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span>ListNode<span class="token punctuation">;</span>ListNode <span class="token operator">*</span><span class="token function">cr3237ateList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ListNode <span class="token operator">*</span>prehead <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> prehead<span class="token punctuation">;</span><span class="token punctuation">}</span>ListNode <span class="token operator">*</span><span class="token function">initList</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span>preheadInit<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    ListNode <span class="token operator">*</span>cur<span class="token punctuation">,</span><span class="token operator">*</span>head<span class="token punctuation">;</span>    cur <span class="token operator">=</span> preheadInit<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ListNode <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cur<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>        cur <span class="token operator">=</span> cur<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    head <span class="token operator">=</span> preheadInit<span class="token punctuation">;</span>    <span class="token keyword">return</span> head<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">showList</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span>head<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> head<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">&lt;&lt;</span> <span class="token string">"_"</span><span class="token punctuation">;</span>        head <span class="token operator">=</span> head<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ListNode <span class="token operator">*</span>prehead <span class="token operator">=</span> <span class="token function">createList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ListNode <span class="token operator">*</span>head <span class="token operator">=</span> <span class="token function">initList</span><span class="token punctuation">(</span>prehead<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">showList</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="21-合并有序链表"><a href="#21-合并有序链表" class="headerlink" title="21 合并有序链表"></a>21 合并有序链表</h1><h2 id="解"><a href="#解" class="headerlink" title="解"></a>解</h2><p>不贴我的了。写的太烂了。新建了一个链表一个数一个数插进去的。</p><p>贴一个同效率的。简洁好多。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * struct ListNode { *     int val; *     ListNode *next; *     ListNode(int x) : val(x), next(NULL) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode<span class="token operator">*</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> l1<span class="token punctuation">,</span> ListNode<span class="token operator">*</span> l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode<span class="token operator">*</span> l0<span class="token punctuation">;</span>        ListNode<span class="token operator">*</span> head<span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        l0<span class="token operator">=</span>head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l1<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token operator">&amp;&amp;</span>l2<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token operator">-</span><span class="token operator">></span>val<span class="token operator">&lt;=</span>l2<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span>             <span class="token punctuation">{</span>                l0<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span>l1<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                l1<span class="token operator">=</span>l1<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>             <span class="token punctuation">{</span>                l0<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span>l2<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                l2<span class="token operator">=</span>l2<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            l0<span class="token operator">=</span>l0<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        l0<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> l1 <span class="token operator">?</span> l1 <span class="token operator">:</span> l2<span class="token punctuation">;</span>        <span class="token keyword">return</span> head<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>~ 知识点</p><ul><li><p>一个是建ListNode。声明节点的细节。<code>new struct</code></p></li><li><p>一个就是重要的技巧。别声明一个新指针为NULL。除非你开车很稳。</p><ul><li><p>关于<code>NULL</code>和<code>nullptr</code>:</p><p><code>NULL</code>其实是<strong>int型的0</strong>，为了<strong>真正的空指针</strong>，c++11推出<code>nullptr</code></p></li></ul></li><li><p>可以先声明一个随意值的节点(比如-9999)，然后在这个节点后面处理就好了。最后return时返回这个节点的next就好了。</p></li></ul><h2 id="Problems"><a href="#Problems" class="headerlink" title="Problems"></a>Problems</h2><ul><li><p>输入是<code>[]和[0]</code>的时候不行。没考虑第一个链表就是空的情况。所以开头定义tmp就直接指向L1；</p></li><li><p><strong>重要！！！</strong></p><p>新声明一个<strong>节点</strong><code>new struct</code>。和新声明一个<strong>指针</strong><code>*p</code>不一样。</p><p>这个问题要想清楚！！！</p></li><li><p>记得要先把头存起啦啊。不然你移来移去拿什么返回链表头。</p></li><li>循环遍历所有节点最好用<code>while(list-&gt;next)</code>。这样指针刚好停在最后一个节点。</li></ul><h2 id="递归的解法"><a href="#递归的解法" class="headerlink" title="递归的解法"></a>递归的解法</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode<span class="token operator">*</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> l1<span class="token punctuation">,</span> ListNode<span class="token operator">*</span> l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token operator">==</span><span class="token constant">NULL</span> <span class="token operator">||</span> l2<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>l1<span class="token operator">==</span><span class="token constant">NULL</span> <span class="token operator">?</span> l2<span class="token operator">:</span> l1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token operator">-</span><span class="token operator">></span>val<span class="token operator">&lt;</span>l2<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span>         <span class="token punctuation">{</span>            l1<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">=</span><span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>l1<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">,</span> l2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> l1<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            l2<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">=</span><span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span>l2<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> l2<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//end function</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>合并</strong>两个链表。就是判断完<strong>头</strong>元素后。<strong>合并</strong> <u>剩下的部分</u> 连接到 小的头里。</p><p>结束条件：</p><p>如果一个为Null（总是合并剩下的部分一定会遇到null）则返回另一个。</p><hr><p>基本功啊。</p><p>准备多做几个链表题来巩固一下了。</p><h1 id="237-删除某个节点"><a href="#237-删除某个节点" class="headerlink" title="237 删除某个节点"></a>237 删除某个节点</h1><p>这个比较简单。操作指针就好了。</p><p>注意此题简单的一个重要条件就是：</p><p><strong>给点节点为非末尾节点</strong></p><p>这样就不会有删除最后一个节点的情况。</p><h1 id="876-链表的中间节点"><a href="#876-链表的中间节点" class="headerlink" title="876 链表的中间节点"></a>876 链表的中间节点</h1><p>简单。计数器判断。</p><h1 id="206-反转链表"><a href="#206-反转链表" class="headerlink" title="206 反转链表"></a>206 反转链表</h1><p>我用递归做的。</p><p>思路是，把第一个节点取出来。然后从第二个开始反转，反转的结果再接上第一个节点。</p><h2 id="Problems-1"><a href="#Problems-1" class="headerlink" title="Problems"></a>Problems</h2><p>开始我取第一个节点是直接一个指针指向head。这样虽然取到了。但是这个节点的next不是NULL啊。而是2号到最后。</p><p>后来用的方法是new一个新的空间。（相当于是取出来了第一个节点的<strong>值</strong>吧）</p><p>然后再把后面的反转之后，接上这个new的节点。</p><h2 id="解-1"><a href="#解-1" class="headerlink" title="解"></a>解</h2><pre><code>ListNode* reverseList(ListNode* head) {    if(head == NULL)//输入竟然有空的情况。不得不加这么一个判断。        retrun head;    if(head-&gt;next == NULL){        //这里也要声明新的节点。不然又是原来的头地址，串起来了。        ListNode *p = new ListNode(head-&gt;val);        return p;    }    else    {        ListNode* p = new ListNode(head-&gt;val);        ListNode* tmp = reverseList(head-&gt;next);        //要把 头部 预存一下。不然下面的while就让tmp走到尾部了。        ListNode* ans = tmp;        while(tmp-&gt;next){            tmp = tmp-&gt;next;        }        tmp-&gt;next = p;        return ans;    }       }</code></pre><p>要点就是我备注的两个地方了。</p><p>但是我这个写法。光顾着递归了。效率是排行倒数。人家第一的递归写法：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">==</span><span class="token constant">NULL</span><span class="token operator">||</span>head<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span>ListNode <span class="token operator">*</span>res<span class="token operator">=</span><span class="token function">reverseList</span><span class="token punctuation">(</span>head<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>head<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">=</span>head<span class="token punctuation">;</span>head<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">return</span> res<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这就是另一个境界的思想问题了。</p><p>他的解法也是把第一个取出来。把后面的反转了接上第一个。</p><p><strong>但是</strong>，人家是在地址上操作的。我是新开辟空间的。</p><p>直接把两个一组。<code>head-&gt;next-&gt;next=head;</code>这句是精华。</p><p>然<strong>2号</strong>的下一个变成<strong>1号</strong>，再让<strong>1号</strong>的下一个变成null。成功调换1-2的位置为2-1-null、</p><p>而<strong>2号</strong>其实在上一次的递归中，已经被它的上一个3号所指向。即3-&gt;next就是2号、</p><blockquote><p>启发。递归的时候可以倒着思考问题。</p><p>思路是把第一个拿出来。再把剩下的做reverse()处理后返回。</p><p>返回的时候返回的就是<strong>已经反转完成的链表的头</strong>。别想别的。</p><p>思考最后递归的倒数第二层是什么情况（比如这题就是还剩俩节点）。</p></blockquote><h1 id="83-删除重复元素"><a href="#83-删除重复元素" class="headerlink" title="83 删除重复元素"></a>83 删除重复元素</h1><ul><li>删除节点光把当前节点赋NULL是不行滴。</li></ul><h1 id="203-删除链表中的节点"><a href="#203-删除链表中的节点" class="headerlink" title="203 删除链表中的节点"></a>203 删除链表中的节点</h1><p>和237题不同的是这个题是给了值。237题给的是节点。</p><p>感悟和上一个#83题查不多。就是想删除某个节点。只把 cur指针赋NULL是不行的。因为<strong>上一个节点的next 还指着 之前 cur的地址</strong>啊。cur是为空了，上一个节点的next不是空啊。</p><p>因为觉得删最后一个节点的情况不好写。转递归法一气呵成哈哈。</p><pre class="line-numbers language-cpp"><code class="language-cpp">ListNode<span class="token operator">*</span> <span class="token function">removeElements</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">==</span> val<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">==</span> val<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token function">removeElements</span><span class="token punctuation">(</span>head<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        head<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> <span class="token function">removeElements</span><span class="token punctuation">(</span>head<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然效率一般。超越了96%。我再参考下别的。</p><ul><li><p>处理最后一个节点的方法。可以再声明一个指针p。一个指针往下移。p不移动。这样就可以定位倒数第二的节点。</p></li><li><p>下面这个解法很清晰了。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span>ListNode <span class="token function">phead</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ListNode <span class="token operator">*</span>ptemp <span class="token operator">=</span> head<span class="token punctuation">;</span>ListNode <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>phead<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//phead是一个结构体。所以要指向它的地址。</span><span class="token comment" spellcheck="true">//也可以在之前就声明ListNode* phead = new ListNode(9999);就不用取地址了。</span>phead<span class="token punctuation">.</span>next <span class="token operator">=</span> ptemp<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ptemp<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">==</span> val<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        p<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> ptemp<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        ptemp <span class="token operator">=</span> p<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        p <span class="token operator">=</span> ptemp<span class="token punctuation">;</span>        ptemp <span class="token operator">=</span> ptemp<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ptemp<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> phead<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="234-回文链表"><a href="#234-回文链表" class="headerlink" title="234 回文链表"></a>234 回文链表</h1><ul><li><p>注意。长度为1的链表也是回文的。</p></li><li><p>我的方法比较笨。先跑一遍记录有多少个数。再遍历前半部分，把数存到栈里。再遍历后半部分。挨个出栈。</p></li><li>下面看一个知识点，</li></ul><h2 id="快慢指针"><a href="#快慢指针" class="headerlink" title="快慢指针"></a>快慢指针</h2><blockquote><p>知识点：快指针走两步。慢指针走一步。快指针到链尾。慢指针到中间。</p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ListNode <span class="token operator">*</span>pre <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token operator">*</span>cur <span class="token operator">=</span> head<span class="token punctuation">,</span> <span class="token operator">*</span>quick <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//下面这一段很巧妙。不仅找到了中间节点。还把链表的前半部分都倒置了存在pre里。</span>    <span class="token comment" spellcheck="true">//倒置的方法：</span>    <span class="token comment" spellcheck="true">//1.预存当前节点cur到tmp，</span>    <span class="token comment" spellcheck="true">//2.cur后移，保证下一步进行。但我们有tmp预存了cur。</span>    <span class="token comment" spellcheck="true">//3.tmp的next置为pre(初始的pre刚好是NULL)。</span>    <span class="token comment" spellcheck="true">//4.pre=tmp。这时候pre已经是倒置链表的头。</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>quick <span class="token operator">&amp;&amp;</span> quick<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        quick <span class="token operator">=</span> quick<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token keyword">auto</span> tmp <span class="token operator">=</span> cur<span class="token punctuation">;</span>        cur <span class="token operator">=</span> cur<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        tmp<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>        pre <span class="token operator">=</span> tmp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>quick <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>        cur <span class="token operator">=</span> cur<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-</span><span class="token operator">></span>val <span class="token operator">!=</span> pre<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            cur <span class="token operator">=</span> cur<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            pre <span class="token operator">=</span> pre<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>最后说一下排行第一的方法。人家没存到栈里。存到了向量里。然后直接用坐标定位来判断首尾是否一样。我真的是太定向思维了。看到是从中间往两侧判断就知道用栈。辣鸡~</li></ul><h1 id="141环形链表"><a href="#141环形链表" class="headerlink" title="141环形链表"></a>141环形链表</h1><blockquote><p> 知识点：如果有环，快慢指针一定会相遇。可用递归法证明。</p></blockquote><h1 id="160-相交链表"><a href="#160-相交链表" class="headerlink" title="160 相交链表"></a>160 相交链表</h1><p>我用了一个set保存A的每个地址。</p><p>然后对着B进行set.find()。过。关闭输入输出同步之后效率从29升到87~哈哈。</p><h1 id="707设计链表"><a href="#707设计链表" class="headerlink" title="707设计链表"></a>707设计链表</h1><p>不想做😛😛😛</p><p>【链表+简单】刷完~</p><p>下一站，【字符串】</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>WebRTC06入门教程03</title>
      <link href="/webrtc/webrtc06-ru-men-jiao-cheng-03/"/>
      <url>/webrtc/webrtc06-ru-men-jiao-cheng-03/</url>
      
        <content type="html"><![CDATA[<p>信令服务器分析</p><a id="more"></a><h1 id="Signaling"><a href="#Signaling" class="headerlink" title="Signaling"></a>Signaling</h1><h2 id="信令和协商Signaling-and-Negotiation"><a href="#信令和协商Signaling-and-Negotiation" class="headerlink" title="信令和协商Signaling and Negotiation"></a>信令和协商Signaling and Negotiation</h2><p>用户建立连接的过程以信令和协商为主。有下面几个步骤：</p><ul><li>为peer连接创建一个潜在候选项的list</li><li>用户A或应用选择一个要连接的用户B</li><li>信令层通知用户B有人想和你连。他可以同意/拒绝</li><li>用户A被通知offer同意</li><li>用户A初始化与B的RTCPeerConnection</li><li>俩用户通过信令服务器交换软硬件信息</li><li>俩用户交换本地信息</li><li>连接成功/失败</li></ul><h2 id="建立服务器"><a href="#建立服务器" class="headerlink" title="建立服务器"></a>建立服务器</h2><p>我们现在来建立一个自己的信令机制。允许一个用户呼叫另一个。一旦一个用户被呼叫，服务器在他们之间传递offer,answer,ICE候选。然后建立连接。</p><p><img src="https://www.tutorialspoint.com/webrtc/images/building_the_server.jpg" alt="信令服务器"></p><p>上个图是用户使用信令服务器时的信息流。</p><p>首先，每个用户在服务器注册。传一个简单的字符串username即可。注册后的用户可以相互呼叫。用户1发一个带有他想呼叫的用户id的offer。其他人应当answer。最后，在用户中间发送ICE候选直到他们建立连接。</p><p>去创建一个WebRTC连接服务器必须有能力在没有使用WebRTCpeer连接的情况下发送messages。因此我们使用HTML5 WebSockets—一个两端(一个web服务器一个web浏览器)的双向socket连接。现在我们开始使用WebSocket库。创建<code>server.js</code>文件并加入以下代码：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//依赖ws库 声明一个WebSocketServer服务器</span><span class="token keyword">var</span> WebSocketServer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'ws'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Server<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//创建端口9090的WebSocket服务器</span><span class="token keyword">var</span> wss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocketServer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>port<span class="token punctuation">:</span> <span class="token number">9090</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//当有一个用户接入服务器</span>wss<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'connection'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"user connected"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//服务器收到已接入用户的消息</span>   connection<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">{</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Got message from a user:"</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    connection<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"Hello from server"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先要求WebSocket库。再创建9090端口的socket服务器。下一步，监听connection事件。监听用户发来的任何消息。最后我们发送一个回复给已连接的用户说Hello from Server.</p><p>终端运行<code>node server</code>服务器就跑起来了。</p><p>为了测试服务器。我们用<code>wscat</code>这个程序。他可以直接连入服务器并测试命令。先在终端让服务器跑起来之后，再开一个终端，运行<code>wscat -c ws://localhost:9090</code>命令。</p><h2 id="用户注册"><a href="#用户注册" class="headerlink" title="用户注册"></a>用户注册</h2><p>在我们的信令服务器中，我们将使用基于字符串的username来让我们知道信息的去向。下面更改一下connection的句柄。</p><pre class="line-numbers language-javascript"><code class="language-javascript">connection<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> data<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//只接收JSON</span>   <span class="token keyword">try</span> <span class="token punctuation">{</span>       data <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Invalid JSON"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样我们就做到了只接收JSON。下一步我们需要存储所有连接到用户。使用一个简单的js对象。</p><p>在我们的文件头部增加一句<code>var users={};</code>。</p><p><strong>这个数组里存的都是connection,而下标就是name。</strong></p><p>现在我们还要为每一个从客户端发来的message增加一个<em>type</em>域。例如是登录就发<em>login</em> type的message。现在来定义。</p><pre class="line-numbers language-javascript"><code class="language-javascript">connection<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">var</span> data<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//只接收JSON</span>   <span class="token keyword">try</span> <span class="token punctuation">{</span>       data <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//是JSON就给它分组</span>   <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Invalid JSON"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//分开各种type </span>   <span class="token keyword">switch</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//一个用户尝试登录</span>      <span class="token keyword">case</span> <span class="token string">"login"</span><span class="token punctuation">:</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"User logged:"</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//存在这个name则拒绝登录</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>users<span class="token punctuation">[</span>data<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token function">sendTo</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> <span class="token punctuation">{</span>                type<span class="token punctuation">:</span> <span class="token string">"login"</span><span class="token punctuation">,</span>                success<span class="token punctuation">:</span> <span class="token boolean">false</span>             <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">//保存这个用户连接</span>            users<span class="token punctuation">[</span>data<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> connection<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//connection进入users[]</span>            connection<span class="token punctuation">.</span>name <span class="token operator">=</span> data<span class="token punctuation">.</span>name<span class="token punctuation">;</span>             <span class="token function">sendTo</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> <span class="token punctuation">{</span>                type<span class="token punctuation">:</span> <span class="token string">"login"</span><span class="token punctuation">,</span>                success<span class="token punctuation">:</span> <span class="token boolean">true</span>             <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token punctuation">:</span>          <span class="token function">sendTo</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> <span class="token punctuation">{</span>             type<span class="token punctuation">:</span> <span class="token string">"error"</span><span class="token punctuation">,</span>             message<span class="token punctuation">:</span> <span class="token string">"Command no found: "</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>type          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面这一段代码是发送消息到连接的辅助函数。这个函数可以确保我们发送的消息都是JSON格式。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sendTo</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>    connection<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>你可以在wscat发送一段json来测试一下了。</p><h2 id="呼叫"><a href="#呼叫" class="headerlink" title="呼叫"></a>呼叫</h2><p>登录后的用户想要呼叫就要做一个offer发给别人。现在我们来添加<em>offer</em>句柄。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">case</span> <span class="token string">"offer"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">//for ex. A</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Sending offer to: "</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//如果B存在则发送A的offer细节</span>   <span class="token keyword">var</span> conn <span class="token operator">=</span> users<span class="token punctuation">[</span>data<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>conn <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//设置A的连接对象是B</span>      connection<span class="token punctuation">.</span>otherName <span class="token operator">=</span> data<span class="token punctuation">.</span>name<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//A的offer发送给B</span>      <span class="token function">sendTo</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> <span class="token punctuation">{</span>          type<span class="token punctuation">:</span> <span class="token string">"offer"</span><span class="token punctuation">,</span>          offer<span class="token punctuation">:</span> data<span class="token punctuation">.</span>offer<span class="token punctuation">,</span>          name<span class="token punctuation">:</span> connection<span class="token punctuation">.</span>name       <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token keyword">break</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="接听"><a href="#接听" class="headerlink" title="接听"></a>接听</h2><p>接听回话和<em>offer</em>句柄类似。在<em>offer</em>句柄后面加入<em>answer</em>，answer的内容无论是什么都会被发送。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">case</span> <span class="token string">"answer"</span><span class="token punctuation">:</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Sending answer to: "</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//for ex. UserB answers UserA </span>   <span class="token keyword">var</span> conn <span class="token operator">=</span> users<span class="token punctuation">[</span>data<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>conn <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//同理回了人家的answer你的连接对象也就是他了</span>      connection<span class="token punctuation">.</span>otherName <span class="token operator">=</span> data<span class="token punctuation">.</span>name<span class="token punctuation">;</span>       <span class="token function">sendTo</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> <span class="token punctuation">{</span>          type<span class="token punctuation">:</span> <span class="token string">"answer"</span><span class="token punctuation">,</span>          answer<span class="token punctuation">:</span> data<span class="token punctuation">.</span>answer       <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token keyword">break</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在例子中，offer和answer都是简单的字符串。但在真正的应用中他们会被SDP数据填充。</p><h2 id="ICE候选"><a href="#ICE候选" class="headerlink" title="ICE候选"></a>ICE候选</h2><p>最后一部分是处理用户之间的ICE候选。我们在用户中间用相同的机制通过message。主要的不同就是候选消息可能会多次、无序地发送给每个用户。添加<em>candidate</em>句柄：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">case</span> <span class="token string">"candidate"</span><span class="token punctuation">:</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Sending candidate to:"</span><span class="token punctuation">,</span>data<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> conn <span class="token operator">=</span> users<span class="token punctuation">[</span>data<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>conn <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">sendTo</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> <span class="token punctuation">{</span>          type<span class="token punctuation">:</span> <span class="token string">"candidate"</span><span class="token punctuation">,</span>          candidate<span class="token punctuation">:</span> data<span class="token punctuation">.</span>candidate       <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token keyword">break</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="断开对话"><a href="#断开对话" class="headerlink" title="断开对话"></a>断开对话</h2><p>为了让用户之间断开对话。我们要一个挂起函数。她同时会告诉服务器删掉所有的用户引用。添加<em>leave</em>句柄：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">case</span> <span class="token string">"leave"</span><span class="token punctuation">:</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Disconnecting from"</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> conn <span class="token operator">=</span> users<span class="token punctuation">[</span>data<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>    conn<span class="token punctuation">.</span>otherName <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//notify the other user so he can disconnect his peer connection </span>   <span class="token keyword">if</span><span class="token punctuation">(</span>conn <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token function">sendTo</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> <span class="token punctuation">{</span>          type<span class="token punctuation">:</span> <span class="token string">"leave"</span>       <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时吧leave事件发送给另一个用户，让他也你能相应的断开对话。</p><p>当用户从信令服务器中丢弃掉连接的时候我们还需要有<em>close</em>句柄。</p><pre class="line-numbers language-javascript"><code class="language-javascript">connection<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"close"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>connection<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">delete</span> users<span class="token punctuation">[</span>connection<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>connection<span class="token punctuation">.</span>otherName<span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Disconnecting from "</span><span class="token punctuation">,</span> connection<span class="token punctuation">.</span>otherName<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">var</span> conn <span class="token operator">=</span> users<span class="token punctuation">[</span>connection<span class="token punctuation">.</span>otherName<span class="token punctuation">]</span><span class="token punctuation">;</span>          conn<span class="token punctuation">.</span>otherName <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>conn <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token function">sendTo</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> <span class="token punctuation">{</span>                type<span class="token punctuation">:</span> <span class="token string">"leave"</span>             <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>信令服务器完成。</p><h2 id="完整的代码"><a href="#完整的代码" class="headerlink" title="完整的代码"></a>完整的代码</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//依赖ws库</span><span class="token keyword">var</span> WebSocketServer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'ws'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Server<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开9090端口。服务器名字叫wss</span><span class="token keyword">var</span> wss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocketServer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>port<span class="token punctuation">:</span> <span class="token number">9090</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//用户群组。里面存的是connection。下标是name。</span><span class="token keyword">var</span> users <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//有人要连接时 </span>wss<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'connection'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span> <span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"User connected"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//服务器收到了message</span>   connection<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">var</span> data<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//只接收JSON </span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>         data <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//切分JSON存入data</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Invalid JSON"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token comment" spellcheck="true">//用户消息的type </span>      <span class="token keyword">switch</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//尝试登录</span>         <span class="token keyword">case</span> <span class="token string">"login"</span><span class="token punctuation">:</span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"User logged"</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//重名了 </span>            <span class="token keyword">if</span><span class="token punctuation">(</span>users<span class="token punctuation">[</span>data<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">sendTo</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> <span class="token punctuation">{</span>                   type<span class="token punctuation">:</span> <span class="token string">"login"</span><span class="token punctuation">,</span>                   success<span class="token punctuation">:</span> <span class="token boolean">false</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//可以登则存入数组 </span>               users<span class="token punctuation">[</span>data<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> connection<span class="token punctuation">;</span>                connection<span class="token punctuation">.</span>name <span class="token operator">=</span> data<span class="token punctuation">.</span>name<span class="token punctuation">;</span>                <span class="token function">sendTo</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> <span class="token punctuation">{</span>                   type<span class="token punctuation">:</span> <span class="token string">"login"</span><span class="token punctuation">,</span>                   success<span class="token punctuation">:</span> <span class="token boolean">true</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>             <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token keyword">case</span> <span class="token string">"offer"</span><span class="token punctuation">:</span>             <span class="token comment" spellcheck="true">//for ex. A想打给B </span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Sending offer to: "</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//B存在则发给B offer </span>            <span class="token keyword">var</span> conn <span class="token operator">=</span> users<span class="token punctuation">[</span>data<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>conn <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token operator">/</span>A 的连接对象设为 B               connection<span class="token punctuation">.</span>otherName <span class="token operator">=</span> data<span class="token punctuation">.</span>name<span class="token punctuation">;</span>                <span class="token function">sendTo</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> <span class="token punctuation">{</span>                   type<span class="token punctuation">:</span> <span class="token string">"offer"</span><span class="token punctuation">,</span>                   offer<span class="token punctuation">:</span> data<span class="token punctuation">.</span>offer<span class="token punctuation">,</span>                   name<span class="token punctuation">:</span> connection<span class="token punctuation">.</span>name                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>             <span class="token keyword">break</span><span class="token punctuation">;</span>           <span class="token keyword">case</span> <span class="token string">"answer"</span><span class="token punctuation">:</span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Sending answer to: "</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//for ex. B要接听A</span>            <span class="token keyword">var</span> conn <span class="token operator">=</span> users<span class="token punctuation">[</span>data<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>             <span class="token keyword">if</span><span class="token punctuation">(</span>conn <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                connection<span class="token punctuation">.</span>otherName <span class="token operator">=</span> data<span class="token punctuation">.</span>name<span class="token punctuation">;</span>                <span class="token function">sendTo</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> <span class="token punctuation">{</span>                   type<span class="token punctuation">:</span> <span class="token string">"answer"</span><span class="token punctuation">,</span>                   answer<span class="token punctuation">:</span> data<span class="token punctuation">.</span>answer                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>             <span class="token keyword">break</span><span class="token punctuation">;</span>           <span class="token keyword">case</span> <span class="token string">"candidate"</span><span class="token punctuation">:</span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Sending candidate to:"</span><span class="token punctuation">,</span>data<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">var</span> conn <span class="token operator">=</span> users<span class="token punctuation">[</span>data<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>              <span class="token keyword">if</span><span class="token punctuation">(</span>conn <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">sendTo</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> <span class="token punctuation">{</span>                   type<span class="token punctuation">:</span> <span class="token string">"candidate"</span><span class="token punctuation">,</span>                   candidate<span class="token punctuation">:</span> data<span class="token punctuation">.</span>candidate                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>             <span class="token keyword">break</span><span class="token punctuation">;</span>           <span class="token keyword">case</span> <span class="token string">"leave"</span><span class="token punctuation">:</span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Disconnecting from"</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">var</span> conn <span class="token operator">=</span> users<span class="token punctuation">[</span>data<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>             conn<span class="token punctuation">.</span>otherName <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//notify the other user so he can disconnect his peer connection </span>            <span class="token keyword">if</span><span class="token punctuation">(</span>conn <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">sendTo</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> <span class="token punctuation">{</span>                   type<span class="token punctuation">:</span> <span class="token string">"leave"</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>              <span class="token keyword">break</span><span class="token punctuation">;</span>           <span class="token keyword">default</span><span class="token punctuation">:</span>             <span class="token function">sendTo</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> <span class="token punctuation">{</span>                type<span class="token punctuation">:</span> <span class="token string">"error"</span><span class="token punctuation">,</span>                message<span class="token punctuation">:</span> <span class="token string">"Command not found: "</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>type             <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">break</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//用户退出，比如关闭了浏览器窗口 </span>   <span class="token comment" spellcheck="true">//如果我们仍在offer\answer\candidate状态。则起作用。 </span>   connection<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"close"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>connection<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">delete</span> users<span class="token punctuation">[</span>connection<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>connection<span class="token punctuation">.</span>otherName<span class="token punctuation">)</span> <span class="token punctuation">{</span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Disconnecting from "</span><span class="token punctuation">,</span> connection<span class="token punctuation">.</span>otherName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//A的连接对B象存到Conn</span>            <span class="token keyword">var</span> conn <span class="token operator">=</span> users<span class="token punctuation">[</span>connection<span class="token punctuation">.</span>otherName<span class="token punctuation">]</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//设置A为无连接状态</span>            conn<span class="token punctuation">.</span>otherName <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//让B也leave会话</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>conn <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">sendTo</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> <span class="token punctuation">{</span>                   type<span class="token punctuation">:</span> <span class="token string">"leave"</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     connection<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"Hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">sendTo</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>    connection<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这篇文章一定要和入门教程02一起看~</p>]]></content>
      
      
      <categories>
          
          <category> WebRTC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Demo </tag>
            
            <tag> tutorial </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>WebRTC05入门教程02</title>
      <link href="/webrtc/webrtc05-ru-men-jiao-cheng-02/"/>
      <url>/webrtc/webrtc05-ru-men-jiao-cheng-02/</url>
      
        <content type="html"><![CDATA[<p>p2p的核心<strong>RTCPeerConnection APIs</strong>的介绍</p><a id="more"></a><h1 id="RTCPeerConnection-APIs"><a href="#RTCPeerConnection-APIs" class="headerlink" title="RTCPeerConnection APIs"></a>RTCPeerConnection APIs</h1><p>简单样例：<code>var pc = RTCPeerConnection(config);</code></p><p>config包含 key, iceServers。这是一个有着STUN和TURN服务器信息的URL对象数组，用于查找ICE候选。你可以在<a href="https://code.google.com找到一些可用的公共STUN服务器" target="_blank" rel="noopener">https://code.google.com找到一些可用的公共STUN服务器</a>.</p><p>这是user’s flow用户流的一个例子：</p><ul><li>注册<em>onincecandidate</em>句柄。收到时发送ICE candidates给其他peer。</li><li>注册<em>onaddstream</em>句柄。一旦收到远端peer接收，则控制视频流的展示</li><li>注册<em>message</em>句柄。你的信令服务器应该也有一个句柄用于收消息。如果message包含<em>RTCSeesionDescription</em>对象，则使用<em>setRemoteDescription()</em>方法将其加入到<u><em>RTCPeerConnection</em></u><u>对象</u>。如果message包含<em>RTCIceCandidate</em>对象，使用<em>addIceCandidate()</em>方法将其加入到<u><em>RTCPeerConnection</em></u><u>对象</u>。</li><li>用<em>getUserMedia()</em>设置本地媒体流，用 <em>addStream()</em> 方法将其加入到<u><em>RTCPeerConnection</em></u><u>对象</u>。</li><li>开始 <strong>offer/answer</strong> 协商。这是唯一一个[主叫流caller flow]和[被叫callee]有所不同的一步。caller用<strong><u><em>createOffer()</em></u></strong>方法开始协商，注册一个接收 <em><u>RTCSessionDescription</u></em>对象的callback。这个callback应使用<em>setLocalDescriptionI()</em>方法添加这个<em><u>RTCSessionDescription</u></em>到你的<em>RTCPeerConnection</em>。  最后，caller应该用信令服务器发送这个<em><u>RTCPeerConnection</u></em>到远端peer。 callee注册相同的callback，但是用的是<strong><u><em>createAnswer()</em></u></strong>方法。仅在收到caller的<strong>offer</strong>后callee flow初始化完成。</li></ul><h2 id="RTCPeerConnection-API"><a href="#RTCPeerConnection-API" class="headerlink" title="RTCPeerConnection API"></a>RTCPeerConnection API</h2><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li><p><strong>RTCPeerConnection.iceConnectionState (read only)</strong> − 返回一个RTCIceConnectionState</p><p>enum描述连接状态.  值改变时触发一个iceconnectionstatechange 事件。</p><p>可能的值：</p><ul><li><strong>new</strong> − ICE代理在等待远程候选或收集地址。</li><li><strong>checking</strong> − ICE 代理 有远程候选但还没有发现连接。</li><li><strong>connected</strong> − ICE 代理已经发现了可用连接，但仍然在checking更远的候选以便更好地连接。</li><li><strong>completed</strong> − ICE 代理已经发现了可用连接并停止检测远程候选。</li><li><strong>failed</strong> − ICE 代理已经检查完所有的远程候选们但找不到一个可匹配的。</li><li><strong>disconnected</strong> − 至少有一个部分不再工作。</li><li><strong>closed</strong> − ICE 代理关闭。</li></ul></li><li><p><strong>RTCPeerConnection.iceGatheringState (read only)</strong> − 返回一个 RTCIceGatheringState enum描述连接的ICE收集状态−</p><ul><li><strong>new</strong> − 对象刚被创建</li><li><strong>gathering</strong> − ICE 代理在收集候选过程中</li><li><strong>complete</strong> ICE 代理 已经完成收集</li></ul></li><li><p><strong>RTCPeerConnection.localDescription (read only)</strong> − 返回一个RTCSessionDescription 描述本地节点。如果还没有被设置则为null</p></li><li><p><strong>RTCPeerConnection.peerIdentity (read only)</strong> − 返回一个 RTCIdentityAssertion. 包含一个idp(domain name) 和一个描述远程peer的name</p></li><li><p><strong>RTCPeerConnection.remoteDescription (read only)</strong> − 返回一个 RTCSessionDescription 描述远程节点. 没设置为null</p></li><li><p><strong>RTCPeerConnection.signalingState (read only)</strong> − 返回一个 RTCSignalingState enum描述本地连接的信令状态。这个状态描述SDP offer。值改变时触发一个signalingstatechange 事件。可能的值： </p><ul><li><strong>stable</strong> − 初始状态。不存在 SDP offer/answer 交换。</li><li><strong>have-local-offer</strong> − 连接的本地端已经在当地申请了一个SDP offer.</li><li><strong>have-remote-offer</strong> − 连接的远程端已经在当地申请了一个SDP offer.</li><li><strong>have-local-pranswer</strong> − 一个远程SDP offer已申请，本地已申请一个SDP pranswer.</li><li><strong>have-remote-pranswer</strong> − 一个本地SDP已申请，远程已申请一个SDP pranswer.</li><li><strong>closed</strong> − 连接关闭。</li></ul></li></ul><h3 id="事件句柄"><a href="#事件句柄" class="headerlink" title="事件句柄"></a>事件句柄</h3><p>下面是常用的几个</p><table><thead><tr><th style="text-align:right">Event Handlers</th><th style="text-align:left">Description</th></tr></thead><tbody><tr><td style="text-align:right"><strong>RTCPeerConnection.onaddstream</strong></td><td style="text-align:left">addstream 事件触发. 当MediaSteam被远程peer添加到连接中时发送这个事件。</td></tr><tr><td style="text-align:right"><strong>RTCPeerConnection.ondatachannel</strong></td><td style="text-align:left">datachannel 事件触发. 当RTCDataChannel添加到连接中时发送这个事件。</td></tr><tr><td style="text-align:right"><strong>RTCPeerConnection.onicecandidate</strong></td><td style="text-align:left">Icecandidate 事件触发. 当RTCIceCandidate对象添加到script中时发送这个事件。</td></tr><tr><td style="text-align:right"><strong>RTCPeerConnection.oniceconnectionstatechange</strong></td><td style="text-align:left">This handler is called when Iceconnectionstatechange 事件触发时. This event is sent 当value of iceConnectionState changes.</td></tr><tr><td style="text-align:right"><strong>RTCPeerConnection.onidentityresult</strong></td><td style="text-align:left">This handler is called when Identityresult 事件触发时. This event is sent when an identity assertion is generated during the creating of an offer or an answer of via getIdentityAssertion().</td></tr><tr><td style="text-align:right"><strong>RTCPeerConnection.onidpassertionerror</strong></td><td style="text-align:left">This handler is called when Idpassertionerror 事件触发时. This event is sent when IdP (Identitry Provider) finds an error while generating an identity assertion.</td></tr><tr><td style="text-align:right"><strong>RTCPeerConnection.onidpvalidation</strong></td><td style="text-align:left">This handler is called when Idpvalidationerror 事件触发时. This event is sent when IdP (Identitry Provider) finds an error while validating an identity assertion.</td></tr><tr><td style="text-align:right"><strong>RTCPeerConnection.onnegotiationneeded</strong></td><td style="text-align:left">This handler is called 当negotiationneeded 事件触发时. This event is sent by the browser to inform the negotiation will be required at some point in the future.</td></tr><tr><td style="text-align:right"><strong>RTCPeerConnection.onpeeridentity</strong></td><td style="text-align:left">This handler is called 当peeridentity 事件触发时. This event is sent when a peer identity has been set and verified on this connection.</td></tr><tr><td style="text-align:right"><strong>RTCPeerConnection.onremovestream</strong></td><td style="text-align:left">This handler is called 当signalingstatechange 事件触发时. This event is sent 当value of signalingState changes.</td></tr><tr><td style="text-align:right"><strong>RTCPeerConnection.onsignalingstatechange</strong></td><td style="text-align:left">This handler is called 当removestream 事件触发时. This event is sent when a MediaStream is removed from this connection.</td></tr></tbody></table><h3 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h3><p>下面是常用的几个</p><table><thead><tr><th>S.No.</th><th>Methods &amp; Description</th></tr></thead><tbody><tr><td>1</td><td><strong>RTCPeerConnection()</strong>返回一个 new RTCPeerConnection object.</td></tr><tr><td>2</td><td><strong>RTCPeerConnection.createOffer()</strong>Creates an offer(request) to find a remote peer. The two first parameters of this method are success and error callbacks. The optional third parameter are options, like enabling audio or video streams.</td></tr><tr><td>3</td><td><strong>RTCPeerConnection.createAnswer()</strong>Creates an answer to the offer received by the remote peer during the offer/answer negotiation process. The two first parameters of this method are success and error callbacks. The optional third parameter are options for the answer to be created.</td></tr><tr><td>4</td><td><strong>RTCPeerConnection.setLocalDescription()</strong>Changes the local connection description. The description defines the properties of the connection. The connection must be able to support both old and new descriptions. The method takes three parameters, RTCSessionDescription object, callback if the change of description succeeds, callback if the change of description fails.</td></tr><tr><td>5</td><td><strong>RTCPeerConnection.setRemoteDescription()</strong>Changes the remote connection description. The description defines the properties of the connection. The connection must be able to support both old and new descriptions. The method takes three parameters, RTCSessionDescription object, callback if the change of description succeeds, callback if the change of description fails.</td></tr><tr><td>6</td><td><strong>RTCPeerConnection.updateIce()</strong>Updates ICE 代理 process of pinging remote candidates and gathering local candidates.</td></tr><tr><td>7</td><td><strong>RTCPeerConnection.addIceCandidate()</strong>Provides a remote candidate to ICE 代理.</td></tr><tr><td>8</td><td><strong>RTCPeerConnection.getConfiguration()</strong>返回一个 RTCConfiguration object. It represents the configuration of the RTCPeerConnection object.</td></tr><tr><td>9</td><td><strong>RTCPeerConnection.getLocalStreams()</strong>返回一个n array of local MediaStream connection.</td></tr><tr><td>10</td><td><strong>RTCPeerConnection.getRemoteStreams()</strong>返回一个n array of remote MediaStream connection.</td></tr><tr><td>11</td><td><strong>RTCPeerConnection.getStreamById()</strong>Returns local or remote MediaStream by the given ID.</td></tr><tr><td>12</td><td><strong>RTCPeerConnection.addStream()</strong>Adds a MediaStream as a local source of video or audio.</td></tr><tr><td>13</td><td><strong>RTCPeerConnection.removeStream()</strong>Removes a MediaStream as a local source of video or audio.</td></tr><tr><td>14</td><td><strong>RTCPeerConnection.close()</strong>Closes a connection.</td></tr><tr><td>15</td><td><strong>RTCPeerConnection.createDataChannel()</strong>Creates a new RTCDataChannel.</td></tr><tr><td>16</td><td><strong>RTCPeerConnection.createDTMFSender()</strong>Creates a new RTCDTMFSender, associated to a specific MediaStreamTrack. Allows to send DTMF (Dual-tone multifrequency) phone signaling over the connection.</td></tr><tr><td>17</td><td><strong>RTCPeerConnection.getStats()</strong>Creates a new RTCStatsReport that contains statistics concerning the connection.</td></tr><tr><td>18</td><td><strong>RTCPeerConnection.setIdentityProvider()</strong>Sets IdP. Takes three parameters − the name, the protocol used to communicate and an optional username.</td></tr><tr><td>19</td><td><strong>RTCPeerConnection.getIdentityAssertion()</strong>Gathers an identity assertion. It is not expected to deal with this method in the application. So you may call it explicitly only to anticipate the need.</td></tr></tbody></table><h3 id="建立一个连接"><a href="#建立一个连接" class="headerlink" title="建立一个连接"></a>建立一个连接</h3><p>先把信令服务器跑起来。</p><p>代码：<code>server.js</code></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//信令服务器代码请转到入门教程03</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后<code>node server</code> 把上面的信令服务器跑起来。</p><p>（教程01说过要安装好nodejs环境）</p><p>如果想测试是否跑起来了，可以用wscat命令：</p><p><code>wscat -c ws://localhost:9090</code> </p><p>然后是前端：<code>index.html</code></p><pre class="line-numbers language-html"><code class="language-html">&lt;html lang = "en">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>       &lt;meta charset = "utf-8" />    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>          &lt;input type = "text" id = "loginInput" />          &lt;button id = "loginBtn">Login<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>          &lt;input type = "text" id = "otherUsernameInput" />         &lt;button id = "connectToOtherUsernameBtn">Establish connection<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>       &lt;script src = "client.js"><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个不用解释吧。就是两个输入框两个按钮。</p><p>最后是客户端js文件：<code>client.js</code></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> connection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">'ws://localhost:9090'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span> <span class="token keyword">var</span> loginInput <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#loginInput'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">var</span> loginBtn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#loginBtn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">var</span> otherUsernameInput <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#otherUsernameInput'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">var</span> connectToOtherUsernameBtn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#connectToOtherUsernameBtn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">var</span> connectedUser<span class="token punctuation">,</span> myConnection<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当一个用户点击登录 </span>loginBtn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>    name <span class="token operator">=</span> loginInput<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//发送一个message{ </span>         type<span class="token punctuation">:</span> <span class="token string">"login"</span><span class="token punctuation">,</span>          name<span class="token punctuation">:</span> name       <span class="token punctuation">}</span>      <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          type<span class="token punctuation">:</span> <span class="token string">"login"</span><span class="token punctuation">,</span>          name<span class="token punctuation">:</span> name       <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//handle messages from the server </span>connection<span class="token punctuation">.</span>onmessage <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Got message"</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">var</span> data <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">case</span> <span class="token string">"login"</span><span class="token punctuation">:</span>          <span class="token function">onLogin</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>success<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>       <span class="token keyword">case</span> <span class="token string">"offer"</span><span class="token punctuation">:</span>          <span class="token function">onOffer</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>offer<span class="token punctuation">,</span> data<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>       <span class="token keyword">case</span> <span class="token string">"answer"</span><span class="token punctuation">:</span>          <span class="token function">onAnswer</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>answer<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>       <span class="token keyword">case</span> <span class="token string">"candidate"</span><span class="token punctuation">:</span>          <span class="token function">onCandidate</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>candidate<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>       <span class="token keyword">default</span><span class="token punctuation">:</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当用户登录</span><span class="token keyword">function</span> <span class="token function">onLogin</span><span class="token punctuation">(</span>success<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>success <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//重名了</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"oops...try a different username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//创建RTCPeerConnection对象 </span>      <span class="token keyword">var</span> configuration <span class="token operator">=</span> <span class="token punctuation">{</span>          <span class="token string">"iceServers"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token string">"url"</span><span class="token punctuation">:</span> <span class="token string">"stun:stun.1.google.com:19302"</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>       <span class="token punctuation">}</span><span class="token punctuation">;</span>       myConnection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">webkitRTCPeerConnection</span><span class="token punctuation">(</span>configuration<span class="token punctuation">)</span><span class="token punctuation">;</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"RTCPeerConnection object was created"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myConnection<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//setup ice handling</span>      <span class="token comment" spellcheck="true">//当浏览器发现一个ICE候选我们就发送给其他人。 </span>      myConnection<span class="token punctuation">.</span>onicecandidate <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>candidate<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                type<span class="token punctuation">:</span> <span class="token string">"candidate"</span><span class="token punctuation">,</span>                candidate<span class="token punctuation">:</span> event<span class="token punctuation">.</span>candidate             <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>       <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>connection<span class="token punctuation">.</span>onopen <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Connected"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>connection<span class="token punctuation">.</span>onerror <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Got error"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 发送JSON格式message的Alias(别名) </span><span class="token keyword">function</span> <span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>connectedUser<span class="token punctuation">)</span> <span class="token punctuation">{</span>       message<span class="token punctuation">.</span>name <span class="token operator">=</span> connectedUser<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    connection<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//setup a peer connection with another user </span>connectToOtherUsernameBtn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> otherUsername <span class="token operator">=</span> otherUsernameInput<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    connectedUser <span class="token operator">=</span> otherUsername<span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>otherUsername<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//make an offer </span>      myConnection<span class="token punctuation">.</span><span class="token function">createOffer</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>offer<span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>             type<span class="token punctuation">:</span> <span class="token string">"offer"</span><span class="token punctuation">,</span>             offer<span class="token punctuation">:</span> offer          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         myConnection<span class="token punctuation">.</span><span class="token function">setLocalDescription</span><span class="token punctuation">(</span>offer<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"An error has occurred."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//当有人想打给我们 </span><span class="token keyword">function</span> <span class="token function">onOffer</span><span class="token punctuation">(</span>offer<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    connectedUser <span class="token operator">=</span> name<span class="token punctuation">;</span>    myConnection<span class="token punctuation">.</span><span class="token function">setRemoteDescription</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RTCSessionDescription</span><span class="token punctuation">(</span>offer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    myConnection<span class="token punctuation">.</span><span class="token function">createAnswer</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>answer<span class="token punctuation">)</span> <span class="token punctuation">{</span>       myConnection<span class="token punctuation">.</span><span class="token function">setLocalDescription</span><span class="token punctuation">(</span>answer<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          type<span class="token punctuation">:</span> <span class="token string">"answer"</span><span class="token punctuation">,</span>          answer<span class="token punctuation">:</span> answer       <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"oops...error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//另一个用户要answer我们的offer</span><span class="token keyword">function</span> <span class="token function">onAnswer</span><span class="token punctuation">(</span>answer<span class="token punctuation">)</span> <span class="token punctuation">{</span>    myConnection<span class="token punctuation">.</span><span class="token function">setRemoteDescription</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RTCSessionDescription</span><span class="token punctuation">(</span>answer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//当我们收到ICE候选</span><span class="token keyword">function</span> <span class="token function">onCandidate</span><span class="token punctuation">(</span>candidate<span class="token punctuation">)</span> <span class="token punctuation">{</span>    myConnection<span class="token punctuation">.</span><span class="token function">addIceCandidate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RTCIceCandidate</span><span class="token punctuation">(</span>candidate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样 <strong>offer/answer</strong>的过程就模拟完了。可以通过输入输出在控制台看到相关信息.</p><h2 id="小知识点"><a href="#小知识点" class="headerlink" title="小知识点"></a>小知识点</h2><p><code>alisa</code>在 linux 中，alias 命令（注意全为小写）的功能是设置命令的别名，以简写命令，提高操作效率。根据参数的不同，该命令可查看已设定的别名，或为命令设置新的别名。对于用户自定义别名，仅当前登录期内有效；也可修改配置文件使其长期有效。</p><p>相关命令：<code>unalias</code></p><p>参考链接：<a href="https://baike.baidu.com/item/Alias/3105303#viewPageContent" target="_blank" rel="noopener">https://baike.baidu.com/item/Alias/3105303#viewPageContent</a></p>]]></content>
      
      
      <categories>
          
          <category> WebRTC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Demo </tag>
            
            <tag> tutorial </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>WebRTC04KurentoDemo流程分析</title>
      <link href="/webrtc/webrtc04kurento-liu-cheng-fen-xi/"/>
      <url>/webrtc/webrtc04kurento-liu-cheng-fen-xi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>今天的学习可以说是以失败告终了吧。也就知道了用js动态调试。大体看懂了participant.js和conference.js。但最大头的是kurento.js</p></blockquote><a id="more"></a><h1 id="关于频繁出现的-ICE-candidate："><a href="#关于频繁出现的-ICE-candidate：" class="headerlink" title="关于频繁出现的 ICE candidate："></a>关于频繁出现的 ICE candidate：</h1><p><strong>ICE</strong> stands for <strong>Interactive Connectivity Establishment</strong> , its a techniques used in NAT( network address translator ) for <code>establishing communication for VOIP, peer-peer, instant-messaging, and other kind of interactive media.</code></p><p>Typically <strong>ice candidate</strong> provides the information about the IPaddress and port from where the data is going to be exchanged.</p><p>It’s format is something like follows</p><p>a=candidate:1 1 <strong>UDP</strong> 2130706431 <strong>192.168.1.102 1816</strong> typ <strong>host</strong></p><p>here <code>UDP</code> specifies the protocol to be used, the <code>typ host</code> specifies which type of ice candidates it is, host means the candidates is generated within the firewall. If you use <code>wireshark</code> to monitor the traffic then you can see the ports that are used for data transfer are same as the one present in ice-candidates.</p><p>Another type is <code>relay</code> , which denotes this candidates can be used when communication is to be done outside the firewall.</p><p>It may contain more information depending on browser you are using. Many time i have seen 8-12 ice-candidates are generated by browser.</p><hr><p>Every ICE contains ‘a node’ of your network, until it has reached the outside. By this you send these ICE’s to the other peer, so they know through what connection points they can reach you. See it as a large building: one is in the building, and needs to tell the other (who is not familiar) how to walk through it. Same here, if I have a lot of network devices, the incoming connection somehow needs to find the right way to my computer. By providing all nodes, the RTC connection finds the shortest route itself. So when you would connect to the computer next to you, which is connected to the same router/switch/whatever, it uses all ICE’s and determine the shortest, and that is directly through that point. That your collegue got less ICE candidates has to do with the ammount of devices it has to go through. Please note that every network adapter inside your computer which has an IP adress (I have a vEthernet switch from hyper-v) it also creates an ICE for it.</p><p>参考链接：<a href="https://stackoverflow.com/a/21071464" target="_blank" rel="noopener">https://stackoverflow.com/a/21071464</a></p><p>Demo是王老师搭建了运行在服务器的，先通过给两个主要的js文件(<code>participate.js和conference.js</code>)下断点来弄明白流程吧。</p><p><del>我先建立一个房间登录用户banana房间号1234。然后用另一个浏览器进去开始调试。在<code>participant.js</code>第30行下了断点。</del></p><ul><li><p><del>输入名字apple和房间号1234后，进入<code>Participant(name)</code>函数。name就是apple。仔细看这好像是Participant的类啊。整个<code>participant.js</code>就这一个函数。</del></p></li><li><p><del>然后这个函数开始写html</del></p><p><del>在一个container中把name、video框啥的加入。还会有video一些参数的设置。然后return这个container</del></p></li><li><p><del>到了<code>conferenceroom.js</code>，有个参与者的数组，下标是name，加入了刚刚的的用户</del></p></li><li><p><del>回到<code>participant.js</code>读到了banana。又是一系列的写入html。</del></p></li><li><p><del>然后到了<code>conferenceroom.js</code>的<code>receiveVideo(sender)</code>函数。就是接受sender这个用户发来的Video。</del></p><blockquote><p><del>一会儿建立一个3人的看看sender会变成啥样。怎么接。</del></p></blockquote></li><li><p><del>跳转到 <code>conference.js</code>的<code>ws.onmessage = function(message)</code>,其中message里面有数据：<code>&quot;id&quot;:&quot;existingParticipants&quot;,&quot;data&quot;:[&quot;banana&quot;]</code>和源<code>origin: &quot;wss://192.168.139.218:8443&quot;</code></del></p><p><del>message里的数据是JSON格式的。然后解包存到了<u>parseMessage</u>这个变量。通过<strong>id</strong>判断进去什么case。</del></p><p><del>明显我现在是属于存在用户的情况：</del></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">case</span> <span class="token string">'existingParticipants'</span><span class="token punctuation">:</span>        <span class="token function">onExistingParticipants</span><span class="token punctuation">(</span>parsedMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><del>下面看具体的<code>onExistingParticipants(parsedMessage);</code>执行了什么:</del></p><ul><li><del>变量constranits是控制网页video大小的</del></li><li><del>控制台输出：apple在房间注册</del></li><li><del>新建一个Participate对象</del></li></ul><p><del>break</del></p><hr></li></ul><ul><li><p><del>至此图像还没有在网页显示。进入了<code>kurento-utils.js</code>。应该是实现WebRTC的了。</del></p></li><li><p><del><code>start()</code>函数。不知道为啥，直接到了<code>if (mode !== &#39;recvonly&#39; &amp;&amp; !videoStream &amp;&amp; !audioStream)</code>  –&gt;</del></p><pre class="line-numbers language-javascript"><code class="language-javascript">navigator<span class="token punctuation">.</span>mediaDevices<span class="token punctuation">.</span><span class="token function">getUserMedia</span><span class="token punctuation">(</span>constraints<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>stream<span class="token punctuation">)</span> <span class="token punctuation">{</span>                videoStream <span class="token operator">=</span> stream<span class="token punctuation">;</span>                <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><del>其中stream是一个MediaSteam.上午自己看资料看到有MediaSteamAPI。然后又<code>start()</code>有点懵。</del></p><hr></li></ul><ul><li><p><del>到了<code>window.RTCPeerConnection</code>又是一阵懵之后。</del></p></li><li><p><del>回到了<code>conference.js`</code>ws.onmessage = funciton(message)<code>解JSON数据包。并出现了apple的画面。此时的messsage里id成了</code>receiveVideoAnser`,通过id判断进入case。</del></p></li><li><p><del>break后又在ws.onmessage解JSON。id成了<code>&quot;iceCandidate&quot;</code></del></p><p><del>进入iceCandidate的case：参与者的数组中取到apple然后<code>.rtcPeer.addIceCandidate()</code>是加入了参与者？但是也没看到读取banana啊。只读到一串这个：<code>&quot;candidate:4 1 UDP 2013266431 2400:dd0a:1005:1390:250:56ff:fe86:a0c4 30325 typ host&quot;</code></del></p></li><li><p><del>回到了<code>window.RTCPeerConnection</code>执行<code>resolve()</code>解码？</del></p></li></ul><hr><p>上面调试遇到一个问题就是，加了断点会在死循环里出不来啊。</p><p>我懂了。我应该在每种情况下加不同的断点。然后看代码是怎么走的。就是说我之前折腾这半天顶多就知道了个新建Participate对象的事。重来吧。</p><hr><ol><li>在<code>conference.js</code>的前4个case中下断点</li><li>第一个用户apple进入1234房间，分析</li><li>第二个用户banana进入1234房间，分析</li><li>第三个用户cabbage进入1234房间，分析</li><li>第二个用户banana退出1234房间，分析</li></ol><ul><li>第一个用户apple进入1234房间<ul><li>虽然之前没有人。但还是进入了existingParticipants情况下。<code>function onExistingParticipants(msg)</code>其中msg中：<code>{id: &quot;existingParticipants&quot;, data: Array(0)}</code></li><li>控制台输出，apple在房间注册</li><li>新建Participate对象<code>participant = new Participant(name);</code> name就是“apple” ，这个过程会在HTML写入video框，但还没有读到数据</li><li>存入数组participants[name]</li><li>读video</li><li><code>participant.rtcPeer</code> 进入了<code>kurento-utils.js</code>这里面好复杂没看懂</li><li>break了<code>case &#39;existingParticipants&#39;</code></li><li>通过<code>this.offerToReceiveVideo</code>进入了<code>receiveVideoResponse</code>这个case。<code>receiveVideoResponse(result)</code>其中result内容有id、name和adpAnswer</li><li>end？</li></ul></li></ul><hr><p>又去请教了下王老师。看来我的重点还是要去看</p><p><code>kurento-utils.js</code>研究明白这个才是最重要的。</p><p>问题的关键就在于我要摸索出什么该看什么不该看。</p><hr><p>下班后王老师一走。Demo进不去了。找了找文档，想自己搭建一下呢。发现要JDK和mvn。电脑没这么多空间了。贼尴尬。</p><p><a href="http://www.kurento.org" target="_blank" rel="noopener">http://www.kurento.org</a></p><p>Demo官网。</p><blockquote><p>后来发现这个Demo是搭建在实验室的服务器上的。必须是Ubuntu环境。</p></blockquote><h1 id="js调试知识点"><a href="#js调试知识点" class="headerlink" title="js调试知识点"></a>js调试知识点</h1><ul><li><p>控制台输入 <code>$(this)</code>即可得到选择的元素</p></li><li><p>输入变量名可查看这个变量</p><blockquote><p> 但要在加了断点的情况下才能看到那些局部变量哦</p></blockquote></li><li><p>可以边调试边打断点和去断点啊！</p></li><li><p>王老师说的对，这东西还是得多调。有了经验了以后就会打了。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> WebRTC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>WebRTC03入门教程01</title>
      <link href="/webrtc/webrtc03-ru-men-jiao-cheng-01/"/>
      <url>/webrtc/webrtc03-ru-men-jiao-cheng-01/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.tutorialspoint.com/webrtc/index.htm" target="_blank" rel="noopener">WebRTC教程</a></p><a id="more"></a><h1 id="Home"><a href="#Home" class="headerlink" title="Home"></a>Home</h1><p>WebRTC（网页实时通讯）技术可以很容易地让人们在网页实现音频、视频连接。这个教程中，我们会解释如何用WebRTC快速建立一个peer-to-peer的连接。</p><p><strong>受众</strong><br>开发者。<br><strong>条件</strong><br>WebRTC用于赋予浏览器和移动App实时通信的能力。</p><h1 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h1><p>尽管WebRTC发布于2011年5月，但它至今仍在发展和改进。<br><strong>IETF (Internet Engineering Task Force)</strong>网页浏览器组在RTC做了一系列协议的标准化。<br><a href="http://tools.ietf.org/wg/rtcweb/" target="_blank" rel="noopener">http://tools.ietf.org/wg/rtcweb/</a><br><strong>W3C (World Wide Web Consortium)</strong>在APIs上做了标准化。<br><a href="http://www.w3.org/2011/04/webrtc/" target="_blank" rel="noopener">http://www.w3.org/2011/04/webrtc/</a></p><h2 id="基本格局"><a href="#基本格局" class="headerlink" title="基本格局"></a>基本格局</h2><p>WebRTC可以让你快速建立p2p连接。你需要有框架和一些能力来处理一些典型的问题比如，数据丢失，连接中断和NAT跨越。这在都在<a href="http://www.webrtc.org/的开源资源中。" target="_blank" rel="noopener">http://www.webrtc.org/的开源资源中。</a></p><p><code>WebRTC应用</code> –&gt; <code>WebRTC API</code> <code>媒体捕捉</code> <code>编码解码音视频</code> <code>传输层</code> <code>节点管理</code> </p><p>WebRTC的API包括 </p><ul><li><p>媒体捕捉</p></li><li><p>编码解码音视频</p><p>这种算法叫做<strong>codec</strong>，有很多很多，这些<strong>codecs</strong>由不同的公司在维护用于不同的商业目的。WebRTC中有几种<strong>codec</strong>比如H.264,iSAC,Opus和VP8。当两个浏览器连接起来，他们为用户选择最匹配最合适的<strong>codec</strong>。</p></li><li><p>传输层</p><p>管理包的顺序。处理丢包。连接用户。</p></li><li><p>节点管理</p><p>管理，打开，阻止连接。</p></li></ul><h2 id="浏览器兼容"><a href="#浏览器兼容" class="headerlink" title="浏览器兼容"></a>浏览器兼容</h2><p>在这里检测</p><p><a href="https://caniuse.com/#feat=rtcpeerconnection" target="_blank" rel="noopener">https://caniuse.com/#feat=rtcpeerconnection</a></p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>实时交易</li><li>实时广告</li><li>下班后交流</li><li>HR管理</li><li>社交网络</li><li>数据服务</li><li>在线医疗</li><li>金融服务</li><li>监视</li><li>多人游戏</li><li>在线广播</li><li>在线教育</li></ul><h1 id="结构体系"><a href="#结构体系" class="headerlink" title="结构体系"></a>结构体系</h1><p><img src="https://www.tutorialspoint.com/webrtc/images/architecture.jpg" alt=""></p><p>三个不同层：</p><ul><li>web开发者API</li><li>浏览器厂家API</li><li>浏览器厂家可以hook的可覆盖的API</li></ul><h2 id="WebRTC-API"><a href="#WebRTC-API" class="headerlink" title="WebRTC API"></a>WebRTC API</h2><p>包括一些主要的js对象</p><ul><li><p>RTCPeerConnection</p><p>建立连接用的</p><p>例子：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> conn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RTCPeerConnection</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span> conn<span class="token punctuation">.</span>onaddstream <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// use stream here </span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>MediaStream</p><p>音视频处理</p><p>例子：</p><p>创建一个HTML网页：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>       &lt;meta charset = "utf-8">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">autoplay</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span>       &lt;script src = "client.js"><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再加一个<code>client.js</code>文件：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//checks if the browser supports WebRTC </span><span class="token keyword">function</span> <span class="token function">hasUserMedia</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    navigator<span class="token punctuation">.</span>getUserMedia <span class="token operator">=</span> navigator<span class="token punctuation">.</span>getUserMedia <span class="token operator">||</span> navigator<span class="token punctuation">.</span>webkitGetUserMedia       <span class="token operator">||</span> navigator<span class="token punctuation">.</span>mozGetUserMedia <span class="token operator">||</span> navigator<span class="token punctuation">.</span>msGetUserMedia<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token operator">!</span>navigator<span class="token punctuation">.</span>getUserMedia<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasUserMedia</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    navigator<span class="token punctuation">.</span>getUserMedia <span class="token operator">=</span> navigator<span class="token punctuation">.</span>getUserMedia <span class="token operator">||</span> navigator<span class="token punctuation">.</span>webkitGetUserMedia      <span class="token operator">||</span> navigator<span class="token punctuation">.</span>mozGetUserMedia <span class="token operator">||</span> navigator<span class="token punctuation">.</span>msGetUserMedia<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//get both video and audio streams from user's camera </span>   navigator<span class="token punctuation">.</span><span class="token function">getUserMedia</span><span class="token punctuation">(</span><span class="token punctuation">{</span> video<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> audio<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>stream<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">var</span> video <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'video'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//insert stream into the video tag </span>      video<span class="token punctuation">.</span>src <span class="token operator">=</span> window<span class="token punctuation">.</span>URL<span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>   <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Error. WebRTC is not supported!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后打开那个HTML网页就能看到你自己啦~</p></li><li><p>RTCDataChannel</p><p>通过RTCPeerConnection对象来创建信道</p><p>例子：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> peerConn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RTCPeerConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//establishing peer connection </span><span class="token comment" spellcheck="true">//... </span><span class="token comment" spellcheck="true">//end of establishing peer connection </span><span class="token keyword">var</span> dataChannel <span class="token operator">=</span> peerConnection<span class="token punctuation">.</span><span class="token function">createDataChannel</span><span class="token punctuation">(</span><span class="token string">"myChannel"</span><span class="token punctuation">,</span> dataChannelOptions<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// here we can start sending direct messages to another peer </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>这里作者用的就是 HTML+JS+Node.js</p><p>安装好后。在终端输入 <code>node</code>测试nodejs工作了。</p><p>然后用Node.js的WebSockets库来搭建信令服务器。</p><p><code>npm install ws</code>安装WebSocket</p><p>为了测试信令服务器，<code>npm install -g wscat</code>安装wscat.</p><table><thead><tr><th>S.No</th><th>Protocols &amp; Description</th></tr></thead><tbody><tr><td>1</td><td><a href="https://www.tutorialspoint.com/webrtc/webrtc_protocols.htm" target="_blank" rel="noopener">WebRTC Protocols</a>WebRTC applications use UDP (User Datagram Protocol) as the transport protocol. Most web applications today are built with the using of the TCP (Transmission Control Protocol)</td></tr><tr><td>2</td><td><a href="https://www.tutorialspoint.com/webrtc/webrtc_session_description_protocol.htm" target="_blank" rel="noopener">Session Description Protocol</a>The SDP is an important part of the WebRTC. It is a protocol that is intended to describe media communication sessions.</td></tr><tr><td>3</td><td><a href="https://www.tutorialspoint.com/webrtc/webrtc_finding_route.htm" target="_blank" rel="noopener">Finding a Route</a>In order to connect to another user, you should find a clear path around your own network and the other user’s network. But there are chances that the network you are using has several levels of access control to avoid security issues.</td></tr><tr><td>4</td><td><a href="https://www.tutorialspoint.com/webrtc/webrtc_sctp.htm" target="_blank" rel="noopener">Stream Control Transmission Protocol</a>With the peer connection, we have the ability to send quickly video and audio data. The SCTP protocol is used today to send blob data on top of our currently setup peer connection when using the RTCDataChannel object.</td></tr></tbody></table><h1 id="MediaStream-APIs"><a href="#MediaStream-APIs" class="headerlink" title="MediaStream APIs"></a>MediaStream APIs</h1><p>这个API用于轻松从本地的摄像头麦克风获取流媒体。<code>getUserMedia()</code>方法是最常用的。</p><p>关键点：</p><ul><li>一个流对象（音频/视频）呈现一个实时媒体</li><li>在抓取这些媒体流之前，会询问用户的授权</li><li>输入设备的选择是可用API规定的。</li></ul><p>每个MediaSteam对象包含多个MediaSteamTrack对象。他们展示不同输入设备输入进来的音频、视频。</p><p>每个MediaSteamTrack对象可能包含多个频道（左/右声道）。</p><hr><p>输出MediaSteam对象有两种方法，1，输出到一个video或audio元素中。2，发送输出给RTCpeerConnection对象，它可以再发送给更远的peer。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>又举了一遍上面举过的html+client.js的例子。</p><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li><strong>MediaStream.active(read only)</strong> 如果激活了返回true</li><li><strong>MediaSteam.ended(read only,deprecated)</strong> 如果流没有到达，返回<u>false</u>；如果事件对象已经被解除（说明流已经被读完），返回<u>true</u></li><li><strong>MediaSteam.id(read only)</strong>对象的唯一id</li><li><strong>MediaSteam.label(read only, deprecated)</strong>  根据用户代理分配的唯一标识<br>你可以在浏览器中console查看这些特性</li></ul><p><img src="../../../../../../../var/folders/r1/fl4npcxs78q5kh714tg987wm0000gn/T/abnerworks.Typora/image-20180829102518714.png" alt="image-20180829102518714"></p><h3 id="事件句柄"><a href="#事件句柄" class="headerlink" title="事件句柄"></a>事件句柄</h3><ul><li><strong>MediaStream.onactive</strong> −  一个MediaStream 对象变成激活的<em>active</em> 事件的句柄 </li><li><strong>MediaStream.onaddtrack</strong> − 添加了新的<em> </em>MediaStreamTrack* 对象后的句柄</li><li><strong>MediaStream.onended (deprecated)</strong> − 结束并解除的句柄</li><li><strong>MediaStream.oninactive</strong> − 一个 <em>MediaStream</em>对象变成激活状态后的 <em>inactive</em> 时间句柄</li><li><strong>MediaStream.onremovetrack</strong> −  一个 <em>MediaStreamTrack</em> 对象被激活后的 <em>removetrack</em>事件句柄</li></ul><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ul><li><strong>MediaStream.addTrack()</strong> − 添加 <em>MediaStreamTrack</em> 对象到MediaStream. 如果这个Track已经添加则什么都不做。</li><li><strong>MediaStream.clone()</strong> − 返回一个有新ID的MediaStream对象。</li><li><strong>MediaStream.getAudioTracks()</strong> − 从<em>MediaStream</em> 对象中返回一个list音频 <em>MediaStreamTrack</em> 对象 </li><li><strong>MediaStream.getVideoTracks()</strong> − 类比上一个</li><li><strong>MediaStream.getTrackById()</strong> − 返回trackID。 如果argument为空返回null。如果多个tracks ID相同返回第一个。</li><li><strong>MediaStream.getTracks()</strong> − 返回一个 <em>MediaStream</em>对象的所有 <em>MediaStreamTrack</em>对象</li><li><strong>MediaStream.removeTrack()</strong> − 从MediaSteam中移除 <em>MediaStreamTrack</em>对象。如果这个track已经被移除则什么也不做</li></ul><p>例子</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span> &lt;html lang = "en">   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>       &lt;meta charset = "utf-8" />    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">autoplay</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>&lt;button id = "btnGetAudioTracks">getAudioTracks()         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>&lt;button id = "btnGetTrackById">getTrackById()         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>&lt;button id = "btnGetTracks">getTracks()<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>&lt;button id = "btnGetVideoTracks">getVideoTracks()         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>&lt;button id = "btnRemoveAudioTrack">removeTrack() - audio         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>&lt;button id = "btnRemoveVideoTrack">removeTrack() - video         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>       &lt;script src = "client.js"><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> stream<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">hasUserMedia</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//check if the browser supports the WebRTC </span>   <span class="token keyword">return</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>getUserMedia <span class="token operator">||</span> navigator<span class="token punctuation">.</span>webkitGetUserMedia <span class="token operator">||</span>       navigator<span class="token punctuation">.</span>mozGetUserMedia<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasUserMedia</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   navigator<span class="token punctuation">.</span>getUserMedia <span class="token operator">=</span> navigator<span class="token punctuation">.</span>getUserMedia <span class="token operator">||</span> navigator<span class="token punctuation">.</span>webkitGetUserMedia      <span class="token operator">||</span> navigator<span class="token punctuation">.</span>mozGetUserMedia<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//enabling video and audio channels </span>   navigator<span class="token punctuation">.</span><span class="token function">getUserMedia</span><span class="token punctuation">(</span><span class="token punctuation">{</span> video<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> audio<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>       stream <span class="token operator">=</span> s<span class="token punctuation">;</span>       <span class="token keyword">var</span> video <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'video'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//inserting our stream to the video tag     </span>      video<span class="token punctuation">.</span>src <span class="token operator">=</span> window<span class="token punctuation">.</span>URL<span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"WebRTC is not supported"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>btnGetAudioTracks<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"getAudioTracks"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stream<span class="token punctuation">.</span><span class="token function">getAudioTracks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btnGetTrackById<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"getTrackById"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stream<span class="token punctuation">.</span><span class="token function">getTrackById</span><span class="token punctuation">(</span>stream<span class="token punctuation">.</span><span class="token function">getAudioTracks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btnGetTracks<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"getTracks()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stream<span class="token punctuation">.</span><span class="token function">getTracks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btnGetVideoTracks<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"getVideoTracks()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stream<span class="token punctuation">.</span><span class="token function">getVideoTracks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btnRemoveAudioTrack<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"removeAudioTrack()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stream<span class="token punctuation">.</span><span class="token function">removeTrack</span><span class="token punctuation">(</span>stream<span class="token punctuation">.</span><span class="token function">getAudioTracks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btnRemoveVideoTrack<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"removeVideoTrack()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stream<span class="token punctuation">.</span><span class="token function">removeTrack</span><span class="token punctuation">(</span>stream<span class="token punctuation">.</span><span class="token function">getVideoTracks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="RTCDataChannel-APIs"><a href="#RTCDataChannel-APIs" class="headerlink" title="RTCDataChannel APIs"></a>RTCDataChannel APIs</h1><p>WebRTC不仅擅长发送音频和视频，还可能是任意数据。这就是RTCDataChannel对象的功能。</p><h2 id="RTCDataChannel-API"><a href="#RTCDataChannel-API" class="headerlink" title="RTCDataChannel API"></a>RTCDataChannel API</h2><h3 id="特性-1"><a href="#特性-1" class="headerlink" title="特性"></a>特性</h3><ul><li><p><strong>RTCDataChannel.label (read only)</strong> − 返回一个数据信道名的字符串</p></li><li><p><strong>RTCDataChannel.ordered (read only)</strong> − 如果消息投递顺序有保障返回true。没保证返回false。</p></li><li><p><strong>RTCDataChannel.protocol (read only)</strong> −返回这个信道使用的子协议名的字符串。</p></li><li><p><strong>RTCDataChannel.id (read only)</strong> − 返回RTCDataChannel对象创建时的唯一id</p></li><li><p><strong>RTCDataChannel.readyState (read only)</strong> − 返回 RTCDataChannelState enum描述连接状态。</p><p>可能的值：</p><ul><li><strong>connecting</strong> − 候选的连接还没有激活. 这是初始化状态.</li><li><strong>open</strong> − 候选的连接正在运行.</li><li><strong>closing</strong> − Indicates that the connection正在关闭ing. The cached messages are in the process of being sent or received, but no newly created task is accepting.</li><li><strong>closed</strong> − Indicates that the connection could not be established or has been shut down.</li></ul></li><li><p><strong>RTCDataChannel.bufferedAmount (read only)</strong> − Returns the amount of bytes that have been queued for sending. This is the amount of data that has not been sent yet via RTCDataChannel.send().</p></li><li><p><strong>RTCDataChannel.bufferedAmountLowThreshold</strong> − Returns the number of bytes at which the RTCDataChannel.bufferedAmount is taken up as low. When the RTCDataChannel.bufferedAmount decreases below this threshold, the bufferedamountlow event is fired.</p></li><li><p><strong>RTCDataChannel.binaryType</strong> − Returns the type of the binary data transmitted by the connection. Can be “blob” or “arraybuffer”.</p></li><li><p><strong>RTCDataChannel.maxPacketLifeType (read only)</strong> − Returns an unsigned short that indicates the length in milliseconds of the window in when messaging is going in unreliable mode.</p></li><li><p><strong>RTCDataChannel.maxRetransmits (read only)</strong> − Returns an unsigned short that indicates the maximum number of times a channel will retransmit data if it is not delivered.</p></li><li><p><strong>RTCDataChannel.negotiated (read only)</strong> − Returns a boolean that indicates if the channel has been negotiated by the user-agent, or by the application.</p></li><li><p><strong>RTCDataChannel.reliable (read only)</strong> − Returns a boolean that indicates of the connection can send messages in unreliable mode.</p></li><li><p><strong>RTCDataChannel.stream (read only)</strong> − Synonym for RTCDataChannel.id</p></li></ul><h3 id="Event-Handlers"><a href="#Event-Handlers" class="headerlink" title="Event Handlers"></a>Event Handlers</h3><ul><li><strong>RTCDataChannel.onopen</strong> − This event handler is called when the open event is fired. This event is sent when the data connection has been established.</li><li><strong>RTCDataChannel.onmessage</strong> − This event handler is called when the message event is fired. The event is sent when a message is available on the data channel.</li><li><strong>RTCDataChannel.onbufferedamountlow</strong> − This event handler is called when the bufferedamoutlow event is fired. This event is sent when RTCDataChannel.bufferedAmount decreases below the RTCDataChannel.bufferedAmountLowThreshold property.</li><li><strong>RTCDataChannel.onclose</strong> − This event handler is called when the close event is fired. This event is sent when the data connection has been closed.</li><li><strong>RTCDataChannel.onerror</strong> − This event handler is called when the error event is fired. This event is sent when an error has been encountered.</li></ul><h3 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h3><ul><li><strong>RTCDataChannel.close()</strong> − Closes the data channel.</li><li><strong>RTCDataChannel.send()</strong> − Sends the data in the parameter over the channel. The data can be a blob, a string, an ArrayBuffer or an ArrayBufferView.</li></ul><p>未完。</p><center>翻译自<a href="https://www.tutorialspoint.com/webrtc/index.htm没有全文翻译。侵权删。" target="_blank" rel="noopener">https://www.tutorialspoint.com/webrtc/index.htm没有全文翻译。侵权删。</a></center>]]></content>
      
      
      <categories>
          
          <category> WebRTC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tutorial </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>WebRTC02查基础资料</title>
      <link href="/webrtc/webrtc02-cha-zi-liao/"/>
      <url>/webrtc/webrtc02-cha-zi-liao/</url>
      
        <content type="html"><![CDATA[<p>本来第一站是要查资料先了解下知识点的。但是王老师直接就给了我iOS的源码，这样又了Demo对着，了解更好了。不多说了。最近的任务就是多看WebRTC的相关文章。把该知道的多学一点。</p><a id="more"></a><h1 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h1><h2 id="Room-Server"><a href="#Room-Server" class="headerlink" title="Room Server"></a>Room Server</h2><p>房间服务器。创建、管理通话状态。<br>是双方还是多方通话。加入离开房间等等。</p><h2 id="Signaling-Server"><a href="#Signaling-Server" class="headerlink" title="Signaling Server"></a>Signaling Server</h2><p>信令服务器。<br>管理和协助终端建立p2p通话。</p><ul><li><p>任务</p><ul><li>控制通信[发起/结束]的连接控制消息。</li><li>发生错误时，相互通告</li><li>媒体流 元数据【解码器、带宽、媒体类型等等】</li><li>两两之间建立安全连接的关键数据</li><li>外界能看到的网络上的数据【ip、端口等】</li></ul></li></ul><h2 id="STUN-TURN-ICE-Server"><a href="#STUN-TURN-ICE-Server" class="headerlink" title="STUN/ TURN/ ICE Server"></a>STUN/ TURN/ ICE Server</h2><blockquote><p>参考阅读：<br><a href="http://www.52im.net/thread-50-1-1.html" target="_blank" rel="noopener">《P2P技术详解(一)：NAT详解——详细原理、P2P简介》</a><br><a href="http://www.52im.net/thread-542-1-1.html" target="_blank" rel="noopener">《P2P技术详解(二)：P2P中的NAT穿越(打洞)方案详解》</a><br><a href="http://www.52im.net/thread-557-1-1.html" target="_blank" rel="noopener">《P2P技术详解(三)：P2P技术之STUN、TURN、ICE详解》</a></p></blockquote><p>防火墙打洞服务器</p><p><img src="http://webrtc.org.cn/wp-content/uploads/2016/06/nat-network.png" alt=""></p><p>如图所示，由于有网络防火墙或配置NAT的路由器。导致我们的计算机ip地址不是广域网的ip地址。因此需要打洞～</p><ul><li>STUN (Simple Traversal of UDP over NATs)<br>NAT的UDP简单穿越</li></ul><p>确定<strong>内网终端</strong>暴漏在<strong>广域网</strong> 的ip、端口、NAT信息。</p><p>协助<strong>不同内网</strong>之间的计算机建立p2p的<strong>UDP通讯</strong></p><p>解决了家用路由环境的打洞问题。但是对于大部分企业的网络环境就不是很好了</p><blockquote><p>为什么呢？企业的网络环境有什么不一样？</p></blockquote><p>这是就需要TURN协议了。</p><ul><li>TURN（Traversal Using Relay NAT）<br>允许在TCP或UDP的连线上跨越 NAT 或防火墙.<blockquote><p>Relay–中继动作</p></blockquote></li></ul><p>Client-Server协议。</p><p><strong>【[客户]】</strong>在通讯前先与<strong>服务器</strong>交互，要求<strong>服务器</strong>产生[relay port]<strong>接口</strong>，这就是中继跨越<strong>新地址</strong>。这时<strong>服务器</strong>会建立<strong>[peer]</strong>，即<strong>remote endpoints远方终端</strong>，开始<strong>relay中继</strong>动作。<strong>【[客户端]】</strong>利用<strong>接口</strong>将资料传送至<strong>[peer]</strong>，再由<strong>[peer]</strong>传给另一个<strong>【[终端]】</strong>。通过服务器产生新的<strong>[peer]</strong>来进行数据的中转。</p><ul><li>ICE协议</li></ul><p>综合前两种的方案。</p><p>通过offer/answer模型建立基于UDP的通讯。 ICE是offer/answer模型的扩展，通过在offer和answer的SDP(Session Description Protocol)里面包含多种IP地址和端口，然后对本地SDP和远程SDP里面的IP地址进行配对，然后通过P2P连通性检查进行连通性测试工作，如果测试通过即表明该传输地址对可以建立连接。其中IP地址和端口（也就是地址）有以下几种：本机地址、通过 STUN服务器反射后获取的server-reflexive地址（内网地址被NAT映射后的地址）、relayed地址（和 TURN转发服务器相对应的地址）及Peer reflexive地址等。</p><ul><li>概览</li></ul><table><thead><tr><th>特性</th><th>STUN</th><th>TURN</th><th>ICE</th></tr></thead><tbody><tr><td>实现复杂度</td><td>实现简单</td><td>难于实现。TURN的安全性设计增加终端设置的复杂度</td><td>一般</td></tr><tr><td>TCP穿透支持</td><td>不支持</td><td>支持</td><td>支持</td></tr><tr><td>对现有设备的要求</td><td>要求客户端支持，对现有NAT设备无改动要求，需增加STUN服务器</td><td>对现有NAT设备无要求，要求客户端支持，需增加TURN服务器</td><td>对NAT设备无要求，支持所有类型的NAT设备。客户端必须支持，网路结构中需增加STUN/TURN服务器</td></tr><tr><td>可扩展性</td><td>可扩展性好，与具体协议无关</td><td>可扩展性好，与具体协议无关</td><td>可扩展性好，与具体协议无关</td></tr><tr><td>安全性</td><td>一般</td><td>一般</td><td>较好</td></tr><tr><td>健壮性</td><td>差，不支持symmentric型NAT</td><td>好，支持所有类型的NAT</td><td>好，适用与所有NAT及NAT拓扑类型，且由于存在中继服务器，NAT 穿透一般总是能成功</td></tr><tr><td>穿透一般总是能成功其他</td><td>支持自动检测NAT类型，使用户即使在使用STUN协议无法实现NAT穿透时还可以根据NAT类型自主选择其他可使用的NAT穿透方案</td><td>与P2P穿透方式相比，性能是relay穿透方式的弱点。另外TURN无法实现负载分担，解决的方式是把media relay服务器的分配工作放在 SIP proxy完成</td></tr></tbody></table><h1 id="小知识点"><a href="#小知识点" class="headerlink" title="小知识点"></a>小知识点</h1><h2 id="GAE"><a href="#GAE" class="headerlink" title="GAE"></a>GAE</h2><p>Google App Engine<br>谷歌的Web应用开发、托管平台。支持Python、Java和Php。</p><h2 id="HLS-HTTP-Live-Streaming"><a href="#HLS-HTTP-Live-Streaming" class="headerlink" title="HLS(HTTP Live Streaming)"></a>HLS(HTTP Live Streaming)</h2><p><a href="https://en.wikipedia.org/wiki/HTTP_Live_Streaming" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/HTTP_Live_Streaming</a><br><a href="https://baike.baidu.com/item/HLS/8328931" target="_blank" rel="noopener">https://baike.baidu.com/item/HLS/8328931</a></p><h2 id="H-264"><a href="#H-264" class="headerlink" title="H.264"></a>H.264</h2><p>国际上制定视频编解码技术的组织有两个，一个是“国际电联（ITU-T）”，它制定的标准有H.261、H.263、H.263+等，另一个是“国际标准化组织（ISO）”它制定的标准有MPEG-1、MPEG-2、MPEG-4等。而H.264则是由两个组织联合组建的联合视频组（JVT）共同制定的新数字视频编码标准，所以它既是ITU-T的H.264，又是ISO/IEC的MPEG-4高级视频编码（Advanced Video Coding，AVC）的第10 部分。因此，不论是MPEG-4 AVC、MPEG-4 Part 10，还是ISO/IEC 14496-10，都是指H.264。</p><h2 id="Scaledrone"><a href="#Scaledrone" class="headerlink" title="Scaledrone"></a>Scaledrone</h2><p>Scaledrone is a realtime messaging service and platform. Send live updates, create chatrooms and collaborative tools.</p><p>一个平台。<br>这是这个平台的Demo<br><a href="https://scaledrone.github.io/webrtc/index.html#12345房间号" target="_blank" rel="noopener">https://scaledrone.github.io/webrtc/index.html#12345房间号</a>   貌似不太行啊。</p><p><a href="https://www.scaledrone.com/blog/webrtc-tutorial-simple-video-chat/" target="_blank" rel="noopener">https://www.scaledrone.com/blog/webrtc-tutorial-simple-video-chat/</a><br>基础教学</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>了解了打洞的定义。路还很长啊。</p>]]></content>
      
      
      <categories>
          
          <category> WebRTC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>WebRTC01iOS_Demo</title>
      <link href="/webrtc/webrtc01iosdemo/"/>
      <url>/webrtc/webrtc01iosdemo/</url>
      
        <content type="html"><![CDATA[<p>为我的WebRTC第一站做个记录吧。先了解下应用层的东西。</p><a id="more"></a><p>我发现，我这些学习笔记一点都不技术，跟我的流水账日记差不多～<br>哈哈。管不了这么多了。我的现阶段，这个水平。写博客就是为了记录我学习的过程。<br>大体了解WebRTC，里面涉及的东西真的～无法想象的困难。王老师把10g的源码传给我的时候，我一个C++都不会的人，内心多少是拒绝的。<br>难也要学啊。老师既然把我分到了这个组。就好好跟着王老师学。就算自己学不懂，学习的过程也是极大的提高吧。</p><hr><h1 id="iOS-Demo-的编译"><a href="#iOS-Demo-的编译" class="headerlink" title="iOS Demo 的编译"></a>iOS Demo 的编译</h1><p>由于有王老师带，源码直接就传给我了。<br>但是由于不是自己下的，源码在王老师那里是被编译过的。和签名相关的一些问题导致编译一直报错。</p><ul><li>Bundle id</li></ul><p>我根据报错的信息在网上查询，是Bundle Id需要改成我的，对着教程发现很多要修改的地方，我的文件里都没有。整了一上午也没编译成功。</p><blockquote><p>王老师：Google开发这个的时候并不是用的Xcode，用了跨平台的东西生成，所以很多地方和默认配置都不同。</p></blockquote><p>结果下午王老师来调了这里直接就好了。<br><img src="http://p66eruxmw.bkt.clouddn.com/15350928074365.jpg" alt=""></p><p> 只要把Product Bundle identifier随便改一个名就行了。<br> 然后在General里选上我的开发者账号就可以生成新的id了。</p><ul><li>Depot_tools</li></ul><p>新的问题来临。毕竟源码是王老师用的。很多东西都要重新配置。<br>就比如这一步Depot tools就是不能省的。去解决问题了！</p><p>差不多懂Demo的搭建流程了。问题关键不在于Depot_tools</p><p>而在于生成 <code>all.xcworkspace</code> 这个工程文件的过程。<br>这样我就可以完全和王老师生成的分离。<br>主要就下面这两类代码：</p><p>/src文件目录下执行:</p><ul><li><strong>真机项目：</strong></li></ul><pre class="line-numbers language-sh"><code class="language-sh">gn gen out/ios_64 --args='target_os="ios" target_cpu="arm64"' --ide=xcode<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>模拟器项目：</strong></li></ul><pre class="line-numbers language-sh"><code class="language-sh">gn gen out/ios_sim --args='target_os="ios" target_cpu="x64"' --ide=xcode<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>gn属性</th><th>描述</th></tr></thead><tbody><tr><td>target_os</td><td>默认值是运行脚本的任何操作系统，运行到ios系统即赋值“ios”</td></tr><tr><td>target_cpu</td><td>根据设备的系统架构将其设置为“arm”或“arm64”或”x64”</td></tr></tbody></table><blockquote><p>之前在网上搜到的只有 gn gen这一步，并不能生成  <code>all.xcworkspace</code> 这个工程文件。再用ninja的命令去建工程。但是我运行就报错。</p></blockquote><p>直到在一个 wiki上看到这种写法。 <code>--ide=xcode</code>就可以了~</p><p><img src="http://p66eruxmw.bkt.clouddn.com/15351011667225.jpg" alt=""></p><p>不错。今天就把Demo搞定了。不过真机运行还不行。王老师说下周给我看看。哈哈~良师益友啊。</p>]]></content>
      
      
      <categories>
          
          <category> WebRTC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HelloJs</title>
      <link href="/website/hellojs/"/>
      <url>/website/hellojs/</url>
      
        <content type="html"><![CDATA[<p>高铁上没事干，入门一波Js。</p><a id="more"></a><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><ul><li>分号<code>；</code>可选</li><li>标识符以字母、下划线和美元符号开始</li><li>大小写敏感</li></ul><h1 id="Grammar"><a href="#Grammar" class="headerlink" title="Grammar"></a>Grammar</h1><h2 id="Var"><a href="#Var" class="headerlink" title="Var"></a>Var</h2><p><code>var a = 10</code> 声明变量</p><p><code>docunment.write(a)</code> 输出</p><p>赋值为null可清除变量</p><ul><li>点击运算</li></ul><pre class="line-numbers language-html"><code class="language-html">&lt;p id = "sumid"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mysum()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>结果<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">function</span> <span class="token function">mysum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> m <span class="token operator">=</span> i <span class="token operator">+</span> j<span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"sumid"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> m<span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Operator"><a href="#Operator" class="headerlink" title="Operator"></a>Operator</h2><p><code>+ - x / % ++ --</code></p><p><code>= += -= *= /= %=</code></p><p><code>== === != &lt; &gt; &lt;= &gt;=</code></p><p><code>&amp;&amp; || !</code></p><p><code>?:</code>三目</p><ul><li>任何类型和字符串运算都会被转成字符串类型</li></ul><p>这就是<code>==</code>和<code>===</code>的区别：</p><pre><code>&quot;5&quot;==5?true&quot;5&quot;===5?false</code></pre><h2 id="Condition"><a href="#Condition" class="headerlink" title="Condition"></a>Condition</h2><p><code>if else</code></p><pre><code>switch(i){case 1: break;case 2: break;default: break;}</code></pre><h2 id="Loop"><a href="#Loop" class="headerlink" title="Loop"></a>Loop</h2><p><code>for(;;){}</code>和C中一样</p><p><code>for (j in i)</code></p><p><code>while</code> <code>do while</code></p><h1 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h1><h2 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h2><ul><li>在<code>&lt;script&gt;</code>中</li><li>在Html中</li></ul><h1 id="异常捕获"><a href="#异常捕获" class="headerlink" title="异常捕获"></a>异常捕获</h1><pre><code>try{    //此处插入测试代码块}catch(err){    //发生错误会触发下面的代码    alert(err);}</code></pre><h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><h2 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h2><table><thead><tr><th style="text-align:left">事件</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">onClick</td><td style="text-align:left">单击</td></tr><tr><td style="text-align:left">onMouseOver</td><td style="text-align:left">鼠标经过</td></tr><tr><td style="text-align:left">onMouseOut</td><td style="text-align:left">鼠标移出</td></tr><tr><td style="text-align:left">onChange</td><td style="text-align:left">文本内容改变</td></tr><tr><td style="text-align:left">onSelect</td><td style="text-align:left">文本框选中</td></tr><tr><td style="text-align:left">onFocus</td><td style="text-align:left">光标聚集</td></tr><tr><td style="text-align:left">onBlur</td><td style="text-align:left">移开光标</td></tr><tr><td style="text-align:left">onLoad</td><td style="text-align:left">网页加载</td></tr><tr><td style="text-align:left">onUnload</td><td style="text-align:left">网页关闭</td></tr></tbody></table><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>事件<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>    <span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">"stylesheet"</span> type<span class="token operator">=</span><span class="token string">"text/css"</span> href<span class="token operator">=</span><span class="token string">"style.css"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token comment" spellcheck="true">//注意传递的 this</span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"div"</span> onmouseout<span class="token operator">=</span><span class="token string">"onOut(this)"</span> onmouseover<span class="token operator">=</span><span class="token string">"onOver(this)"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>        <span class="token keyword">function</span> <span class="token function">onOver</span><span class="token punctuation">(</span>ooj<span class="token punctuation">)</span><span class="token punctuation">{</span>            ooj<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">function</span> <span class="token function">onOut</span><span class="token punctuation">(</span>ooj<span class="token punctuation">)</span><span class="token punctuation">{</span>            ooj<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"World"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h1><p>网页被加载时，浏览器会创建页面的文档对象模型(Docunment Object Model)</p><h2 id="DOM操作HTML"><a href="#DOM操作HTML" class="headerlink" title="DOM操作HTML"></a>DOM操作HTML</h2><ul><li><p>改变HTML输出流<br>  <code>document.write()</code></p><blockquote><p>注意不要在文档加载完成之后使用，会覆盖文档。</p></blockquote></li><li>寻找元素<ul><li>通过id</li></ul></li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">function</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"pid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>通过标签名ByTagName···</p><p>  返回的是一个数组</p></li><li><p>改变内容</p></li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">function</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"pid"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">"Changed"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>改变属性</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">function</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"aid"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>href<span class="token operator">=</span><span class="token string">"http://oo1.win"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>removeChild() insertBefore()</code>添加删除子节点</li></ul><h2 id="DOM操作CSS"><a href="#DOM操作CSS" class="headerlink" title="DOM操作CSS"></a>DOM操作CSS</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>button onclick<span class="token operator">=</span><span class="token string">"demo()"</span><span class="token operator">></span>按钮<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">function</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"pid"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>background<span class="token operator">=</span><span class="token string">"blue"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="DOM-EventListerner"><a href="#DOM-EventListerner" class="headerlink" title="DOM EventListerner"></a>DOM EventListerner</h2><p>事件句柄</p><ul><li>方法：</li><li><ul><li><p><code>addEventListener()</code></p><p>向指定元素添加事件句柄</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就不需要写一个函数，再从button的属性中更改<code>onclick=&quot;xxx()&quot;</code></p></li></ul></li></ul><blockquote><p>添加多个句柄<strong>不会覆盖</strong></p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    x <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    x<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span>func1<span class="token punctuation">)</span><span class="token punctuation">;</span>    x<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span>func2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><ul><li><code>removeEventListener()</code></li></ul></li></ul><p>移除方法添加的事件句柄</p><p><code>x.removeEventListener(&quot;click&quot;,func2);</code></p><h1 id="事件详解"><a href="#事件详解" class="headerlink" title="事件详解"></a>事件详解</h1><h2 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h2><ul><li><p>事件冒泡</p><p>  由最具体的元素接收，然后逐级冒泡至最不具体的元素的节点。</p></li><li><p>事件捕获</p><p>  由最不具体的.</p></li></ul><h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><ul><li><p>HTML事件处理</p><p>  直接添加到HTML结构中</p></li><li><p>DOM 0级事件处理</p><pre class="line-numbers language-javascript"><code class="language-javascript">  <span class="token keyword">var</span> x <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  btn1<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>xxx<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>这种事件处理<strong>会被覆盖</strong></p></blockquote></li><li><p>DOM 2级事件处理</p><ul><li><p>即<code>addEventListener(&quot;事件名”,“事件处理函数”,“布尔值&quot;);</code><br>true: 事件捕获、<br>false: 事件冒泡</p><p>？？？：缺省值是true还是false？</p></li></ul></li><li><p>IE 事件处理程序</p></li></ul><h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><ol><li><p>事件对象</p><p> 在触发DOM事件的时候都会产生一个对象 </p></li><li><p>事件对象event</p><ol><li>type: 获取事件类型</li><li>target: 获取事件目标</li><li>stopPropagation(): 阻止事件冒泡</li><li>preventDefault(): 阻止事件默认行为</li></ol><ul><li>例子</li></ul></li></ol><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span>showType<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">showtype</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    event<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//阻止事件冒泡 就是上一级不再响应了。比如在button上一级的div中也有一个click点击事件。不阻止就也会执行。</span>    <span class="token comment" spellcheck="true">//阻止事件行为就是啥也不干了。比如a标签不跳转了。</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h1><ol><li>什么是对象：字符串、数组、数值、函数.所有事物都是对象。每个对象都有属性和方法。</li><li>自定义对象</li></ol><ul><li>定义并创建对象实例例子</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    people <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    people<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"xy"</span><span class="token punctuation">;</span>    people<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//或</span>    <span class="token comment" spellcheck="true">//people = {name:"xy",age:"30"};</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"name:"</span><span class="token operator">+</span>people<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">",age:"</span><span class="token operator">+</span>people<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用函数定义对象，然后创建对象实例</li></ul><p>例子</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">function</span> <span class="token function">people</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"name:"</span><span class="token operator">+</span>people<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">",age:"</span><span class="token operator">+</span>people<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="String字符串对象"><a href="#String字符串对象" class="headerlink" title="String字符串对象"></a>String字符串对象</h2><p>方法：</p><ul><li>字符串中查找字符串 <code>indexOf()</code><br>有则返回位置。无则返回-1</li><li>匹配内容 <code>match()</code></li><li>替换内容 <code>replace()</code></li><li>字符串大小写转换 <code>toUpperCase()`</code>toLowerCase()`</li><li>字符串转为数组 <code>strong&gt;split()</code></li></ul><p>剩下的查文档吧。</p><h2 id="Date日期对象"><a href="#Date日期对象" class="headerlink" title="Date日期对象"></a>Date日期对象</h2><ul><li>获取当前Date</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>常用方法<ul><li><code>getFullyear()</code> 获取年份</li><li><code>gettime()</code> 获取毫秒</li><li><code>setFullyear()</code> 设置具体的日期变量赋值</li><li><code>getDay</code> 获取星期</li></ul></li></ul><p>例子</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">starttime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">starttime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> today <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> h <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> m <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> s <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m <span class="token operator">=</span> <span class="token function">checktime</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    s <span class="token operator">=</span> <span class="token function">checktime</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"timetxt"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> h<span class="token operator">+</span><span class="token string">"-"</span><span class="token operator">+</span>m<span class="token operator">+</span><span class="token string">"-"</span><span class="token operator">+</span>s<span class="token punctuation">;</span>    t <span class="token operator">=</span> <span class="token function">settimeout</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">checktime</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>i <span class="token operator">=</span> <span class="token string">"0"</span><span class="token operator">+</span>i<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">starttime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>div id <span class="token operator">=</span> <span class="token string">"timetxt"</span><span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">starttime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>常用方法</p><ul><li><code>a.concat(b)</code> 合并数组a+b</li><li><code>sort()</code> 排序</li><li><code>push()</code> 末尾加元素</li><li><code>reverse()</code> 翻转<br>.<br>降序排列：</li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> b<span class="token operator">-</span>a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>???</strong>这里不太懂为啥sort里传了个函数。</p><blockquote><p>搜到了解答：<br><code>arrayObject.sort(sortby</code>)如果不传参数而默认按Ascii编码字母序排序。否则传入的就是<strong>比较函数</strong>。<br>比较函数应该具有两个参数 a 和 b，其返回值如下：</p></blockquote><blockquote><p>若 a 小于 b，在排序后的数组中 a 应该出现在 b 之前，则返回一个小于 0 的值。<br>若 a 等于 b，则返回 0。<br>若 a 大于 b，则返回一个大于 0 的值。<br>通过调试发现默认情况下，随机参数a b的值总是a比b小。所以a-b是升序。 b-a是降序。</p></blockquote><h2 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h2><p>不多解释了<code>Math.round(四舍五入) Math.random(0-1随机数).max().min().abs()</code></p><h1 id="Js浏览器对象"><a href="#Js浏览器对象" class="headerlink" title="Js浏览器对象"></a>Js浏览器对象</h1><h2 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h2><p><code>window.open(,,)</code><br>可以设置打开的对象，窗口名，大小+位置<br><code>window.close()</code>关闭</p><p>docunment\DOM啥的都是window的对象。可缺省。</p><h2 id="计时器"><a href="#计时器" class="headerlink" title="计时器"></a>计时器</h2><ul><li><code>setInterval()</code> 间隔一定毫秒 不停地执行 指定代码<br><code>clearInterval()</code> 终止</li><li><p><code>settimeout()</code> 暂定一定毫秒后执行指定的代码 (就是延时执行，如果想不停执行还要递归调用。)<br><code>cleantimeout()</code></p><p>例子</p></li></ul><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"btn"</span> onclick<span class="token operator">=</span><span class="token string">"stopTimer()"</span><span class="token operator">></span>停止时间<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span>p id<span class="token operator">=</span><span class="token string">"ptime"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">var</span> mytime <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> t <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"ptime"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> t<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">stopTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">clearInterval</span><span class="token punctuation">(</span>mytime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="History对象、Location对象、Screen对象"><a href="#History对象、Location对象、Screen对象" class="headerlink" title="History对象、Location对象、Screen对象"></a>History对象、Location对象、Screen对象</h2><p>不写了</p><h1 id="插曲"><a href="#插曲" class="headerlink" title="插曲"></a>插曲</h1><p>写这篇文章的时候。竟然一直 hexo g 报错。<br>说是文章内容的错误。</p><p>我整了一晚上没找着哪有问题。</p><p>最后<a href="https://www.aimoon.site" target="_blank" rel="noopener">强哥</a>来给删了个空格就好了。乖乖。</p><p>感谢强哥！</p>]]></content>
      
      
      <categories>
          
          <category> Website </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Problems in studying Python</title>
      <link href="/python/python-xue-xi-yu-dao-de-keng/"/>
      <url>/python/python-xue-xi-yu-dao-de-keng/</url>
      
        <content type="html"><![CDATA[<p>一些杂碎问题不至于写一篇文章了。放在这收集吧。</p><a id="more"></a><h1 id="Spyder使用IPython-Console弹出绘图窗口的设置方法"><a href="#Spyder使用IPython-Console弹出绘图窗口的设置方法" class="headerlink" title="Spyder使用IPython Console弹出绘图窗口的设置方法"></a>Spyder使用IPython Console弹出绘图窗口的设置方法</h1><h1 id="matplotlib-画图show-不显示图"><a href="#matplotlib-画图show-不显示图" class="headerlink" title="matplotlib 画图show()不显示图"></a>matplotlib 画图show()不显示图</h1><ol><li><code>Spyder设置（Cmd + ，）</code>–&gt;<code>IPython Console</code>–&gt;<code>Graphics</code>–&gt;<code>Backend 改成 QT5</code><br><img src="http://p66eruxmw.bkt.clouddn.com/15335471016933.jpg" alt=""></li><li>更改完设置后要新开一个IPython Console才会生效。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>小知识点「技术」</title>
      <link href="/others/ji-zhu-zhi-shi-dian/"/>
      <url>/others/ji-zhu-zhi-shi-dian/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="Shell相关"><a href="#Shell相关" class="headerlink" title="Shell相关"></a>Shell相关</h1><ul><li><p><code>touch xxx.x</code> 新建文件</p></li><li><p><code>ls -a</code>查看隐藏文件包括“.”和“..” <code>-A</code>不包括“.”和“..”目录</p><p><code>-C</code> 按列列出文件</p></li><li><p>清屏: edit菜单里找。Terminal:<code>⌃+⌘+L</code> iTerm:<code>⌘+K</code></p></li><li><p>删除文件：<code>rm -f</code> -f后不会给任何提示。 -i是交互式删除</p><p>删除文件夹 -r</p></li><li><p>查找</p></li></ul><h2 id="自动运行命令脚本"><a href="#自动运行命令脚本" class="headerlink" title="自动运行命令脚本"></a>自动运行命令脚本</h2><p>shell命令写在记事本存成 1.sh</p><p>shell里运行<code>sh 1.sh</code>即可</p><p>关于需要输入密码时的交互：</p><pre class="line-numbers language-shell"><code class="language-shell">ssh tester@192.168.139.218 << EOF #用 <<EOF 分割。这里就是输密码的地方cd kurento/kurento-tutorial-java/kurento-group-callmvn exec:java<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="终端走代理"><a href="#终端走代理" class="headerlink" title="终端走代理"></a>终端走代理</h2><p>参考：<a href="https://blog.fazero.me/2015/09/15/%E8%AE%A9%E7%BB%88%E7%AB%AF%E8%B5%B0%E4%BB%A3%E7%90%86%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/" target="_blank" rel="noopener">让终端走代理的几种方法</a></p><h2 id="Finder和终端快速转"><a href="#Finder和终端快速转" class="headerlink" title="Finder和终端快速转"></a>Finder和终端快速转</h2><ul><li>Finder到终端：拖窗口到终端界面</li><li>终端到Finder：<code>open .</code></li></ul><h1 id="iTerm2"><a href="#iTerm2" class="headerlink" title="iTerm2"></a>iTerm2</h1><h2 id="添加alias"><a href="#添加alias" class="headerlink" title="添加alias"></a>添加alias</h2><p>在 <code>.zshrc</code>这个文件里配置</p><p>注意例子：<code>alias blog=&quot;cd Documents/Hexo&quot;</code></p><p>其中<code>blog=&quot;xxx&quot;</code>等号两边不允许有空格！不然alias会失效。</p><h2 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h2><p>参考文章：<a href="https://www.cnblogs.com/kenz520/p/8259432.html" target="_blank" rel="noopener">https://www.cnblogs.com/kenz520/p/8259432.html</a></p><ul><li><p>iTerm2 -&gt; Make iTerm2 Default Term</p></li><li><p>配色：<a href="http://ethanschoonover.com/solarized" target="_blank" rel="noopener">http://ethanschoonover.com/solarized</a></p></li><li><p>oh_my_zsh：<a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">https://github.com/robbyrussell/oh-my-zsh</a></p><p>装好后配置主题：</p><ul><li>修改<code>~/.zshrc</code>文件的ZSH_THEME=“”属性为”agnoster”</li></ul></li><li><p>字体：</p><p>克隆这个仓库到本地：<a href="https://github.com/powerline/fonts.git" target="_blank" rel="noopener">https://github.com/powerline/fonts.git</a></p><p>运行里面的 <code>install.sh</code> 就装好了</p></li></ul><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><ul><li><p>命令提示与补全</p><ol><li>克隆仓库到本地 ~/.oh-my-zsh/custom/plugins 路径下<br><code>git clone git://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions</code></li><li>用 vim 编辑 .zshrc 文件，找到插件设置命令，默认是 <code>plugins=(git)</code> ，我们把它修改为<code>plugins=(zsh-autosuggestions git)</code></li></ol><p>PS：当你重新打开终端时可能看不到变化，可能你的字体颜色太淡了，我们把其改亮一些：</p><ol><li><code>cd ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions</code></li><li>用 vim 编辑 zsh-autosuggestions.zsh 文件，修改<code>ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE=&#39;fg=10&#39;</code></li></ol></li><li><p>语法高亮效果</p><ol><li>使用homebrew包管理工具安装 zsh-syntax-highlighting 插件<br><code>brew install zsh-syntax-highlighting</code><br>如果电脑上还没有安装homebrew，请先安装homebrew<br><code>/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</code></li><li>配置.zshrc文件，插入一行<br><code>source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</code></li><li>加载.zshrc配置<br><code>source ~/.zshrc</code></li><li>重新打开iTerm2窗口（或新打开一个iTerm2窗口）即可以看到效果</li></ol></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol><li>iTerm2 默认使用bash改用zsh解决方法：<code>chsh -s /bin/zsh</code></li><li>iTerm2 zsh切换回原来的dash：<code>chsh -s /bin/bash</code></li><li>卸载<code>oh my zsh</code>，在命令行输入：<code>uninstall_oh_my_zsh</code></li><li>路径前缀的XX@XX太长，缩短问题：<br>编辑<code>~/.oh-my-zsh/themes/agnoster.zsh-theme</code>主体文件，将里面的<code>build_prompt</code>下的<code>prompt_context</code>字段在前面加<code>#</code>注释掉即可</li></ol><h1 id="Markdown相关"><a href="#Markdown相关" class="headerlink" title="Markdown相关"></a>Markdown相关</h1><h2 id="Markdown-写上标下标"><a href="#Markdown-写上标下标" class="headerlink" title="Markdown 写上标下标"></a>Markdown 写上标下标</h2><ol><li><p>HTML</p><pre><code> &lt;!--利用HTML--&gt; &lt;sub&gt;上标&lt;/sub&gt; &lt;sup&gt;下标&lt;/sup&gt;</code></pre><p> 例如<br> <code>X&lt;sub&gt;1&lt;/sub&gt;</code> ==&gt; X<sub>1</sub><br> <code>Y&lt;sup&gt;2345&lt;/sup&gt;</code> ==&gt;Y<sup>2345</sup></p></li><li><p>MathJax<br>MathJax不仅可以打上下标，还可以打双标。</p><blockquote><p>（1）两个符号$$中间是公式的内容<br>（2）^ 符号后接的字符为上标<br>（3）_ 符号后接的字符为下标<br>（4）如果同时有两个下标，则需要使用{}来将符号括起来 </p></blockquote></li></ol><p>如：<code>$x^p_{ij}$</code> ==&gt; $x^p_{ij}$</p><h1 id="Mac相关"><a href="#Mac相关" class="headerlink" title="Mac相关"></a>Mac相关</h1><h2 id="环境变量问题"><a href="#环境变量问题" class="headerlink" title="环境变量问题"></a>环境变量问题</h2><ol><li>在<code>.bash</code>的文件中加路径<ul><li>zsh则是添加到 <code>.zshrc</code>中 </li></ul></li><li>手动放快捷方式到<code>usr/bin</code>或<code>usr/local/bin</code>目录下</li></ol><blockquote><p>延伸：Mac系统的bash环境变量，加载顺序为：<br>/etc/profile<br>/etc/paths<br>~/.bash_profile<br>~/.bash_login<br>~/.profile<br>~/.bashrc</p></blockquote><p>设置PATH的语法都为：</p><pre class="line-numbers language-shell"><code class="language-shell">#中间用冒号隔开export PATH=$PATH:<PATH 1>:<PATH 2>:<PATH 3>:------:<PATH N><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="显示-隐藏文件"><a href="#显示-隐藏文件" class="headerlink" title="显示/隐藏文件"></a>显示/隐藏文件</h2><p>在Finder：<code>Command+Shift+.</code></p><h2 id="app已损坏-打不开"><a href="#app已损坏-打不开" class="headerlink" title=".app已损坏 打不开"></a>.app已损坏 打不开</h2><p><code>sudo spctl --master-disable</code></p><h2 id="打开macOS原生的NTFS"><a href="#打开macOS原生的NTFS" class="headerlink" title="打开macOS原生的NTFS"></a>打开macOS原生的NTFS</h2><ul><li><p><code>diskutil list</code> 找到你要写入的磁盘名</p></li><li><p><strong>开启读写NTFS：</strong></p><p><code>sudo vim /etc/fstab</code></p><p>在这个fstab文件里加入一句：</p><p><strong><code>LABEL=你的磁盘名字 none ntfs rw,auto,nobrowse</code></strong></p><p> <code>:wq</code>  保存退出</p></li><li><p>重新插入U盘  （此时桌面上看不到了）</p><p> 在Finder里 ⌘+⇧+G 输入 <code>/Volumes</code> </p></li></ul><h2 id="Mac终端下出现bogon的解决办法"><a href="#Mac终端下出现bogon的解决办法" class="headerlink" title="Mac终端下出现bogon的解决办法"></a>Mac终端下出现bogon的解决办法</h2><p><code>sudo scutil --set HostName your-hostname</code></p><h2 id="Mac更改MAC地址（外接网卡）"><a href="#Mac更改MAC地址（外接网卡）" class="headerlink" title="Mac更改MAC地址（外接网卡）"></a>Mac更改MAC地址（外接网卡）</h2><p><code>sudo ifconfig en9 ether aa:bb:cc:dd:ee</code></p><p>但是我外接了Type-C转网线的口，找到对应的也是en9，命令运行后，再用<code>ifconfig</code>看发现mac地址并没有更改成功。<br>在网上又搜了搜，原来需要<strong>装驱动</strong>。<br>这篇文章对这个问题写得相当明白了：<a href="https://blog.csdn.net/u014051620/article/details/75050934" target="_blank" rel="noopener">https://blog.csdn.net/u014051620/article/details/75050934</a></p><h2 id="10-14以后Safari装扩展"><a href="#10-14以后Safari装扩展" class="headerlink" title="10.14以后Safari装扩展"></a>10.14以后Safari装扩展</h2><p>cd到有 <code>.safariextz</code>文件的目录。</p><p>执行<code>xar -xf 拓展名.safariextz</code> 就可以解包</p><p>然后添加扩展，运行即可。详细教程：<a href="https://sspai.com/post/47303" target="_blank" rel="noopener">https://sspai.com/post/47303</a></p><h1 id="Sublime相关"><a href="#Sublime相关" class="headerlink" title="Sublime相关"></a>Sublime相关</h1><p>这几个问题怕是用过sublime的都解决过吧~记录一下防止下次碰到再百度了。</p><!--more--><h2 id="加入subl命令"><a href="#加入subl命令" class="headerlink" title="加入subl命令"></a>加入subl命令</h2><p><code>sudo ln -s &#39;/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl&#39; /usr/local/bin/subl&#39;</code></p><h2 id="Sublime3屏蔽更新"><a href="#Sublime3屏蔽更新" class="headerlink" title="Sublime3屏蔽更新"></a>Sublime3屏蔽更新</h2><p><code>&quot;update_check&quot;: false,</code></p><!---more---><ol><li><p> Setting-User里添加<code>&quot;update_check&quot;: false,</code><br> <strong>一定要带，</strong><br> <strong>一定要带，</strong><br> <strong>一定要带，</strong></p></li><li><p> 再从网上找个能用的序列号：</p></li></ol><p>—– BEGIN LICENSE —–<br>sgbteam<br>Single User License<br>EA7E-1153259<br>8891CBB9 F1513E4F 1A3405C1 A865D53F<br>115F202E 7B91AB2D 0D2A40ED 352B269B<br>76E84F0B CD69BFC7 59F2DFEF E267328F<br>215652A3 E88F9D8F 4C38E3BA 5B2DAAE4<br>969624E7 DC9CD4D5 717FB40C 1B9738CF<br>20B3C4F1 E917B5B3 87C38D9C ACCE7DD8<br>5F7EF854 86B9743C FADC04AA FB0DA5C0<br>F913BE58 42FEA319 F954EFDD AE881E0B<br>—— END LICENSE ——</p><p>2017.7.1可用</p><h2 id="中文乱码问题"><a href="#中文乱码问题" class="headerlink" title="中文乱码问题"></a>中文乱码问题</h2><p>安装<code>ConvertToUtf8</code>和<code>GBK</code>两个包</p><h2 id="支持C-11"><a href="#支持C-11" class="headerlink" title="支持C++11"></a>支持C++11</h2><p>tools–&gt;new build sys</p><p>输入：</p><pre><code>{    &quot;cmd&quot;: [&quot;bash&quot;, &quot;-c&quot;, &quot;g++ &#39;${file}&#39; -std=c++11 -stdlib=libc++ -o &#39;${file_path}/${file_base_name}&#39;&quot;],    &quot;file_regex&quot;: &quot;^(..{FNXX==XXFN}*):([0-9]+):?([0-9]+)?:? (.*)$&quot;,    &quot;working_dir&quot;: &quot;${file_path}&quot;,    &quot;selector&quot;: &quot;source.c, source.c++&quot;,    &quot;variants&quot;:    [        {        &quot;name&quot;: &quot;Run&quot;,        &quot;cmd&quot;: [&quot;bash&quot;, &quot;-c&quot;, &quot;g++ &#39;${file}&#39; -std=c++11 -stdlib=libc++ -o &#39;${file_path}/${file_base_name}&#39; &amp;&amp; open -a Terminal.app &#39;${file_path}/${file_base_name}&#39;&quot;]        }    ]}</code></pre><p>保存的时候注意后缀不要改，是<code>.sublime-build</code></p><p>如果想调用iTerm2把里面的<code>Terminal.app</code>换成<code>iTerm.app</code>就行了。</p><p>换成iTerm之后程序执行完iTerm会自己关闭窗口，需要在设置里修改一下默认配置文件：</p><p><img src="http://p66eruxmw.bkt.clouddn.com/20180904153603023933676.png" alt="20180904153603023933676.png"></p><h1 id="Heroku"><a href="#Heroku" class="headerlink" title="Heroku"></a>Heroku</h1><h2 id="连接PGSQL"><a href="#连接PGSQL" class="headerlink" title="连接PGSQL"></a>连接PGSQL</h2><p>想给紫玉搭一个Typecho的博客，结果得用pgsql的数据库。</p><ol><li>添加环境扩展：<a href="https://elements.heroku.com/addons/heroku-postgresql" target="_blank" rel="noopener">https://elements.heroku.com/addons/heroku-postgresql</a></li><li>添加好后点Setting可以看到数据库名啥的，正常配置即可</li></ol>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tips </tag>
            
            <tag> Heroku </tag>
            
            <tag> Shell </tag>
            
            <tag> iTerm2 </tag>
            
            <tag> Markdown </tag>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>小知识点「理论」</title>
      <link href="/others/li-lun-zhi-shi-dian/"/>
      <url>/others/li-lun-zhi-shi-dian/</url>
      
        <content type="html"><![CDATA[<p>乱七八糟的东西。都是看博文啥的不懂现搜的~</p><a id="more"></a><h1 id="名词相关"><a href="#名词相关" class="headerlink" title="名词相关"></a>名词相关</h1><h2 id="RESTful"><a href="#RESTful" class="headerlink" title="RESTful"></a>RESTful</h2><p><a href="http://www.cnblogs.com/wang-yaz/p/9237981.html" target="_blank" rel="noopener">http://www.cnblogs.com/wang-yaz/p/9237981.html</a></p><h2 id="i18n"><a href="#i18n" class="headerlink" title="i18n"></a>i18n</h2><p>i18n（其来源是英文单词 internationalization的首末字符i和n，18为中间的字符数）是“国际化”的简称。在资讯领域，国际化(i18n)指让产品（出版物，软件，硬件等）无需做大的改变就能够适应不同的语言和地区的需要。对程序来说，在不修改内部代码的情况下，能根据不同语言及地区显示相应的界面。 在全球化的时代，国际化尤为重要，因为产品的潜在用户可能来自世界的各个角落。通常与i18n相关的还有L10n（“本地化”的简称）。</p><h2 id="GP-Generic-Programming"><a href="#GP-Generic-Programming" class="headerlink" title="GP(Generic Programming)"></a>GP(Generic Programming)</h2><p>泛型编程。Generic programming is a style of computer programming in which algorithms are written in terms of types to-be-specified-later that are then instantiated when needed for specific types provided as parameters.</p><h2 id="SGI-STL"><a href="#SGI-STL" class="headerlink" title="SGI STL"></a>SGI STL</h2><p>先介绍下 <strong>GNU STL</strong></p><blockquote><p>这是GCC带的STL实现，包含在libstdc++这个库里面，写C++一旦用到库函数是基本会链接这个库。GNU STL是在SGI的STL基础上开发的，所以SGI STL我就不再单独列出了。</p><p>— 简书看到的一段</p></blockquote><p>其中 SGI 就是 Silicon Graphics Computer Systems, Inc. 一个公司。</p><h2 id="GNU"><a href="#GNU" class="headerlink" title="GNU"></a>GNU</h2><p><a href="https://zh.wikipedia.org/wiki/GNU" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/GNU</a></p><p><em>GNU</em>的开发始于1983年，它是自由的类Unix操作系统，这使得计算机用户拥有了分享和改进其所用软件的自由。</p><h2 id="POSIX"><a href="#POSIX" class="headerlink" title="POSIX"></a>POSIX</h2><p><strong>可移植操作系统接口</strong>（英语：Portable Operating System Interface，缩写为<strong>POSIX</strong>）是<a href="https://zh.wikipedia.org/wiki/IEEE" target="_blank" rel="noopener">IEEE</a>为要在各种<a href="https://zh.wikipedia.org/wiki/UNIX" target="_blank" rel="noopener">UNIX</a><a href="https://zh.wikipedia.org/wiki/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F" target="_blank" rel="noopener">操作系统</a>上运行软件，而定义<a href="https://zh.wikipedia.org/wiki/API" target="_blank" rel="noopener">API</a>的一系列互相关联的标准的总称，其正式称呼为IEEE Std 1003，而国际标准名称为<a href="https://zh.wikipedia.org/wiki/ISO" target="_blank" rel="noopener">ISO</a>/<a href="https://zh.wikipedia.org/wiki/IEC" target="_blank" rel="noopener">IEC</a> 9945。此标准源于一个大约开始于1985年的项目。POSIX这个名称是由<a href="https://zh.wikipedia.org/wiki/%E7%90%86%E6%9F%A5%E5%BE%B7%C2%B7%E6%96%AF%E6%89%98%E6%9B%BC" target="_blank" rel="noopener">理查德·斯托曼</a>（RMS）应IEEE的要求而提议的一个易于记忆的名称。它基本上是Portable Operating System Interface（可移植操作系统接口）的缩写，而<strong>X</strong>则表明其对Unix API的传承。</p><p><a href="https://zh.wikipedia.org/wiki/Linux" target="_blank" rel="noopener">Linux</a>基本上逐步实现了POSIX兼容，但并没有参加正式的POSIX认证。<a href="https://zh.wikipedia.org/wiki/%E5%8F%AF%E7%A7%BB%E6%A4%8D%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%8E%A5%E5%8F%A3#cite_note-1" target="_blank" rel="noopener">[1]</a></p><p><a href="https://zh.wikipedia.org/wiki/%E5%BE%AE%E8%BD%AF" target="_blank" rel="noopener">微软</a>的<a href="https://zh.wikipedia.org/wiki/Windows_NT" target="_blank" rel="noopener">Windows NT</a>声称部分实现了POSIX标准。</p><p>当前的POSIX主要分为四个部分<a href="https://zh.wikipedia.org/wiki/%E5%8F%AF%E7%A7%BB%E6%A4%8D%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%8E%A5%E5%8F%A3#cite_note-2" target="_blank" rel="noopener">[2]</a>：Base Definitions、System Interfaces、Shell and Utilities和Rationale。</p><h2 id="VoIP-SIP"><a href="#VoIP-SIP" class="headerlink" title="VoIP  SIP"></a>VoIP  SIP</h2><p>Voice over Internet Protocol 和 Session Initiation Protocol</p><h1 id="二进制包和源代码安装的差距"><a href="#二进制包和源代码安装的差距" class="headerlink" title="二进制包和源代码安装的差距"></a>二进制包和源代码安装的差距</h1><p>源代码方式和二进制包是软件包的两种形式。二进制包里面包括了已经经过编译，可以马上运行的程 序。你只需要下载和解包（安装）它们以后，就马上可以使用。源代码包里面包括了程序原始的程序代码，需要在你的计算机上进行编译以后才可以产生可以运行程 序,所以从源代码安装的时间会比较长。  </p><p>source code 是程序員寫的碼， binary code 是機器跑的碼。</p><p>source code 得經過 compile 才能成為 binary code。</p><p>RPM 有分兩種：binary rpm 跟 source rpm。前者是編好的 binary，安裝就可用。  後者是還沒編好的 source ，需 rebuild 之後才能安裝。  </p><p>rpm格式很好区分，二进制格式的包名字很长，都带有版本号、适应平台、适应的硬件类型等，而源码格式仅仅就是一个版本号的tar包。 </p><p>mysql-5.0.45.tar.gz 是 源码包    </p><p>像这样的 mysql-5.0.45-linux-x86_64-glibc23.tar.gz   是二进制包  </p><p>如果你用过压缩工具就会明白，压缩包未必就是软件，它也可能是备份的许多图片，也可能是打包在一起的普通资料，要分辨它到底是什么最好的办法就是查看包里的文件清单，使用命令tar ztvf  <em> . 或者  tar ytvf  </em>.bz2   *</p><p><em>源代码包里的文件往往会含有种种源代码文件，头文件</em>.h、c代码源文件<em>.c、C++代码源文件</em>.cc/*.cpp等；而二进制包里的文件则会有可执行文件（与软件同名的往往是主执行文件），标志是其所在路径含有名为bin的目录（仅有少数例外）</p>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>蚁群算法求解TSP-Matlab版</title>
      <link href="/algorithm/yi-qun-suan-fa-qiu-jie-tsp/"/>
      <url>/algorithm/yi-qun-suan-fa-qiu-jie-tsp/</url>
      
        <content type="html"><![CDATA[<p>蚁群算法的作业，本来想用C写的。感觉就是：</p><blockquote><p>是我实力不行。🙈<br>MATLAB写这个确实好写。😌</p></blockquote><a id="more"></a><h1 id="C菜🐦的挫败"><a href="#C菜🐦的挫败" class="headerlink" title="C菜🐦的挫败"></a>C菜🐦的挫败</h1><p>先简单介绍下GDB这个东西，Mac下写C神器。没了解过的拿着下面两句就可以先起飞了。</p><pre class="line-numbers language-shell"><code class="language-shell">gcc hello.c -o hello  #这样就把hello.c编译成了hello的可执行文件./ hello #这就输出了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>【事实是半小时后放弃用C】</p><p>那么就MATLAB走起</p><h1 id="MATLAB版-蚁群算法求解TSP"><a href="#MATLAB版-蚁群算法求解TSP" class="headerlink" title="MATLAB版-蚁群算法求解TSP"></a>MATLAB版-蚁群算法求解TSP</h1><p>算法主要过程：</p><pre class="line-numbers language-Matlab"><code class="language-Matlab"> while NC<=NC_max        %--- Start ---        % 随机放置蚂蚁        Tabu=initTabu(n,m);        % 蚂蚁跑完一圈        Tabu=selectNextCity(Tabu,Tau,R_best,n,m,Alpha,Beta,Eta,NC);        % 寻找路径        [L_best,R_best,L,R]=findBestPath(Tabu,L_best,R_best,D,n,m,NC);        %=== End1Time ===        NC=NC+1;        % 更新Tau        Tau=updateTau(Tabu,Tau,L,Q,n,m,Rho);        % 重置Tabu        Tabu=zeros(m,n); end                    %--- End ---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自定义参数下求解出的最优路径"><a href="#自定义参数下求解出的最优路径" class="headerlink" title="自定义参数下求解出的最优路径"></a>自定义参数下求解出的最优路径</h2><p><img src="http://p66eruxmw.bkt.clouddn.com/15284289629541.jpg" alt=""></p><h1 id="参数影响"><a href="#参数影响" class="headerlink" title="参数影响"></a>参数影响</h1><h2 id="蚂蚁数m对性能的影响"><a href="#蚂蚁数m对性能的影响" class="headerlink" title="蚂蚁数m对性能的影响"></a>蚂蚁数m对性能的影响</h2><p><img src="http://p66eruxmw.bkt.clouddn.com/15284295238328.jpg" alt=""></p><blockquote><p>从图上可以看出，蚂蚁数m越大算法收敛越快。</p><p>蚂蚁数较少时，虽然开始几代没有找到最优解，但经过几次迭代还是收敛到了相同的结果。</p></blockquote><h2 id="信息素重要程度Alpha对性能的影响"><a href="#信息素重要程度Alpha对性能的影响" class="headerlink" title="信息素重要程度Alpha对性能的影响"></a>信息素重要程度Alpha对性能的影响</h2><p>Alpha分别取的是 [0,0.5,1,2,5]<br><img src="http://p66eruxmw.bkt.clouddn.com/15282602841547.jpg" alt=""></p><blockquote><p>从图上可以看出Alpha在1和2的时候性能最好。<br>当Alpha=0时，并没有得到最优解。此时是贪心算法。<br>当Alpha=5时，效果更差。信息素影响大导致算法过早收敛。<br>当Alpha=0.5时，需要经过较多的代数才能收敛。</p></blockquote><h2 id="启发因子重要程度Beta对性能的影响"><a href="#启发因子重要程度Beta对性能的影响" class="headerlink" title="启发因子重要程度Beta对性能的影响"></a>启发因子重要程度Beta对性能的影响</h2><p><img src="http://p66eruxmw.bkt.clouddn.com/15282645013553.jpg" alt=""></p><blockquote><p>如图所示，Beta=5时求得的最短路径最小同时收敛速度也最快。</p><p>Beta为1时需要经过较多的代数才能收敛。</p><p>Beta为2、3时效果一般。而且都不一定能收敛到最优解。</p><p>Beta为0时则结果较差。因为此时没有随机选择，容易陷入局部最优。</p></blockquote><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p><a href="http://oo1.win/Hw.zip" target="_blank" rel="noopener">下载</a></p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Matlab </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《移动安全与测评》Report</title>
      <link href="/others/yi-dong-an-quan-yu-ce-ping-report/"/>
      <url>/others/yi-dong-an-quan-yu-ce-ping-report/</url>
      
        <content type="html"><![CDATA[<p>只想双击666~</p><a id="more"></a><p>《移动安全与测评》报告</p><p>很喜欢移动开发，然后选了移动安全与测评这门课。课上学到很多移动安全的知识、思想。由于我对安卓开发没经验，也不是学安全专业的，对那个渗透测试的作业只能望而却步了。自己学了点iOS开发的皮毛，所以这篇读书报告还是主要谈谈iOS方面的。</p><hr><p>最早接触iOS是在高中的时候，iOS 4。那时候越狱用的是什么红雪绿毒，还得手动进DFU，比起现在的一键越狱工具真费事。当时去越狱的初衷就是越狱后可以下载商店里收费的游戏。记得高中同学用的智能机最多的也就是诺基亚，塞班s60 v3,v5的，然后刚接触这种“多点触控”的游戏，感觉好酷炫。后来越狱后发现，原来越狱了还能装插件，还能改系统文件。当时感觉最有用的插件是第三方输入法、手势。现在随着iOS版本的升级，很多越狱插件都用不到了。都被吸收到了[真·iOS]上哈哈。甚至我感觉很多安卓Rom的功能都是抄的Cydia插件，特别是魅族。Flyme的很多“独创”功能都是我多年前就在Cydia插件里体验过的（不过Flyme依旧是我用起来最舒服的安卓系统）记得Cydia的商店是先于苹果官方的App store出现的，也正是Cydia商店的高手们刺激着iOS一步步地强大。</p><p>我现在手上的一部iPhone 6s系统是10.0.2，越狱后仅仅装了这几个插件：</p><ul><li><strong>KuaiDial</strong>：通话插件。T9搜联系人，通话震动。感觉iOS早该做这些功能了。</li><li><strong>QuickDo</strong>：手势+自定义控制中心。</li><li><strong>Anywhere</strong>：自定义定位和机型。</li><li><strong>Flex 3</strong>：改软件包的。</li><li><strong>NFCWriter</strong>：模拟NFC的。测试能刷宿舍门禁，消费是不可能了。</li></ul><p>抛开安全问题不说，尽管现在的iOS功能已经完善，但给我一部不能越狱的iPhone我用起来还是不习惯的，我觉得很多实用功能习惯是有依懒性的。</p><hr><p>然后谈谈iOS开发方面吧。谈到iOS开发肯定是OC。不过对于OC我还真是一窍不通。2014年 Swift出世，带着对iOS的那么点兴趣，我学了Swift，皮毛中的皮毛。大项目也没做过，就是跟着网上教程学学啥的。<br>无论是通过课上老师讲的，还是自己使用的感受，那就是iOS比安卓还是安全很多。iOS上次做第一次作业的时候提到过，在GitHub上找到一个项目，号称是可以<strong>收集到系统后台运行的其它App</strong>，但运行后发现没有什么效果。就继续搜，发现从iOS9以后就被封掉了。然后我就开了个iOS8的模拟器，还是不行。一定是编译的时候就不好使了。这就是iOS从开发者角度考虑安全问题的一个策略：在开发iOS高版本的App时，你就要更新你的编译器Xcode。<br>比如<strong>iOS12要出了，你不更新你的XCode你就不能适配iOS12</strong>。你更新了Xcode也就意味着很多漏洞从你开发者手里就被修复掉了。你就算写出了代码编译了也没效果。再进一步讲，就算你写出来有效果的代码，<strong>都上架不了商店啊！！！</strong>当时写那个作业1查到一个人写了个方法可以获取本机手机号，但是后面的回帖全部都是，上架直接被打回来。<br>对开发者强制开发工具更新，上架商店严格审核，我认为这种开发的机制也是iOS这个系统更安全的一个很重要的原因吧！</p><hr><p>然后对比下iOS和安卓系统使用上很多安全细节：</p><ul><li>权限申请要询问用户。安卓现在也有，算是相互学习吧。<ul><li>悬浮窗权限。不得不说下悬浮窗的权限，安卓开发这个权限让很多App方便、好用。但也带来了巨大的安全问题。毕竟只要你给了App这个权限，人家就可以透明地运行了啊。</li><li>锁屏。安卓可以激活设备管理器然后让App接管锁屏，使坏的再配合上面的悬浮窗权限让用户点啥都点不了。当然具体的我也不懂只是看过一些文章分析的。</li><li>反正以上两个权限iOS都没有。个人认为这种权限也太“底层”</li></ul></li><li>Scheme跳转询问。好像安卓也有了。就是问你xx想打开xx，允许吗？iOS中只要不是系统级App都要询问的。</li><li>后台、通知机制。虽然安卓这方面也在整改，但路还很远啊。</li><li>商店。</li></ul><hr><p>突然想起前几天同学打电话告诉我，千万别用越狱擦除工具，因为他在闲鱼上想卖掉他的iPhone 6s，然后对方就是因为他的系统是可越狱版本才买的。但我同学卖的时候就想，我先用擦除一下越狱，抹掉本机内容后，再重新越一下寄给买家（如果是我也会这么干的）。但是问题就出现了。擦除越狱的工具有很多，比如Cydia的插件 Cydia Eraser还有桌面工具Cydia Impactor，他是用的插件，以前我用过都没有问题的。但是问题出现在抹掉之后，由于系统是iOS 9，竟然不能激活~必须让你升到11才能激活。我在网上查了下很多网友也说iOS 9系统的iPhone6s只要是还原以后都不能激活了，这就很不讲道理了。但这也从iOS版本验证的角度上限制了你必须升级iOS版本，我认为这就是Apple公司对安全最严格的规范。虽然很多用户在抱怨升级后卡顿，但其实没有什么东西比安全两个字更重要！</p><p>希望安卓和iOS能继续努力相互学习，给用户打造更安全更好用的系统环境！</p>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>服务器跑selenium监控课余量选课</title>
      <link href="/python/jian-kong-ke-yu-liang-xuan-ke/"/>
      <url>/python/jian-kong-ke-yu-liang-xuan-ke/</url>
      
        <content type="html"><![CDATA[<p>紫玉说课没选上，我就想写个脚本挂着看有没有退呗~</p><a id="more"></a><h1 id="初探"><a href="#初探" class="headerlink" title="初探"></a>初探</h1><p>经过同学的推荐使用了selenium。做自动化测试很好啊，解决chekbox分分钟。开始啦~</p><p>上来就遇到问题了。要把<code>geckodriver</code>这个东西放到环境变量里。<br>最后选择手动配置路径：<br><code>dr = webdriver.Firefox(executable_path = &#39;/Users/lixs/anaconda3/geckodriver&#39;)</code><br>虽然麻烦点，但是着急往下写。我们继续~</p><p>先试试用Cookie登录</p><pre class="line-numbers language-Python"><code class="language-Python">driver.get('http://jwxk.ucas.ac.cn/courseManage/selectCourse?s=473bcdb8-8d5d-40af-9087-5071b63ff7a8')#将用户名密码写入浏览器cookie中driver.add_cookie({'name':'username','value':'chinalixs@qq.com'})driver.add_cookie({'name':'pwd','value':'Jwsyb9503'})#再次访问网站，将会自动登录driver.get('http://jwxk.ucas.ac.cn/courseManage/')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不行，提示会话过期。先不用Cookie了以后再回来研究~自动填表吧~</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># login</span>input <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_name<span class="token punctuation">(</span><span class="token string">'userName'</span><span class="token punctuation">)</span>input<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">'NAME'</span><span class="token punctuation">)</span>input <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_name<span class="token punctuation">(</span><span class="token string">'pwd'</span><span class="token punctuation">)</span>input<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">'123456'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#点击登录</span>sb <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_name<span class="token punctuation">(</span><span class="token string">'sb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后选课找课都是一个模子的。只能说这个selenium很给力~</p><hr><h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><ul><li><p>嵌套找xpath:<br><code>driver.find_element_by_xpath(&#39;//form[@id=&quot;regfrm2&quot;]//button[@name=&quot;sb&quot;]&#39;).click()</code></p></li><li><p>time包 sleep(3) 等3秒做自动化测试很好用</p></li><li>处理弹窗：</li></ul><pre class="line-numbers language-python"><code class="language-python">al <span class="token operator">=</span> driver<span class="token punctuation">.</span>switch_to_alert<span class="token punctuation">(</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>al<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>判断是否选上了<code>driver.find_element_by_xpath(&#39;//input[@value=&quot;65A7F68B98BB6FB9&quot;]&#39;).is_selected()</code></li></ul><hr><h1 id="实战本地跑"><a href="#实战本地跑" class="headerlink" title="实战本地跑"></a>实战本地跑</h1><p>截止到目前还是没选上的，因为没人退课啊。不过学到了selenium这个包。</p><p>具体思路就是监测那门课的 chekbox 前面的 √ 是否打上了，打不上就刷新，因为有了课余量那个 √ 是可以打上的，然后就一直刷新。<br>之前也是程序跑个20次左右就会报错，可能是请求太多了。然后刚好上次学到了 try/except ，哎呦不错哦。</p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><pre class="line-numbers language-Python"><code class="language-Python">from selenium import webdriverimport timedriver = webdriver.Firefox(executable_path = '/Users/lixs/anaconda3/geckodriver')driver.get('http://sep.ucas.ac.cn')# logininput = driver.find_element_by_name('userName')input.send_keys('chinalixs@qq.com')input = driver.find_element_by_name('pwd')input.send_keys('Jwsyb9503')sb = driver.find_element_by_name('sb').click()# 打开选课系统from selenium import webdriverimport timedriver = webdriver.Firefox(executable_path = '/Users/lixs/anaconda3/geckodriver')driver.get('http://sep.ucas.ac.cn')# logininput = driver.find_element_by_name('userName')input.send_keys('chinalixs@qq.com')input = driver.find_element_by_name('pwd')input.send_keys('Jwsyb9503')sb = driver.find_element_by_name('sb').click()# 打开选课系统driver.find_element_by_xpath('//a[@href="/portal/site/226/821"]').click()# 点击选课driver.get('http://jwxk.ucas.ac.cn/courseManage/main')#选学院driver.find_element_by_id('id_913').click()driver.find_element_by_xpath('//form[@id="regfrm2"]//button[@name="sb"]').click()#选课i = 1def xuanke(i):    if i%100==0:    #每当i跑100次就返回一下防止内存爆炸        return    try:        driver.find_element_by_xpath('//input[@value="65A7F68B98BB6FB9"]').click()        if driver.find_element_by_xpath('//input[@value="65A7F68B98BB6FB9"]').is_selected():            print('选上啦！！！')            return        else:            print(i,'次没选上继续')            i += 1            #刷新一下            driver.refresh()            al = driver.switch_to_alert()            al.accept()            xuanke(i)    except:        print('---------------ERROR---------------------')        xuanke(i)for a in range(10000):    xuanke(i)#提交sb = driver.find_element_by_xpath('//button[@type="submit"]').click()#弹出一个提示，选确定sb = driver.find_element_by_xpath('//button[@value="ok"]').click()print('OVER')driver.close()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="代码历史："><a href="#代码历史：" class="headerlink" title="代码历史："></a>代码历史：</h2><ul><li><strong>1.0版本</strong> 开始选课函数是 xuanke()<br>后来我想引入一个统计变量看跑了多少次。就在函数外设了个变量。结果很低级的错误就出现了，函数定义怎么能改全局变量i呢。真的天真</li><li><strong>2.0版本</strong> xuanke(i) 传入i。<br>统计可以了，新问题也就出现了。老版的 xuanke(i) 里每跑2k次左右，就会内存爆炸，于是</li><li><strong>3.0版本</strong> 每i==100就return一次。</li></ul><h1 id="服务器跑"><a href="#服务器跑" class="headerlink" title="服务器跑"></a>服务器跑</h1><p>频繁地去刷新网页，跑了一会儿课没选上，我16g的mac内存占用100%，开始发热了。于是服务器跑的思想直接就冒了出来~</p><p>刚好看到这篇文章：《<a href="https://www.cnblogs.com/bestruggle/p/8080983.html" target="_blank" rel="noopener">liunx centos7无GUI服务器跑Selenium部署说明》</a></p><h2 id="安装chrome"><a href="#安装chrome" class="headerlink" title="安装chrome"></a>安装chrome</h2><ol><li><p>添加chrome的repo源</p><pre><code>  vi /etc/yum.repos.d/google.repo [google]name=Google-x86_64baseurl=http://dl.google.com/linux/rpm/stable/x86_64enabled=1gpgcheck=0gpgkey=https://dl-ssl.google.com/linux/linux_signing_key.pub</code></pre></li><li>安装<br><code>yum update</code> , 然后<code>yum install google-chrome-stable</code></li></ol><p><strong>注意</strong>：google-chrome一定一定不要用root用户去运行</p><h2 id="安装chromedrive"><a href="#安装chromedrive" class="headerlink" title="安装chromedrive"></a>安装chromedrive</h2><p>从<a href="https://sites.google.com/a/chromium.org/chromedriver/home" target="_blank" rel="noopener">https://sites.google.com/a/chromium.org/chromedriver/home</a> 下载 chromedriver</p><p>配置在PATH路径或者在脚本中指定路径  </p><pre><code>wget -N http://chromedriver.storage.googleapis.com/2.29/chromedriver_linux64.zip unzip chromedriver_linux64.zipchmod +x chromedriversudo mv -f chromedriver /usr/local/share/chromedriversudo ln -s /usr/local/share/chromedriver /usr/local/bin/chromedriversudo ln -s /usr/local/share/chromedriver /usr/bin/chromedriver</code></pre><h2 id="安装Xvfb"><a href="#安装Xvfb" class="headerlink" title="安装Xvfb"></a>安装Xvfb</h2><p>无GUI时，Xvfb为虚拟GUI</p><pre class="line-numbers language-shell"><code class="language-shell">yum updateyum install Xvfbyum -install libXfontyum install xorg-x11-fonts*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装selenium、pyvirtualdisplay"><a href="#安装selenium、pyvirtualdisplay" class="headerlink" title="安装selenium、pyvirtualdisplay"></a>安装selenium、pyvirtualdisplay</h2><p>pip install selenium</p><p>pip install pyvirtualdisplay</p><p>5.写个小demo测试下效果</p><p> vim test.py</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> pyvirtualdisplay <span class="token keyword">import</span> Display　　display <span class="token operator">=</span> Display<span class="token punctuation">(</span>visible<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">,</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">)</span>display<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token string">"./chromedriver"</span><span class="token punctuation">)</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">)</span><span class="token keyword">print</span> driver<span class="token punctuation">.</span>page_sourcedriver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span>display<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>python test.py</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Demo </tag>
            
            <tag> Python </tag>
            
            <tag> Spider </tag>
            
            <tag> selenium </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>爬一个520礼物给紫玉</title>
      <link href="/python/pa-yi-ge-520-li-wu-gei-zi-yu/"/>
      <url>/python/pa-yi-ge-520-li-wu-gei-zi-yu/</url>
      
        <content type="html"><![CDATA[<p>520送点啥呢。有Python不慌~哈哈<br>我们来试着找一辆5月20号13点14的列车吧~</p><a id="more"></a><h1 id="从分析到实践"><a href="#从分析到实践" class="headerlink" title="从分析到实践"></a>从分析到实践</h1><h2 id="初探"><a href="#初探" class="headerlink" title="初探"></a>初探</h2><p>百度了下列车时刻表，有个ip138，就爬它啦🤭。先读一下第一页的内容：<br>这网站太老了。竟然不是UTF-8编码的。<br>解码：<br>使用urlopen：<br><code>html = urlopen(url).read().decode(&#39;GB2312&#39;)</code></p><p>使用Requests：<br><code>r.encode(&#39;ISO-8859-1&#39;).decode(&#39;GB2312&#39;)</code></p><p>OK，可以愉快地玩耍啦。</p><h2 id="循环读全部列车数据"><a href="#循环读全部列车数据" class="headerlink" title="循环读全部列车数据"></a>循环读全部列车数据</h2><p>先从第一页入口读到每个省的数据，根据a标签的href属性很容易发现他们都是/train开头的，正则搞定：<br><code>province = soup.find_all(&#39;a&#39;,{&quot;href&quot;:re.compile(&quot;/train/&quot;)})</code><br><img src="http://p66eruxmw.bkt.clouddn.com/15266465313941.jpg" alt=""></p><p>然后一个循环开始爬这个省的城市，这里的a标签都是以省份的拼音开头的，就是我们上一步的标签i[‘href’]：<br><code>city = soup.find_all(&#39;a&#39;,{&quot;href&quot;:re.compile(i[&#39;href&#39;])})</code><br>太多了不上图了。开始读每个城市的列车咯。</p><p>由于时刻表被存在了<table>里，所以先用<tr>把每一行跟分开。<br>然后从tr里用正则找内容是 13:14 的td：<br><code>p=re.compile(r&#39;13:14&#39;)</code><br><code>if p.search(str(i)):</code></tr></table></p><p>这时候发现，并不是所有的13:14都是发车的时间，根据表格内容，第4是发车的时间。我们就把筛出来的数据，split后再判断一下是不是第六列内容是 13:14 ，如果是再append到answer列表：</p><pre class="line-numbers language-Python"><code class="language-Python">if i.text.split()[3] == '13:14':    answer.append(i.text)`<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>至此所有的代码基本就完成了，可运行起来出了个问题，就是循环队列的网页太多，超时了整个循环都会停止，而且爬了一段时候后一直返回HTTP-Err。<br>请教下同学，写了个Try的函数：</p><h2 id="防止HTTP超时"><a href="#防止HTTP超时" class="headerlink" title="防止HTTP超时"></a>防止HTTP超时</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    result<span class="token operator">=</span><span class="token string">''</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> urlopen<span class="token punctuation">(</span>url<span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> fun<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样，如果超时就会print一个error而且一直递归下去，循环也不会break了。爬网页必备啊~</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> urlopen<span class="token keyword">import</span> re<span class="token comment" spellcheck="true">#import webbrowser</span>base_url <span class="token operator">=</span> <span class="token string">"http://qq.ip138.com"</span>city <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"train/"</span><span class="token punctuation">]</span>answer<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#his = his.encode('uft-8')</span>    <span class="token comment" spellcheck="true">#url = base_url + his[-1]</span>html <span class="token operator">=</span> urlopen<span class="token punctuation">(</span><span class="token string">"http://qq.ip138.com/train"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'GB2312'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#print(html)</span><span class="token comment" spellcheck="true">#webbrowser.open(url)</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span>features<span class="token operator">=</span><span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#print(soup.find('a').get_text(),'\n后缀：',city[0])</span><span class="token comment" spellcheck="true">#找到 属性href是/train/开头 的 a标签</span>province <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"href"</span><span class="token punctuation">:</span>re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">"/train/"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    result<span class="token operator">=</span><span class="token string">''</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> urlopen<span class="token punctuation">(</span>url<span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> fun<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span class="token keyword">print</span><span class="token punctuation">(</span>province<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> province<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token string">'href'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    url <span class="token operator">=</span> base_url<span class="token operator">+</span>i<span class="token punctuation">[</span><span class="token string">'href'</span><span class="token punctuation">]</span>    html <span class="token operator">=</span> fun<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span>features<span class="token operator">=</span><span class="token string">'lxml'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#读每个省里的城市</span>    city <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"href"</span><span class="token punctuation">:</span>re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token string">'href'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#flag这个省</span>    flag <span class="token operator">=</span> i<span class="token punctuation">[</span><span class="token string">'href'</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> city<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#哈哈。终于读到时刻表了</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token string">'href'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        url <span class="token operator">=</span> base_url<span class="token operator">+</span>i<span class="token punctuation">[</span><span class="token string">'href'</span><span class="token punctuation">]</span>        html <span class="token operator">=</span> fun<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span>features<span class="token operator">=</span><span class="token string">'lxml'</span><span class="token punctuation">)</span>        train <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'tr'</span><span class="token punctuation">)</span>        p<span class="token operator">=</span>re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'13:14'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> train<span class="token punctuation">:</span>            <span class="token keyword">if</span> p<span class="token punctuation">.</span>search<span class="token punctuation">(</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> i<span class="token punctuation">.</span>text<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'13:14'</span><span class="token punctuation">:</span>                    answer<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="http://p66eruxmw.bkt.clouddn.com/15266453453241.jpg" alt=""></p><h2 id="收尾工作"><a href="#收尾工作" class="headerlink" title="收尾工作"></a>收尾工作</h2><p>原来有好多好多符合条件的列车呀，那么作为花(Qiong)朵（Ren）的我怎么选呢。</p><p>哈哈。当然是用到站时间-发车时间计算出最（Pianyi）的那一辆啦。<br>这里又学到了Python的time包。<br>给你们个模板拿去用：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token comment" spellcheck="true">#经停时间是第六列</span>t1 <span class="token operator">=</span> time<span class="token punctuation">.</span>mktime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>i<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'%H:%m'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#到站时间是最后一列</span>t2 <span class="token operator">=</span> time<span class="token punctuation">.</span>mktime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>i<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'%H:%m'</span><span class="token punctuation">)</span>t2<span class="token operator">-</span> t1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后我买了这一班：</p><p><img src="http://p66eruxmw.bkt.clouddn.com/15266457689435.jpg" alt=""></p><p>哈哈，明天抽个空去取票去~</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Demo </tag>
            
            <tag> Python </tag>
            
            <tag> Spider </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ofo仿写记录</title>
      <link href="/ios/ofo-fang-xie-ji-lu/"/>
      <url>/ios/ofo-fang-xie-ji-lu/</url>
      
        <content type="html"><![CDATA[<p>ofo不解释，教程同样来自小波。</p><a id="more"></a><h1 id="小知识点"><a href="#小知识点" class="headerlink" title="小知识点"></a>小知识点</h1><ul><li>解包 .car 文件：<br><a href="https://github.com/insidegui/AssetCatalogTinkerer" target="_blank" rel="noopener">https://github.com/insidegui/AssetCatalogTinkerer</a><br>仿写必备咯</li><li>很多时候Constrain不好加，可以先拖到合适的地方。比如拖得贴近边框</li><li>ImageView没法调宽度（Table Session里）可以先放一个Container View</li><li>按比例添加Constarin：在控件总览栏右键从一个容器拖到上一层容器上，选的等宽，右侧属性改为0.25. 就是占上一层容器的1/4</li><li>把一个view放到顶层：<code>view.bringSubview(toFront: ___)</code></li><li>在模拟器按住option可以双指</li><li>dump()有点像print但是可以输出属性</li><li>加注释技巧:<code>// MARK: -这样可以在查看函数时快速定位</code></li></ul><h1 id="加载网页"><a href="#加载网页" class="headerlink" title="加载网页"></a>加载网页</h1><h2 id="WebView"><a href="#WebView" class="headerlink" title="WebView"></a>WebView</h2><p>网页自适应选项在这：<br><img src="http://p66eruxmw.bkt.clouddn.com/15264706713494.jpg" alt=""></p><p>写法：</p><pre class="line-numbers language-Swift"><code class="language-Swift">let url = URL(string: "http://m.ofo.so/active.html")!let requset = URLRequest(url: url)webView.loadRequest(requset)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="WebKit"><a href="#WebKit" class="headerlink" title="WebKit"></a>WebKit</h2><pre class="line-numbers language-Swift"><code class="language-Swift">import WebKitvar webView: WKWebView!webView = WKWebView(frame: self.view.frame) //调大小view.addSubview(webView) //加到视图里let url = URL(string: "http://m.ofo.so/active.html")!let requset = URLRequest(url: url)webView.load(requset)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="侧边栏"><a href="#侧边栏" class="headerlink" title="侧边栏"></a>侧边栏</h1><h2 id="第三方库-初探"><a href="#第三方库-初探" class="headerlink" title="第三方库 初探"></a>第三方库 初探</h2><p><a href="https://cocoapods.org" target="_blank" rel="noopener">https://cocoapods.org</a></p><p>装 cocoapods:</p><pre class="line-numbers language-shell"><code class="language-shell">sudo gem install cocoapods<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="安装SWRevealViewController"><a href="#安装SWRevealViewController" class="headerlink" title="安装SWRevealViewController"></a>安装SWRevealViewController</h2><p>在podfile加入<br><code>pod &#39;SWRevealViewController&#39;,2.3</code><br>Terminal运行：<br><code>pod install</code></p><ul><li>由于SWRevealViewController是OC写的，要做一个桥接：<br>新建一个OC文件，自动生成一个桥接.h文件。删除OC文件即可。</li></ul><p>在桥接.h文件里加入<br><code># import &quot;路径/SWRevealViewController.h&quot;</code><br>在要使用的场景里加入<br><code>import SWRevealViewController</code></p><h2 id="使用-SWRevealViewController"><a href="#使用-SWRevealViewController" class="headerlink" title="使用 SWRevealViewController"></a>使用 SWRevealViewController</h2><ol><li>拖一个ViewController，类选择SWRevealViewController</li><li>程序入口改成这个VC</li><li>从这个ViewController右键拖到1场景和2场景，都选择SW-Set</li><li>两个场景的路径设置Segue的id，前面的叫sw_front，后面（划出来）的叫sw_rear</li><li>写代码</li></ol><pre class="line-numbers language-swift"><code class="language-swift"><span class="token keyword">if</span> <span class="token keyword">let</span> revealVC <span class="token operator">=</span> <span class="token function">revealViewController</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    revealVC<span class="token punctuation">.</span>rearViewRevealWidth <span class="token operator">=</span> <span class="token number">300</span> <span class="token comment" spellcheck="true">//设宽度</span>    navigationItem<span class="token punctuation">.</span>leftBarButtonItem<span class="token operator">?</span><span class="token punctuation">.</span>target <span class="token operator">=</span> revealVC    navigationItem<span class="token punctuation">.</span>leftBarButtonItem<span class="token operator">?</span><span class="token punctuation">.</span>action <span class="token operator">=</span> #<span class="token function">selector</span><span class="token punctuation">(</span><span class="token builtin">SWRevealViewController</span><span class="token punctuation">.</span><span class="token function">revealToggle</span><span class="token punctuation">(</span><span class="token number">_</span><span class="token punctuation">:</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//这句是OC语法   `#selecot`是OC的一个方法</span>    view<span class="token punctuation">.</span><span class="token function">addGestureRecognizer</span><span class="token punctuation">(</span>revealVC<span class="token punctuation">.</span><span class="token function">panGestureRecognizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在滑动菜单里点击按钮转场：<br>右键拖到场景里，选 r-v-c push 即可<br>再放上刚刚的代码（记得在场景里Embed in个导航）</p><pre class="line-numbers language-swift"><code class="language-swift"><span class="token keyword">if</span> <span class="token keyword">let</span> revealVC <span class="token operator">=</span> <span class="token function">revealViewController</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    revealVC<span class="token punctuation">.</span>rearViewRevealWidth <span class="token operator">=</span> <span class="token number">300</span> <span class="token comment" spellcheck="true">//设宽度</span>    navigationItem<span class="token punctuation">.</span>leftBarButtonItem<span class="token operator">?</span><span class="token punctuation">.</span>target <span class="token operator">=</span> revealVC    navigationItem<span class="token punctuation">.</span>leftBarButtonItem<span class="token operator">?</span><span class="token punctuation">.</span>action <span class="token operator">=</span> #<span class="token function">selector</span><span class="token punctuation">(</span><span class="token builtin">SWRevealViewController</span><span class="token punctuation">.</span><span class="token function">revealToggle</span><span class="token punctuation">(</span><span class="token number">_</span><span class="token punctuation">:</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//这句是OC语法   `#selecot`是OC的一个方法</span>    view<span class="token punctuation">.</span><span class="token function">addGestureRecognizer</span><span class="token punctuation">(</span>revealVC<span class="token punctuation">.</span><span class="token function">panGestureRecognizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="地图定位"><a href="#地图定位" class="headerlink" title="地图定位"></a>地图定位</h1><p>安装包和引用头文件都在文档里。</p><p>引入mapView，先声明一个mapView变量：<code>var mapView: MAMapView!</code><br>然后再viewDidload()里添加View：</p><pre class="line-numbers language-swift"><code class="language-swift">mapView <span class="token operator">=</span> <span class="token function">MAMapView</span><span class="token punctuation">(</span>frame<span class="token punctuation">:</span> view<span class="token punctuation">.</span>bounds<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//占满全屏</span>mapView<span class="token punctuation">.</span>delegate <span class="token operator">=</span> <span class="token keyword">self</span> <span class="token comment" spellcheck="true">//地图代理，以方便重写方法.     </span>view<span class="token punctuation">.</span><span class="token function">addSubview</span><span class="token punctuation">(</span>mapView<span class="token punctuation">)</span>view<span class="token punctuation">.</span><span class="token function">bringSubview</span><span class="token punctuation">(</span>toFront<span class="token punctuation">:</span> panelView<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>加了代理要改这里：<br><code>class ViewController: UIViewController,MAMapViewDelegate{}</code>加一个继承</p><p>加Key加HTTPs啥的都在文档里了。比如这些放在<code>AppDelegate.swift</code>的<code>didFininshedLaunching()</code>中：</p><pre class="line-numbers language-swift"><code class="language-swift"><span class="token builtin">AMapServices</span><span class="token punctuation">.</span><span class="token function">shared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>enableHTTPS <span class="token operator">=</span> <span class="token boolean">true</span><span class="token builtin">AMapServices</span><span class="token punctuation">.</span><span class="token function">shared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>apiKey <span class="token operator">=</span> <span class="token string">"YOUR KEY"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="GPX文件制作"><a href="#GPX文件制作" class="headerlink" title="GPX文件制作"></a>GPX文件制作</h2><p><a href="http://mygeoposition.com" target="_blank" rel="noopener">http://mygeoposition.com</a></p><p>Note：调用Google地图，需富强上网。</p><p>PS：经纬度数据可能不准确。在<a href="http://mygeoposition.com获取了GPX文件后可以再到http://lbs.amap.com/console/show/picker" target="_blank" rel="noopener">http://mygeoposition.com获取了GPX文件后可以再到http://lbs.amap.com/console/show/picker</a> 查到对应的经纬度修改下。</p><h2 id="POI"><a href="#POI" class="headerlink" title="POI"></a>POI</h2>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>EOS初探</title>
      <link href="/blockchain/eos-chu-tan/"/>
      <url>/blockchain/eos-chu-tan/</url>
      
        <content type="html"><![CDATA[<p>EOS这几天就像疯了。两周前我￥35入的（当时价格在0.0008BTC），大约两天后在59左右不到60（0.0011BTC）就出了，当时还觉得很高兴。。。五一出去和紫玉玩了一天回来，今天看120(0.0010)了。再涨买都不买不起了，今天开始好像在大幅回调，我在犹豫上不上车。不废话了，好好看看这EOS到底是何方神圣。</p><a id="more"></a><p><img src="http://p66eruxmw.bkt.clouddn.com/15251442766262.jpg" alt=""></p><h1 id="白皮书"><a href="#白皮书" class="headerlink" title="白皮书"></a>白皮书</h1><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><ul><li>区块间隔0.5秒<ul><li>是以太坊的30倍（12-15s）比特币的1200倍（10mins）</li></ul></li><li>放弃挖矿（PoW），改用12个超级节点（DPOS）做为区块生产者<ul><li>每个节点运行3秒（6块）换下一节点，63秒一轮</li><li>节点轮流生产形成合作关系</li><li>miss块淘汰机制严格</li></ul></li><li>引入异步拜占庭容错（aBFT），让每笔交易1秒内确认<ul><li>是以太坊的72-90倍，比特币的3600倍</li></ul></li></ul><h2 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h2><ul><li>身份认证</li><li>特定密钥</li><li>密钥找回</li></ul><h2 id="并行"><a href="#并行" class="headerlink" title="并行"></a>并行</h2><p>厉害了我的哥</p><ul><li>生产者将Action投递到分片(shard)中评估处理</li><li>账户间发送Action少于0.5秒（1个区块）</li><li>只读的、没有修改同一账户的、上下文无关的（比如签名）Action容易被分片并行</li></ul><p>哦哦。原来还没有实现，6月上线主网的版本还是单线程的。看来白皮书的问题。</p><h2 id="治理"><a href="#治理" class="headerlink" title="治理"></a>治理</h2><h2 id="跨链"><a href="#跨链" class="headerlink" title="跨链"></a>跨链</h2><ul><li>LCV 轻量客户端验证用于生成  交易存在性证明 -Merkle Proof （二叉哈希根）<br>只需要交易数据的根哈希 –》 只需1KB就可以证明任何一笔交易。</li></ul><p>DPOS 算法 0.5秒出块  1秒确认 快速跨链</p><h1 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h1><p>开发？<br>不多说了，<br>我看着EOS回调了，<br>我要去接点🙂🙂🙂</p><p>再见👋👋👋</p>]]></content>
      
      
      <categories>
          
          <category> Blockchain </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blockchain </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>一个美好的新世界</title>
      <link href="/others/a-brave-new-world/"/>
      <url>/others/a-brave-new-world/</url>
      
        <content type="html"><![CDATA[<p>《A Brave New World》 </p><blockquote><p>When the winds of change blow, some people build walls and others build windmills.</p></blockquote><a id="more"></a><p>p1<br>物联网正在改变一切。不幸的是，许多行业、消费者和商业技术设备的拥有者，以及基础设施运营商正在迅速发现自己处于安全梦魇的悬崖边缘。让所有设备“智能化”的趋势正在为网络罪犯、民族国家行动人员和安全研究人员创造机会。它们对经济、公司、商业交易、个人隐私和安全的潜在影响引发了威胁，这些威胁只会增加。Target、索尼影业(Sony Pictures)、保险公司如“蓝色交叉”(Blue Cross)，甚至白宫<strong>人事和管理办公室(OPM)</strong>都发生了关于重大安全漏洞的新闻，这些生动、不友好的新闻正是因为传统的网络安全意识不足导致。其中一些违规行为导致了公司和首席执行官们的腐败或垮台，最重要的是，对个人公民造成了重大损害。我们在网络安全方面的记录已经被证明是不合格的。现在想想物联网的世界，或者物联网之类的东西，比如安装了linux系统的智能电冰箱，洗衣机、汽车、可穿戴设备、植入式医疗设备、工厂机器人系统，以及任何可<em>联</em>网的新事物。在以前这些行业永远不必担心安全问题。然而，鉴于狂热的竞争与有市场的新产品和特性竞争，他们现在发现自己处于危险的领域，不知道如何开发、如何部署，如何安全地操作。</p><hr><p>p2<br>当我们在技术上进步的时候，有些人会有意识地或无意识地尝试去利用这些进步，这是人类一直都有的动机和倾向。因此我们断言，我们正处于安全梦魇的绝境。什么意思呢?首先，物联网的技术创新正迅速超越物联网的安全知识和意识。十年前做梦都没有过的新物理、信息系统、设备和连接，正在迅速地将人类的伦理道德推向极限。考虑一个类似的领域：类比生物伦理学和新的、非凡的基因工程。我们现在可以从数字序列的核苷酸碱基上合成DNA，将新的属性转移到生物、人类上。因为我们能做的并不代表都是我们应该做的。因为我们能连接一个新设备并不代表我们是应该的。但这正是物联网正在做的事情。<br>我们必须以人类的意识和行为一直存在的事实来平衡我们对人类未来的梦想和希望。总是会，达不到理想的乌托邦。总有公开和隐蔽的犯罪活动;总会有一些体面的公民发现自己卷入阴谋、金融混乱、敲诈勒索;总会有事故发生;总会有奸商和骗子愿意伤害别人，从别人的痛苦中获益。简而言之，总有一些人会出于同样的原因闯入和破坏设备和系统，就像窃贼闯入你的房子偷走你最珍贵的财产一样。你的损失是他的利益。更糟糕的是,在某些情况下，动机可能会延伸到身体伤害甚至死亡。如果正确配置起搏器，今天的击键可以挽救人类的生命;它还可以禁用汽车的刹车系统或阻碍伊朗的核研究设施。<br>物联网安全显然是重要的，但在我们深入探讨确保安全的实际方面之前，本章的其余部分将讨论以下内容:</p><ul><li>定义物联网</li><li>今天物联网使用</li><li>网络安全、网络物理和物联网关系。</li><li>为什么跨行业合作至关重要。</li><li>物联网中的<em>物</em>。</li><li>企业物联网</li><li>未来的IoT和确保它的需要。</li></ul><hr><p>p3</p><h1 id="物联网的定义"><a href="#物联网的定义" class="headerlink" title="物联网的定义"></a>物联网的定义</h1><p>尽管任何新一代都以自己与先辈们的技术进步为傲，但他们并不少见，或者根本不承认，在历史上，智能手机或无人驾驶飞机可能存在的巨大的思想、创新、协作、竞争和联系。现实情况是，虽然我们的前辈们可能没有享受到我们今天所拥有的小玩意的实现，但他们肯定会预想到。无论如何，科幻小说一直都是令人恐惧的预测媒介。<br>这是亚瑟·c·克拉克设想的地球轨道卫星。“医生”史密斯的经典科幻故事融合了思想和行动的宇宙(让人联想到今天惊人的，新的脑机接口)。虽然“物联网”这个术语和首字母缩略词是新的，但今天和明天的“物联网”的概念却不是。<br>作为最伟大的工程先驱之一，尼古拉·特斯拉(Nikola Tesla)在1926年接受《高力》(Colliers)杂志采访时说:</p><blockquote><p>“当无线是完全应用整个地球将被转换成一个巨大的大脑,而事实上,所有事情都是粒子的真实和有节奏的整体和工具,通过它我们能做这将是令人惊讶的简单与我们现在的电话。一个人可以在背心口袋里装一个。</p></blockquote><p>来源: <a href="http://www.tfcbooks.com/tesla/1926-01-30.htmv" target="_blank" rel="noopener">http://www.tfcbooks.com/tesla/1926-01-30.htmv</a></p><p>英国科学家艾伦·图灵在1950年引用了他的话说:</p><blockquote><p>“也可以认为，最好的办法是给机器提供金钱能买到的最好的感官，然后教它理解和说英语。”这个过程可以遵循孩子的正常教学。</p></blockquote><p>来源:《A. M.图灵(1950)计算机器和智能》49:433 - 460</p><p>毫无疑问，数字处理、通信、制造、传感器和控制的惊人进步，给我们这一代和我们的祖先带来了现实的想象。这样的进步为我们提供了一个强有力的隐喻，来隐喻我们的思想、需求和需求的生态系统，从而推动我们构建新的工具和解决方案，让我们既想享受，又想要生存。</p><hr><p>p4<br>然后我们到达了如何定义物联网的问题，以及如何区分物联网与今天的互联网，嗯，计算机。物联网当然不是移动移动技术的新术语。这是得多。虽然许多关于物联网的定义存在，但我们将主要依靠以下三本书:</p><ul><li><p>ITU的成员认可的定义将物联网定义为“信息社会的全球基础设施，通过基于现有和演进的、可互操作的信息和通信技术，通过互联(物理和虚拟)的方式实现先进的服务。”</p><p>  <a href="http://www.itu.int/ITU-T/recommendations/rec.aspx?rec=y.2060" target="_blank" rel="noopener">http://www.itu.int/ITU-T/recommendations/rec.aspx?rec=y.2060</a></p></li><li>IEEE对物联网的小型环境描述是“IoT是一个网络，它将唯一可识别的东西连接到互联网上。”“事物”具有感知/驱动和潜在的可编程能力。通过对独特的识别和感知的开发，可以收集关于“事物”的信息，“事物”的状态可以从任何地方、任何时间、任何事物中改变。<br>  <a href="http://iot.ieee.org/images/files/pdf/IEEE_IoT_Towards_Definition_Internet_of_Things_Revision1_27MAY15.pdf" target="_blank" rel="noopener">http://iot.ieee.org/images/files/pdf/IEEE_IoT_Towards_Definition_Internet_of_Things_Revision1_27MAY15.pdf</a></li><li>IEEE的大环境场景将物联网描述为“互联网”。<br>这是一个自配置、自适应、复杂的网络。<br>它通过使用标准的通信协议将事物连接到互联网。在数字世界中，相互关联的事物具有物理或虚拟表示，感知/驱动能力，可编程特性，并且是唯一可识别的。该表示包含信息，包括事物的身份、地位、位置或任何其他业务、社会或私人相关信息。这些东西通过剥削来提供服务，不管有没有人类的干预。<br>具有独特的识别、数据采集、通信和驱动能力。该服务通过智能接口的使用被开发，并且在任何地方、任何时间和任何安全考虑的情况下都可以使用。<br><a href="http://iot.ieee.org/images/files/pdf/IEEE_IoT_Towards" target="_blank" rel="noopener">http://iot.ieee.org/images/files/pdf/IEEE_IoT_Towards</a>_<br>Definition_Internet_of_Things_Revision1_27MAY15.pdf</li></ul><p>每一个定义都是互补的。它们相互重叠，描述了任何可以想象的东西，无论是在物理上还是在逻辑上，它们都能连接到一个不同的、互联网连接的世界。</p><hr><p>p5</p><h2 id="网络安全与物联网安全与网络物理系统。"><a href="#网络安全与物联网安全与网络物理系统。" class="headerlink" title="网络安全与物联网安全与网络物理系统。"></a>网络安全与物联网安全与网络物理系统。</h2><p>物联网安全不是传统的网络安全，而是网络安全的融合。<br>其他工程学科。它处理的不仅仅是数据、服务器、网络基础设施和信息安全。相反，它包括直接或分布式的监视和/或控制通过互联网连接的物理系统的状态。换句话说，物联网的一大特点是什么。<br>网络安全是当今许多行业从业者所称的网络物理系统。网络安全，如果你喜欢这个术语，通常不会涉及硬件设备的物理和安全方面，也不涉及它所能拥有的物理世界交互。网络上物理过程的数字控制使得IoT的独特之处在于，安全方程不仅限于基本信息保证原则的保密性、完整性、不可抵赖性，等等，<br>但也有物理资源和机器在物质世界中产生和接收这些信息。换句话说，物联网具有非常真实的模拟和物理元素。物联网设备是物理的东西，其中许多是安全相关的。因此，这种装置的妥协可能导致人身和财产的人身伤害，甚至死亡。<br>因此，物联网安全的主题并不是单一的、静态的元安全规则集应用于网络设备和主机。对于IoT设备参与的每个系统和系统，它需要一个独特的应用程序。物联网设备有许多不同的实施例，但总的来说，物联网设备几乎具有以下特性:<br>•能够直接或间接地通过互联网进行沟通。<br>•操纵或监控物体(在设备或设备的介质或环境中)，即物体本身，或直接连接。<br>对一件事<br>这两个特性的认知，任何物理的东西都可以成为物联网设备，因为任何物理的东西都可以通过适当的电子接口连接到互联网上。物联网设备的安全性是设备使用的功能，设备的物理过程或状态，以及设备连接的系统的灵敏度。</p><hr><p>p6</p><hr><p>p7</p><h1 id="为什么跨工业合作很重要"><a href="#为什么跨工业合作很重要" class="headerlink" title="为什么跨工业合作很重要"></a>为什么跨工业合作很重要</h1><hr><p>p8</p><hr><p>p9</p><hr><p>p10</p><h1 id="物联网如今的应用"><a href="#物联网如今的应用" class="headerlink" title="物联网如今的应用"></a>物联网如今的应用</h1><hr><p>p11</p><h2 id="能源产业和智能布局"><a href="#能源产业和智能布局" class="headerlink" title="能源产业和智能布局"></a>能源产业和智能布局</h2><h2 id="连接汽车和运输业"><a href="#连接汽车和运输业" class="headerlink" title="连接汽车和运输业"></a>连接汽车和运输业</h2><h2 id="制造业"><a href="#制造业" class="headerlink" title="制造业"></a>制造业</h2><hr><p>p12</p><h2 id="可穿戴"><a href="#可穿戴" class="headerlink" title="可穿戴"></a>可穿戴</h2><h2 id="植入式医疗设备"><a href="#植入式医疗设备" class="headerlink" title="植入式医疗设备"></a>植入式医疗设备</h2><hr><p>p13</p><h1 id="企业物联网"><a href="#企业物联网" class="headerlink" title="企业物联网"></a>企业物联网</h1><hr><p>p14</p><hr><p>p15</p><hr><p>p16</p><hr><p>p17</p><h2 id="物联网中的物"><a href="#物联网中的物" class="headerlink" title="物联网中的物"></a>物联网中的物</h2><h3 id="物联网设备的生命周期"><a href="#物联网设备的生命周期" class="headerlink" title="物联网设备的生命周期"></a>物联网设备的生命周期</h3><hr><p>p18</p><hr><p>p19</p><h3 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h3><hr><p>p20</p><h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><hr><p>p21</p><h3 id="物联网通信"><a href="#物联网通信" class="headerlink" title="物联网通信"></a>物联网通信</h3><hr><p>p22</p><hr><p>p23<br>这个图提供了一些更广为人知的协议，这些协议可以由物联网设备实现，从而形成一个完整的通信栈。<br>值得注意的是，由于现在是物联网的初期，许多产品的设计和安全需求完全取决于制造商。在许多情况下开发早期阶段都没有安全方面的专业人员。虽然有些组织可能提供了指导方针、建议和审核列表，但值得注意的是，严格遵守相关行业规则的物联网设备几乎是不存在的。每个物联网设备可能对隐私、传输通信等有自己的要求，但它们一贯地基于现有的规定或遵从性要求，如HIPAA、PCI、SOX等。工业物联网可能会在以消费者为导向的组织之前引领急需的安全标准化发展。就目前而言，之前为确保物联网的实现和部署而做的努力好比是将方形钉塞进圆孔中。物联网仅仅是有不同的需求。</p><h3 id="消息传递协议"><a href="#消息传递协议" class="headerlink" title="消息传递协议"></a>消息传递协议</h3><p>在IoT通信栈的顶部，存在支持在两个终端之间交换格式化的消息数据的协议，终端通常是客户机和服务器，或者客户机到客户机。比如MQTT,限制应用协议(CoAP),数据分发服务(DDS),高级消息队列协议(AMQP),可扩展消息传递和到场协议(XMPP)这些协议运行在下层通信协议之上,并保证客户端和服务器的有效地达成一致的数据交换。RESTful通信也可以非常有效地运行在许多物联网系统中。到目前为止，基于REST的通信和MQTT看上去是领先的。<br>(<a href="http://www.hivemq.com/blog/how-to-get-started-with-mqtt" target="_blank" rel="noopener">http://www.hivemq.com/blog/how-to-get-started-with-mqtt</a>)</p><hr><p>p24<br><strong>MQTT</strong><br>MQTT是一个发布/订阅模型，客户端可以订阅主题，并始终保持与代理服务器的TCP连接。新消息包括消息的主题先发送给代理，允许代理确定哪些客户机应该接收消息，然后通过always-on连接推送给客户端。<br>[图]<br>这很好地支持了各种通信用例，其中传感器MQTT将数据发布到代理，代理将它们传递给其他订阅系统，这些系统对使用或进一步处理传感器数据有兴趣。尽管MQTT主要适用于基于tcp的网络，但<strong>传感器网络MQTT (MQTT-SN)</strong>规范提供了一个优化的MQTT版本，用于<strong>无线传感器网络(WSN)</strong>。</p><hr><p>p25<br>Stanford-Clark and Linh Truong.<strong>传感器网络MQTT (MQTT-SN)</strong>协议规范，版本1.2。国际商业机器(IBM)。2013年。URL:<br><a href="http://mqtt.org/new/wp-content/uploads/2009/06/MQTT-SN_spec_v1.2.pdf" target="_blank" rel="noopener">http://mqtt.org/new/wp-content/uploads/2009/06/MQTT-SN_spec_v1.2.pdf</a><br>MQTT-SN非常适合用于拥有有限处理和存储资源的电池驱动设备。它允许传感器和执行器在ZigBee和类似的RF协议规范上使用发布/订阅模型。</p><p><strong>CoAP</strong><br>CoAP是另一个物联网消息传递协议，基于udp，并打算用于资源受限的Internet设备，如WSN节点。它由一组易于映射到HTTP的消息组成:GET、POST、PUT和DELETE。<br>[图]<br>来源: <a href="http://www.herjulf.se/download/coap-2013-fall.pdf" target="_blank" rel="noopener">http://www.herjulf.se/download/coap-2013-fall.pdf</a><br>CoAP设备实现通过使用特定的<strong>统一资源指示器(URLs)</strong>与web服务器通信来处理命令。启用了coap的实现的例子有智能电灯开关：开关发送一个PUT命令来改变系统中每个光的表现(状态、颜色)。<br><strong>XMPP</strong><br>XMPP基于<strong>可扩展标记语言(XML)</strong>，是一种开放的实时通信技术。它是从<strong>Jabber即时消息(IM)</strong>协议演变而来的:<a href="http://www.ibm.com/developerworks/library/x-xmppintro/" target="_blank" rel="noopener">http://www.ibm.com/developerworks/library/x-xmppintro/</a>.</p><hr><p>p26<br>XMPP支持通过TCP传输XML消息，允许IoT开发人员高效地实现服务发现和服务广告。<br>XMPP-IoT是XMPP的一个定制版本。类似于人对人的通信场景，XMPP-IoT通信以好友请求（<a href="http://www.xmpp-iot.org/basics/beingfriends/）开始。" target="_blank" rel="noopener">http://www.xmpp-iot.org/basics/beingfriends/）开始。</a><br>在确认好友请求后，不管彼此的域是什么，两个IoT设备都能够通信。其中也存在父子关系。XMPP-IoT中的父节点提供了一定程度的安全性策略A，以检测特定的子节点是否可以信任(从而成为朋友)。如果没有一个确认的好友请求，IoT设备之间的通信就无法进行。</p><p><strong>DDS</strong><br>DDS是一种用于集成智能机器的数据总线。与MQTT一样也使用发布/订阅模型让读者订阅感兴趣的主题。<br>[图]<br>来源: <a href="http://www.slideshare.net/Angelo.Corsaro/applied-opensplice-dds-a-collection-of-use-cases" target="_blank" rel="noopener">http://www.slideshare.net/Angelo.Corsaro/applied-opensplice-dds-a-collection-of-use-cases</a></p><hr><p>p27<br>DDS允许匿名通信和自动通信，因为终端之间的关系不是必需的。此外，协议还内置了<strong>服务质量(QoS)</strong>机制。DDS主要用于设备间通信和风力场、医疗成像系统和资产跟踪系统的部署场景。</p><p><strong>AMQP</strong><br>AMQP的设计目的是提供一个支持服务器间通信的排队系统。应用于物联网。同时支持发布/订阅模型和点对点通信。AMQP IoT端点侦听每个队列上的消息。AMQP已经部署在许多领域，例如在运输业为车辆遥测设备提供数据给分析系统进行几乎实时的处理。</p><p><strong>网关</strong><br>目前讨论的大多数消息规范都要求实现特定协议的网关或其他设备，以将通信重新封装到另一个协议(例如封装成IP路由)或执行协议转换。这些协议的融合可能会带来巨大的安全隐患，将潜在的攻击引入企业。在设计企业架构时，必须考虑协议的限制、配置和堆栈选项。由合格的协议安全工程师做威胁建模训练可以在此过程中提供帮助。</p><p><strong>传输协议</strong><br>因特网为了可靠传输而使用<strong>传输控制协议(TCP)</strong>，对通过网络传输的TCP段的确认。TCP是当今web通信的实现可靠传输的首选协议。一些物联网产品的设计目的是使用TCP(例如，这些产品足够健壮，可以使用一个完整的TCP/IP栈，可以在安全(TLS)连接的情况下使用HTTP或MQTT。<br>)。TCP不适合在受限的网络环境中使用，否则会有高延迟或带宽限制。</p><hr><p>p28<br>然而，<strong>用户数据报协议(UDP)</strong>提供了一个有效的替代方案。UDP为无连接通信提供了一种轻量级传输机制(不像基于会话的TCP)。许多高度受限的物联网传感器设备支持UDP。例如，MQTT-SN是支持UDP的MQTT的定制版本。其他的如CoAP也设计用UDP工作。甚至还有一种替代TLS设计，称为<strong>Datagram TLS (DTLS)</strong>，用于实现UDP的传输的产品。</p><p><strong>网络协议</strong><br>IPv4和IPv6都在众多物联网系统中扮演着不同的角色。定制的协议栈如<strong>低功耗无线个人区域网络(6LoWPAN)</strong>，支持在许多物联网设备共同的网络受限环境中使用IPv6。6LoWPan支持低数据速率的无线网络连接，以适应高度受限的设备形式因素:http:// projets-gmi.univ-avignon.fr/projets//proj1112/M1/p09/doc/6LoWPAN_ overview.pdf.<br>6LoWPAN建立在<strong>802.15.4 -低速率无线个人区域网络(LRWPAN)</strong>规范之上，以创建一个支持IPv6的适应层。适应层提供了包括IPv6和UDP头压缩的特性，并支持碎片化，例如，允许受约束的传感器用于构建自动化和安全。使用6LoWPAN，设计人员可以利用IEEE 802.15.4中提供的链路加密，但也可以应用传输层加密，如DTLS。</p><p><strong>数据链接和物理协议</strong><br>如果您检查可用于物联网的这些通信协议，您会注意到其中一个特别的，IEEE 802.15.4，作为其他协议的基础，为协议（如ZigBee、6LoWPAN、WirelessHART等）甚至是线程提供<strong>物理(PHY)</strong>和<strong>介质访问控制(MAC)</strong>层。</p><p><strong>IEEE 802.15.4</strong><br>802.15.4设计使用点对点或星形拓扑结构，适用于低功率或低速环境。802.15.4设备在915mhz和2.4 GHz频率范围内运行，支持数据速率高达250kb /s，通信范围约为10米。PHY层负责管理RF网络访问，而MAC层负责管理传输和接收到数据链路上的帧。</p><hr><p>p29<br><strong>ZWave</strong><br>用在堆栈层的另一个协议是ZWave。ZWave支持三种框架类型的网络传输——单播、多播和广播。单播通信(即直接)由接收方确认;相反组播和广播传输都不确认接收。ZWave网络由控制端和受控端成。当然，每一种都有不同的变体。例如，可以有主控制器和辅助控制器。主控制器有责任负责添加/删除网络节点。ZWave的运行频率为908.42 MHz(北美)/868.42 MHz(欧洲)，数据速率为100kb /s，范围约为30米。<br>蓝牙/智能蓝牙(也叫低能量蓝牙或BLE)是蓝牙技术的发展，旨在提高电池的使用寿命。蓝牙智能通过默认睡眠模式来省电，只在需要的时候唤醒。两者都运行在2.4 GHz频率范围内。蓝牙实现了高频率跳频扩频，支持AES加密。<br>参考:<a href="http://www.medicalelectronicsdesign.com/article/bluetooth-low-energy-vs-classic-bluetooth-choose-best-wireless-technology-your-application" target="_blank" rel="noopener">http://www.medicalelectronicsdesign.com/article/bluetooth-low-energy-vs-classic-bluetooth-choose-best-wireless-technology-your-application</a></p><p><strong>电线通信PLC</strong><br>在能源行业中，WirelessHART和<strong>电线通信(PLC)</strong>技术，如Insteon，是在通信栈的链路和物理层上运行的附加技术。支持PLC的设备(不要与<em>Programmable Logic Controller可编程逻辑控制器</em>相混淆)可以家用和工业用，而且有趣的是它们的通信是直接通过现有的电线进行调制的。这种通信方法使电力连接设备能够在没有辅助通信管道的情况下被控制和监测。<br>参考:<a href="http://www.eetimes.com/document.asp?doc_id=1279014" target="_blank" rel="noopener">http://www.eetimes.com/document.asp?doc_id=1279014</a></p><p><strong>蜂窝通信</strong><br>移动到5G通信将对物联网系统的设计产生重大影响。当5G以更高的吞吐量和支持更多连接的能力推出时，我们将开始看到直接连接到云上的物联网设备增加。这将考虑创建新的集中控制器功能，以支持具有有限基础设施的地理上分散的传感器/执行器。更健壮的蜂窝通信将进一步使云成为传感器数据反馈、web服务交互和众多企业应用程序接口的聚合点。</p><hr><p>p30<br><strong>IoT数据收集、存储和分析</strong><br>到目前为止，我们已经广泛地讨论了端点和协议，他们组成了物联网。尽管设备间的通信和协调有很大的潜力，但是在连接设备的基础上结合分析数据的能力，就有更多的机会来简化业务流程，改进客户体验。云提供了一个现成的基础设施来支持这种配对。<br>许多<strong>CSP-公共服务提供商</strong>已经部署了能很好集成在其他云产品上的物联网服务。例如，AWS创建了AWS IoT服务。此服务允许配置IoT设备，并使用MQTT或REST通信连接到AWS IoT网关。数据也可以通过诸如Kinesis或Kinesis Firehose等平台进入AWS。例如Kinesis Firehose可以收集和处理大量数据流，并转发到其他AWS基础设施组件进行存储和分析。<br>一旦在CSP中收集了数据，就可以设置逻辑规则来将数据转发到最合适的位置。数据被分析、存储、访问或与其他设备、系统的数据相结合。分析数据的原因在于，从想要了解购物模式的趋势(例如beacons)变成预测一台机器是否会崩溃(预见性维护)。<br>其他CSP也进入了物联网市场。除了IBM和谷歌之外，微软的Azure提供了一个特殊的物联网服务。甚至<strong>SaaS（Software as a Service）</strong>提供商也开始提供分析服务。Salesforce.com设计了一个定制的物联网分析解决方案。Salesforce使用Apache栈将设备连接到云，并分析它们的大数据流。Salesforce的IoT云依赖于Apache的Cassandra数据库、Spark数据处理引擎、数据分析风暴，以及用于消息传递的Kafka。<br>参考:<a href="http://fortune.com/2015/09/15/salesforce-com-iot-cloud/" target="_blank" rel="noopener">http://fortune.com/2015/09/15/salesforce-com-iot-cloud/</a></p><h2 id="物联网一体化平台及解决方案"><a href="#物联网一体化平台及解决方案" class="headerlink" title="物联网一体化平台及解决方案"></a>物联网一体化平台及解决方案</h2><p>随着更多的组织去构建新的物联网设备和系统，我们发现集成能力需要改进和增强。像Xively和Thingspeak这样的公司现在提供了灵活的开发解决方案，将新事物集成到企业架构中。在智慧城市的领域，像Accella和SCOPE这样的平台提供了“智能城市云端开放平台和生态系统”，能将各种IoT系统集成到企业解决方案中。</p><hr><p>p31<br>这些平台提供了API给IoT设备开发人员来构建新的特性和服务。越来越多的IoT开发人员将这些API集成到企业IT环境中。例如，Thingspeak API可以集成HTTP通信到物联网设备。项目便能够从传感器获取数据，分析数据，然后对这些数据采取行动。同样地，AllJoyn是一个来自AllSeen联盟的开源项目。它着重于物联网设备之间的互操作性，即使设备使用不同的传输机制。随着IoT的成熟，不同的物联网组件、协议和api将继续融合在一起，构建强大的企业级系统。这些趋势回避了系统到底有多安全的问题。</p><h1 id="未来物联网和安全需求"><a href="#未来物联网和安全需求" class="headerlink" title="未来物联网和安全需求"></a>未来物联网和安全需求</h1><p>尽管今天的物联网创新继续推动着识别和建立对象、系统和人之间的新关系，我们的想象力不断地创造出新的能力，以前所未有的规模解决问题。想象使物联网就变得无穷无尽。现在我门有的还只是皮毛。</p><h2 id="未来：认知系统和物联网"><a href="#未来：认知系统和物联网" class="headerlink" title="未来：认知系统和物联网"></a>未来：认知系统和物联网</h2><p>未来一段时间内智能设备和设备设备物联网将实现惊人的增长，但是在消费的边缘上的全新研究又如何呢?未来需要什么，以及它将如何取决于我们今天如何保障IoT的安全?认知系统和研究为我们提供了一个对未来的宝贵一瞥。<br>十多年前，杜克大学(Duke University)的研究人员通过将神经控制信号从嵌入猴子大脑顶叶和额叶皮层的电极中，将神经控制信号转化为机器人手臂，从而展示了对机械手臂的认知控制。研究人员将大脑信号转换为马达伺服执行器输入。这些输入让猴子通过最初的操纵杆训练来控制一个非生物的机械手臂，通过视觉反馈来调整自己的驱动思想。所谓的<strong>brain-computer interfaces (BCI), or brain-machine interfaces (BMI)</strong>，继续由Miguel Nocolelis博士的杜克实验室和其他人提出。该技术在未来将通过佩戴和控制机器人系统来修复神经、恢复身体机能。研究还证明了大脑对大脑的功能，允许通过大脑解决分布式的认知问题。</p><hr><p>p32<br>大脑感知(通过神经网络的)信号的数字转换，可以通过数据总线，IP网络，甚至是因特网来传送认知完毕的数据。就物联网而言，这类认知研究暗示了未来，某些类型的智能设备将变得聪明，因为有“大脑”控制通过BMI进行控制或接收信号。或者，人类的大脑通过提供来自数千公里外的传感器的传感器反馈信息而变得高度敏感。想象一下，一名飞行员驾驶着一架无人机。他身体的延伸，但飞行员没有操纵杆。只用思想信号(控制)和反馈(感觉)通过通信链路传送，所有必要的飞行动作和调整都可以做。想象一下飞机的空速，用它的皮托管测量，以数字形式传送到飞行员的身体质量指数界面，飞行员“感觉”到像风一样在他的皮肤上吹的速度。物联网的未来并不像看上去的那么遥远。<br>现在想象一下，在这样的认知系统中，可能需要什么类型的物联网安全，那里的东西是人的大脑和动态的物理系统。比如，一个人如何对一个人的大脑进行认证，对一个设备进行认证，或者对设备进行身份验证?数字完整性损失与BMI之间的关系是什么?如果传出或传入的信号在时间和可用性上被欺骗、损坏或操纵，会发生什么情况?今天的物联网所带来的最大利弊是共存的，当我们考虑这些未来的系统和它们对人类的意义时，它们是很小的。威胁和风险也是如此。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在这一章中，我们看到了在物联网的帮助下，世界是如何发展和走向更美好的未来的。看到了当今世界物联网的各种用途，然后简要介绍了它的概念。<br>在下一章中，我们将了解各种威胁以及我们可以采取的避免/克服这些威胁的措施。</p>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IoT </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>UIDevice学习</title>
      <link href="/ios/uidevice-xue-xi/"/>
      <url>/ios/uidevice-xue-xi/</url>
      
        <content type="html"><![CDATA[<p>iOS的UIDevice可以方便获取设备的硬件和系统的一些状态信息。写这篇文章是因为选修了《移动安全与测评》这门课。小作业让写一个APP获取系统和其他App的一些信息。在不越狱的iOS中我实在不知道怎么获取其他APP的信息，就借此机会了解下UIDevice吧。</p><a id="more"></a><p>#准备</p><p>先列一下准备做的东西~对照文档查一下。</p><h2 id="系统设备信息"><a href="#系统设备信息" class="headerlink" title="系统设备信息"></a>系统设备信息</h2><p>根据UIDevice的文档。可以获取的信息有</p><ul><li>设备名称<ul><li>用户给设备的命名</li></ul></li><li>设备类型<ul><li>iPhone、iPad、Apple watch、Apple TV等</li></ul></li><li>系统名称<ul><li>iOS、watchOS等</li></ul></li><li>系统版本<ul><li>版本号</li></ul></li><li>UUID<ul><li>每个设备的唯一标示</li></ul></li><li>电池状态<ul><li>是否充电、是否充满</li></ul></li><li>电池情况<ul><li>即电量信息</li></ul></li><li>多任务环境监测<ul><li>判断系统是否支持多任务</li></ul></li></ul><h2 id="传感器相关"><a href="#传感器相关" class="headerlink" title="传感器相关"></a>传感器相关</h2><ul><li>距离感应</li><li>设备方向</li><li>加速器</li><li>方位</li></ul><h2 id="行为侦听"><a href="#行为侦听" class="headerlink" title="行为侦听"></a>行为侦听</h2><ul><li>剪贴板</li><li>截图</li></ul><p>暂时就想到这么多，边做边想吧。</p><h1 id="过程与分析"><a href="#过程与分析" class="headerlink" title="过程与分析"></a>过程与分析</h1><p>􏰞􏱔􏱾􏰻􏰼􏱕􏱖􏰭􏰮􏰦􏱿􏲀􏲁􏰨􏰩􏰪􏰓􏰡􏰫􏰛􏱀􏰹􏱰􏱪􏱬􏱭􏱙􏱚􏰞􏱔􏰹􏱝􏰜􏲂􏰹􏲃􏲄􏰜􏲅􏲆􏰡􏰞􏱔􏱾􏰻􏰼􏱕􏱖􏰭􏰮􏰦􏱿􏲀􏲁􏰨􏰩􏰪􏰓􏰡􏰫􏰛􏱀􏰹􏱰􏱪􏱬􏱭􏱙􏱚􏰞􏱔􏰹􏱝􏰜􏲂􏰹􏲃􏲄􏰜􏲅􏲆􏰡􏰞􏱔􏱾􏰻􏰼􏱕􏱖􏰭􏰮􏰦􏱿􏲀􏲁􏰨􏰩􏰪􏰓􏰡􏰫􏰛􏱀􏰹􏱰􏱪􏱬􏱭􏱙􏱚􏰞􏱔􏰹􏱝􏰜􏲂􏰹􏲃􏲄􏰜􏲅􏲆􏰡􏰞􏱔􏱾􏰻􏰼􏱕􏱖􏰭􏰮􏰦􏱿􏲀􏲁􏰨􏰩􏰪􏰓􏰡􏰫􏰛􏱀􏰹􏱰􏱪􏱬􏱭􏱙􏱚􏰞􏱔􏰹􏱝􏰜􏲂􏰹􏲃􏲄􏰜􏲅􏲆􏰡􏰞􏱔􏱾􏰻􏰼􏱕􏱖􏰭􏰮􏰦􏱿􏲀􏲁􏰨􏰩􏰪􏰓􏰡􏰫􏰛􏱀􏰹􏱰􏱪􏱬􏱭􏱙􏱚􏰞􏱔􏰹􏱝􏰜􏲂􏰹􏲃􏲄􏰜􏲅􏲆􏰡􏰞􏱔􏱾􏰻􏰼􏱕􏱖􏰭􏰮􏰦􏱿􏲀􏲁􏰨􏰩􏰪􏰓􏰡􏰫􏰛􏱀􏰹􏱰􏱪􏱬􏱭􏱙􏱚􏰞􏱔􏰹􏱝􏰜􏲂􏰹􏲃􏲄􏰜􏲅􏲆􏰡􏰞􏱔􏱾􏰻􏰼􏱕􏱖􏰭􏰮􏰦􏱿􏲀􏲁􏰨􏰩􏰪􏰓􏰡􏰫􏰛􏱀􏰹􏱰􏱪􏱬􏱭􏱙􏱚􏰞􏱔􏰹􏱝􏰜􏲂􏰹􏲃􏲄􏰜􏲅􏲆􏰡􏰞􏱔􏱾􏰻􏰼􏱕􏱖􏰭􏰮􏰦􏱿􏲀􏲁􏰨􏰩􏰪􏰓􏰡􏰫􏰛􏱀􏰹􏱰􏱪􏱬􏱭􏱙􏱚􏰞􏱔􏰹􏱝􏰜􏲂􏰹􏲃􏲄􏰜􏲅􏲆􏰡􏰻􏰼􏱕􏱖􏰭􏰮􏰦􏱿􏲀􏲁􏰨􏰩􏰪􏰓􏰡􏰫􏰛􏱀􏰹􏱰􏱪􏱬􏱭􏱙􏱚􏰞􏱔􏰹􏱝􏰜􏲂􏰹􏲃􏲄􏰜􏲅􏲆􏰻􏰼􏱕􏱖􏰭􏰮􏰦􏱿􏲀􏲁􏰨􏰩􏰪􏰓􏰡􏰫􏰛􏱀􏰹􏱰􏱪􏱬􏱭􏱙􏱚􏰞􏱔􏰹􏱝􏰜􏲂􏰹􏲃􏲄􏰜􏲅􏲆<br>对照文档很容易就拿到了这些数据。</p><h2 id="系统设备信息-1"><a href="#系统设备信息-1" class="headerlink" title="系统设备信息"></a>系统设备信息</h2><pre class="line-numbers language-swift"><code class="language-swift"><span class="token comment" spellcheck="true">//获取当前设备</span><span class="token keyword">let</span> dev<span class="token punctuation">:</span><span class="token builtin">UIDevice</span> <span class="token operator">=</span> <span class="token builtin">UIDevice</span><span class="token punctuation">.</span>current<span class="token comment" spellcheck="true">//更新下这几个Label</span>    deviceNameLabel<span class="token punctuation">.</span>text <span class="token operator">=</span> dev<span class="token punctuation">.</span>name    deviceModelLabel<span class="token punctuation">.</span>text <span class="token operator">=</span> dev<span class="token punctuation">.</span>model    systemNameLabel<span class="token punctuation">.</span>text <span class="token operator">=</span> dev<span class="token punctuation">.</span>systemName    systemVersion<span class="token punctuation">.</span>text <span class="token operator">=</span> dev<span class="token punctuation">.</span>systemVersion<span class="token comment" spellcheck="true">//返回电池充电状态</span>    <span class="token keyword">func</span> <span class="token function">batteryState</span><span class="token punctuation">(</span>dev<span class="token punctuation">:</span><span class="token builtin">UIDevice</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">String</span> <span class="token punctuation">{</span>        dev<span class="token punctuation">.</span>isBatteryMonitoringEnabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置电池是否被监视</span>        <span class="token keyword">var</span> state <span class="token operator">=</span> <span class="token string">""</span>        <span class="token comment" spellcheck="true">//判断当前电池状态</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>dev<span class="token punctuation">.</span>batteryState <span class="token operator">==</span> <span class="token builtin">UIDeviceBatteryState</span><span class="token punctuation">.</span>unknown<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            state <span class="token operator">=</span> <span class="token string">"未知状态"</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>dev<span class="token punctuation">.</span>batteryState <span class="token operator">==</span> <span class="token builtin">UIDeviceBatteryState</span><span class="token punctuation">.</span>unplugged<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            state <span class="token operator">=</span>  <span class="token string">"未充电"</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>dev<span class="token punctuation">.</span>batteryState <span class="token operator">==</span> <span class="token builtin">UIDeviceBatteryState</span><span class="token punctuation">.</span>charging<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            state <span class="token operator">=</span>  <span class="token string">"正在充电"</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>dev<span class="token punctuation">.</span>batteryState <span class="token operator">==</span> <span class="token builtin">UIDeviceBatteryState</span><span class="token punctuation">.</span>full<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            state <span class="token operator">=</span> <span class="token string">"正在充电，电量已满"</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> state    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 更新Label</span>    batteryStateLabel<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token function">batteryState</span><span class="token punctuation">(</span>dev<span class="token punctuation">:</span> dev<span class="token punctuation">)</span>    batteryLevel<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>dev<span class="token punctuation">.</span>batteryLevel<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>其中如果可以不停地收集用户的充电状态，可以试着分析用户的生活或工作的习惯。</p></blockquote><h2 id="传感器相关-1"><a href="#传感器相关-1" class="headerlink" title="传感器相关"></a>传感器相关</h2><pre class="line-numbers language-swift"><code class="language-swift"><span class="token comment" spellcheck="true">//返回红外状态</span>    <span class="token keyword">func</span> <span class="token function">proximityState</span><span class="token punctuation">(</span>dev<span class="token punctuation">:</span><span class="token builtin">UIDevice</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">String</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> state <span class="token operator">=</span> <span class="token string">""</span>        dev<span class="token punctuation">.</span>isProximityMonitoringEnabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>dev<span class="token punctuation">.</span>proximityState <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            state <span class="token operator">=</span> <span class="token string">"红外被遮挡"</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            state <span class="token operator">=</span> <span class="token string">"红外未遮挡"</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> state    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//返回设备方向</span>    <span class="token keyword">func</span> <span class="token function">oritentationState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">String</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> state <span class="token operator">=</span> <span class="token string">""</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>dev<span class="token punctuation">.</span>orientation<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token punctuation">.</span>faceUp<span class="token punctuation">:</span>            state <span class="token operator">=</span> <span class="token string">"屏幕朝上平躺"</span>        <span class="token keyword">case</span> <span class="token punctuation">.</span>faceDown<span class="token punctuation">:</span>            state <span class="token operator">=</span> <span class="token string">"屏幕朝下平躺"</span>        <span class="token comment" spellcheck="true">//倾斜？</span>        <span class="token keyword">case</span> <span class="token punctuation">.</span>unknown<span class="token punctuation">:</span>            state <span class="token operator">=</span> <span class="token string">"未知方向"</span>        <span class="token keyword">case</span> <span class="token punctuation">.</span>landscapeLeft<span class="token punctuation">:</span>            state <span class="token operator">=</span> <span class="token string">"屏幕向左横置"</span>        <span class="token keyword">case</span> <span class="token punctuation">.</span>landscapeRight<span class="token punctuation">:</span>            state <span class="token operator">=</span> <span class="token string">"屏幕向右橫置"</span>        <span class="token keyword">case</span> <span class="token punctuation">.</span>portrait<span class="token punctuation">:</span>            state <span class="token operator">=</span> <span class="token string">"屏幕直立"</span>        <span class="token keyword">case</span> <span class="token punctuation">.</span>portraitUpsideDown<span class="token punctuation">:</span>            state <span class="token operator">=</span> <span class="token string">"屏幕直立，上下顛倒"</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>            state <span class="token operator">=</span> <span class="token string">"无法辨识"</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> state    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过设备的距离感应和设备方向。可以分析出用户是不是把设备放在口袋里。当然，获取这些数据面临的最大的问题，是App在后台运行的问题，iOS系统特殊的机制让这些收集行为只能，投机取巧。本文后面会提到。</p><h2 id="行为侦听-1"><a href="#行为侦听-1" class="headerlink" title="行为侦听"></a>行为侦听</h2><pre class="line-numbers language-swift"><code class="language-swift"><span class="token comment" spellcheck="true">//更改剪贴板的内容</span> <span class="token builtin">UIPasteboard</span><span class="token punctuation">.</span>general<span class="token punctuation">.</span>string <span class="token operator">=</span> <span class="token string">"Hello,<span class="token interpolation"><span class="token delimiter variable">\(</span><span class="token builtin">UIDevice</span><span class="token punctuation">.</span>current<span class="token punctuation">.</span>name<span class="token delimiter variable">)</span></span>"</span><span class="token comment" spellcheck="true">//获取剪贴板的内容</span><span class="token keyword">let</span> paste <span class="token operator">=</span> <span class="token builtin">UIPasteboard</span><span class="token punctuation">.</span>general<span class="token punctuation">.</span>string<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>剪贴板的内容是可以随意获取的。而且可以随意更改。<br>可以静默地更改了用户的剪贴板后，配合支付宝的口令红包，或者淘宝的商品分享来推广商品。</p><p>截图方便。一种方法是检测用户按下Home+Lock，这个方法系统提供了通知的接口，直接调用就可以获取。<br>但是在使用微信的时候我发现，微信经常在你刚刚截图后打开一个聊天对象的时候，询问你是否要发送那张图片。这应该是由于微信获取了相册的权限，然后通过最后一张照片的创建时间来判断的。本文不涉及这些权限不再分析。</p><h2 id="获取其他APP信息"><a href="#获取其他APP信息" class="headerlink" title="获取其他APP信息"></a>获取其他APP信息</h2><p>在GitHub找到一个项目，介绍是可以获取到系统中正在运行中的App。<br>使用后没啥效果，查了查，从iOS9开始就关闭了这个权限。</p><p>例外说一下，在开发iOS高版本的App时，你就要更新你的编译器Xcode。<br>比如<strong>iOS12要出了，你不更新你的XCode你就不能适配iOS12</strong>。你更新了xcode也就意味着很多漏洞从你开发者手里就被修复掉了。我认为这种开发的机制也是iOS这个系统更安全的一个很重要的原因吧！</p><h2 id="后台运行问题"><a href="#后台运行问题" class="headerlink" title="后台运行问题"></a>后台运行问题</h2><p>前面提到了，iOS安全的地方不仅在于对于权限的严格把控。而且想做到【真】后台都很难。</p><p>目前比较常用的可以实现“真后台”的方法:<br>1.VOIP 2.定位服务 3.后台下载 4.在后台循环播放无声音乐</p><p>而且貌似在上架应用到时候，会专门检查这方面。所以方法也只是个策略而已。</p><p>那么是否可以利用假后台来做一些事情呢。<br>假后台机制是：用户按Home之后，App转入后台进行运行，此时拥有180s后台时间（iOS7以后）或者600s（iOS6）运行时间可以处理后台操作</p><p>应该是可以的。因为我手机上装了个QQ同步助手，这软件只有一个读通讯录的权限，我也从不打开它，但它常常发来<strong>云端通讯录已同步完成</strong>的通知。猜测是利用调用通知激活后台180s，再利用这180s肆意妄为。当然只是猜测。<br>由于实力有限在这方面没有过多测试。</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>小波iOS11中级篇笔记</title>
      <link href="/ios/xiao-bo-ios11-zhong-ji-pian-bi-ji/"/>
      <url>/ios/xiao-bo-ios11-zhong-ji-pian-bi-ji/</url>
      
        <content type="html"><![CDATA[<p>中级篇啦🤣开心点咯。虽然最近有点低落，就当发泄了。</p><a id="more"></a><h1 id="小知识点"><a href="#小知识点" class="headerlink" title="小知识点"></a>小知识点</h1><ul><li><code>&quot;&quot;&quot;</code>三引号对<code>&quot;&quot;&quot;</code>可以保留复制来的文本换行</li><li>图片显示方式：<ul><li>Scale to fill 拉伸 即拉到和框框一样的比例/大小</li><li>Aspect fit 居中 原图比例不变，但会有白边</li><li>Aspect fill 平铺 ，通常配合下面的裁边Clip to bounds使用</li></ul></li><li>属性line设为0. 即自动控制行数</li><li>内容扩展优先级 Content Hugging Priority 大了就低</li><li>Class 中的属性必须有值。如果你不想给值，可以加个 ！ 就是说它一定有值。</li><li>Btn.setTitle(“改标题”)</li><li>拖新文件到工程里记得选上<code>Copy item if needed</code>，不然只拖了个快捷方式</li><li>Didload只会执行一次</li><li>在整个Controller的属性中，选高度–》Freedom–》可以随意设置。方便查看。</li><li>转String可以不用<code>String(a)</code>用<code>a.description</code></li></ul><h1 id="自定义导航条"><a href="#自定义导航条" class="headerlink" title="自定义导航条"></a>自定义导航条</h1><h2 id="颜色（直接改回报错，是Xcode的Bug。只好用代码。）："><a href="#颜色（直接改回报错，是Xcode的Bug。只好用代码。）：" class="headerlink" title="颜色（直接改回报错，是Xcode的Bug。只好用代码。）："></a>颜色（直接改回报错，是Xcode的Bug。只好用代码。）：</h2><pre class="line-numbers language-swift"><code class="language-swift">navigationController<span class="token operator">?</span><span class="token punctuation">.</span>navigationBar<span class="token punctuation">.</span>largeTitleTextAttributes <span class="token operator">=</span> <span class="token punctuation">[</span>                <span class="token builtin">NSAttributedStringKey</span><span class="token punctuation">.</span>foregroundColor <span class="token punctuation">:</span> <span class="token function">UIColor</span><span class="token punctuation">(</span>named<span class="token punctuation">:</span> <span class="token string">"Theme123"</span><span class="token punctuation">)</span>            <span class="token punctuation">]</span>            <span class="token comment" spellcheck="true">//Theme123是自定义的Color Set名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="背景透明（用一个空图片）"><a href="#背景透明（用一个空图片）" class="headerlink" title="背景透明（用一个空图片）"></a>背景透明（用一个空图片）</h2><pre class="line-numbers language-swift"><code class="language-swift">navigationController<span class="token operator">?</span><span class="token punctuation">.</span>navigationBar<span class="token punctuation">.</span><span class="token function">setBackgroundImage</span><span class="token punctuation">(</span><span class="token function">UIImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">)</span>navigationController<span class="token operator">?</span><span class="token punctuation">.</span>navigationBar<span class="token punctuation">.</span>shadowImage <span class="token operator">=</span> <span class="token function">UIImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="隐藏返回标题"><a href="#隐藏返回标题" class="headerlink" title="隐藏返回标题"></a>隐藏返回标题</h2><p><img src="http://p66eruxmw.bkt.clouddn.com/15231886419894.jpg" alt=""><br>点标题。把Back button改成空格就好啦。</p><h2 id="自定义状态栏字体颜色"><a href="#自定义状态栏字体颜色" class="headerlink" title="自定义状态栏字体颜色"></a>自定义状态栏字体颜色</h2><pre class="line-numbers language-swift"><code class="language-swift">    <span class="token keyword">override</span> <span class="token keyword">var</span> preferredStatusBarStyle<span class="token punctuation">:</span> <span class="token builtin">UIStatusBarStyle</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">.</span>lightContent    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//写了上面的发现还不行。因为有全局导航条样式</span><span class="token comment" spellcheck="true">//新建一个swift文件： naviExt.swfit 写入以下内容</span><span class="token keyword">import</span> <span class="token builtin">UIKit</span><span class="token comment" spellcheck="true">//扩展导航条</span><span class="token keyword">extension</span> <span class="token builtin">UINavigationController</span><span class="token punctuation">{</span>    open <span class="token keyword">override</span> <span class="token keyword">var</span> childViewControllerForStatusBarStyle<span class="token punctuation">:</span> <span class="token builtin">UIViewController</span><span class="token operator">?</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> topViewController    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>没有导航条怎么改状态栏颜色：<br>在AppDelegate.swift文件中，插入到application函数一行：<br><code>UIApplication.shared.statusBarStyle = .lightContent</code></p><h1 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h1><h2 id="视差"><a href="#视差" class="headerlink" title="视差"></a>视差</h2><p>新建一个UIView变量<code>var headerView : UIView!</code>来替换原生的<code>tableView.tableHeaderView</code><br>代码如下</p><pre class="line-numbers language-swift"><code class="language-swift">        headerView <span class="token operator">=</span> tableView<span class="token punctuation">.</span>tableHeaderView<span class="token comment" spellcheck="true">//取出HeaderView</span>        tableView<span class="token punctuation">.</span>tableHeaderView <span class="token operator">=</span> <span class="token constant">nil</span>         tableView<span class="token punctuation">.</span><span class="token function">addSubview</span><span class="token punctuation">(</span>headerView<span class="token punctuation">)</span>        tableView<span class="token punctuation">.</span>contentInset <span class="token operator">=</span> <span class="token function">UIEdgeInsets</span><span class="token punctuation">(</span>top<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token keyword">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> bottom<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">right</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这时候整个Cell会下移300像素（可以通过输出<code>scrollView.contentOffset.y</code>的值看到是 -300），需要把headerView的位置上移300个像素。<br>代码如下</p><pre class="line-numbers language-swift"><code class="language-swift"><span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function">scrollViewDidScroll</span><span class="token punctuation">(</span><span class="token number">_</span> scrollView<span class="token punctuation">:</span> <span class="token builtin">UIScrollView</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> offsetY <span class="token operator">=</span> scrollView<span class="token punctuation">.</span>contentOffset<span class="token punctuation">.</span>y        headerView<span class="token punctuation">.</span>frame <span class="token operator">=</span> <span class="token function">CGRect</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> offsetY<span class="token punctuation">,</span> width<span class="token punctuation">:</span> scrollView<span class="token punctuation">.</span>bounds<span class="token punctuation">.</span>width<span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token operator">-</span>offsetY<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="模糊层"><a href="#模糊层" class="headerlink" title="模糊层"></a>模糊层</h2><ol><li>新建模糊层的 ViewController 。背景选成透明（Clear Color）</li><li>右键拖到新的 View Controller，选 Present Modally</li><li>转场效果中选 Over Current Context</li></ol><p>点击退场</p><p>拖一个手势到 <strong>View层</strong> 注意拖得不合适可能点击没效果。可以调试下。</p><p>然后拖着手势建一个IBAction：</p><pre class="line-numbers language-swift"><code class="language-swift"><span class="token atrule">@IBAction</span> <span class="token keyword">func</span> <span class="token function">tapBackground</span><span class="token punctuation">(</span><span class="token number">_</span> sender<span class="token punctuation">:</span> <span class="token builtin">Any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">dismiss</span><span class="token punctuation">(</span>animated<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="入场动画"><a href="#入场动画" class="headerlink" title="入场动画"></a>入场动画</h2><p>先在 didLoaded 时把它放到800里之外<br><code>stackView.transform = .init(translationX: 800, y: 0)</code></p><p>再在 didApeal时 让它飞进来</p><pre class="line-numbers language-swift"><code class="language-swift"><span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function">viewDidAppear</span><span class="token punctuation">(</span><span class="token number">_</span> animated<span class="token punctuation">:</span> <span class="token builtin">Bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span>  animator <span class="token operator">=</span> <span class="token function">UIViewPropertyAnimator</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> curve<span class="token punctuation">:</span> <span class="token punctuation">.</span>easeIn<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">self</span><span class="token punctuation">.</span>stackView<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token punctuation">.</span>identity        <span class="token punctuation">}</span>        animator<span class="token punctuation">.</span><span class="token function">startAnimation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进阶版<br>按钮组在这里拖按钮。<br><img src="http://p66eruxmw.bkt.clouddn.com/15233413710890.jpg" alt="按钮组"></p><p>然后把变量分别拖到各个按钮上，这些按钮就是一组的了。</p><pre class="line-numbers language-swift"><code class="language-swift"><span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function">viewDidLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">viewDidLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">let</span> startPostion <span class="token operator">=</span> <span class="token function">CGAffineTransform</span><span class="token punctuation">(</span>translationX<span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> button <span class="token keyword">in</span> rateItemBtn<span class="token punctuation">{</span>            button<span class="token punctuation">.</span>transform <span class="token operator">=</span> startPostion            button<span class="token punctuation">.</span>alpha <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">//把他们都设透明</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function">viewDidAppear</span><span class="token punctuation">(</span><span class="token number">_</span> animated<span class="token punctuation">:</span> <span class="token builtin">Bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">UIViewPropertyAnimator</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> <span class="token number">0.4</span><span class="token punctuation">,</span> dampingRatio<span class="token punctuation">:</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">self</span><span class="token punctuation">.</span>rateItemBtn<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token punctuation">.</span>identity            <span class="token keyword">self</span><span class="token punctuation">.</span>rateItemBtn<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>alpha <span class="token operator">=</span> <span class="token number">1</span>            <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">startAnimation</span><span class="token punctuation">(</span>afterDelay<span class="token punctuation">:</span> <span class="token number">0.1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//第一个按钮0.1秒后出现</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="拖拽手势"><a href="#拖拽手势" class="headerlink" title="拖拽手势"></a>拖拽手势</h2><pre class="line-numbers language-swift"><code class="language-swift">    <span class="token atrule">@IBAction</span> <span class="token keyword">func</span> <span class="token function">dragStackView</span><span class="token punctuation">(</span><span class="token number">_</span> sender<span class="token punctuation">:</span> <span class="token builtin">UIPanGestureRecognizer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> sender<span class="token punctuation">.</span>state <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token punctuation">.</span>changed<span class="token punctuation">:</span>            <span class="token keyword">let</span> translate <span class="token operator">=</span> sender<span class="token punctuation">.</span><span class="token function">translation</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> view<span class="token punctuation">)</span>            <span class="token keyword">let</span> position <span class="token operator">=</span> <span class="token function">CGAffineTransform</span><span class="token punctuation">(</span>translationX<span class="token punctuation">:</span> translate<span class="token punctuation">.</span>x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> translate<span class="token punctuation">.</span>y<span class="token punctuation">)</span>            <span class="token keyword">let</span> angle <span class="token operator">=</span> <span class="token function">sin</span><span class="token punctuation">(</span>translate<span class="token punctuation">.</span>x <span class="token operator">/</span> stackView<span class="token punctuation">.</span>frame<span class="token punctuation">.</span>width<span class="token punctuation">)</span>            stackView<span class="token punctuation">.</span>transform <span class="token operator">=</span> position<span class="token punctuation">.</span><span class="token function">rotated</span><span class="token punctuation">(</span>by<span class="token punctuation">:</span> angle<span class="token punctuation">)</span>        <span class="token keyword">case</span> <span class="token punctuation">.</span>ended<span class="token punctuation">:</span>            <span class="token function">UIViewPropertyAnimator</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> <span class="token number">0.4</span><span class="token punctuation">,</span> dampingRatio<span class="token punctuation">:</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">self</span><span class="token punctuation">.</span>stackView<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token punctuation">.</span>identity            <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">startAnimation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>        <span class="token punctuation">}</span>       <span class="token punctuation">}</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="反向转场"><a href="#反向转场" class="headerlink" title="反向转场"></a>反向转场</h2><p>先写一个转场函数：</p><pre><code>@IBAction func backToDetail(segue: UIStoryboardSegue){}</code></pre><p><img src="http://p66eruxmw.bkt.clouddn.com/15233456161140.jpg" alt=""><br>把按钮拖到这个Exit上。选择上面的函数就好啦。</p><h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><h2 id="Encode-JSON"><a href="#Encode-JSON" class="headerlink" title="Encode JSON"></a>Encode JSON</h2><pre class="line-numbers language-swift"><code class="language-swift"> <span class="token keyword">func</span> <span class="token function">saveToJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> coder <span class="token operator">=</span> <span class="token function">JSONEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">try</span> coder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>weapons<span class="token punctuation">)</span>            <span class="token keyword">let</span> saveUrl <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>fileURLWithPath<span class="token punctuation">:</span> <span class="token function">NSHomeDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendingPathComponent</span><span class="token punctuation">(</span><span class="token string">"weapons.json"</span><span class="token punctuation">)</span>            <span class="token keyword">try</span> data<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> saveUrl<span class="token punctuation">)</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"保存成功！路径："</span><span class="token punctuation">,</span>saveUrl<span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"编码错误: "</span><span class="token punctuation">,</span>error<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Decode-JSON"><a href="#Decode-JSON" class="headerlink" title="Decode JSON"></a>Decode JSON</h2><pre><code>func loadJson()  {    let coder = JSONDecoder()    do {        let url = Bundle.main.url(forResource: &quot;weapons&quot;, withExtension: &quot;json&quot;)!        let data = try Data(contentsOf: url)        weapons = try coder.decode([Weapon].self, from: data)    } catch  {        print(error)    }}</code></pre><h1 id="数据录入"><a href="#数据录入" class="headerlink" title="数据录入"></a>数据录入</h1><h2 id="Picker-View"><a href="#Picker-View" class="headerlink" title="Picker View"></a>Picker View</h2><ol><li>每个Picker加一个tag用来标识</li><li>ctrl拖到Controller上选上Delegate和DataSource</li><li>新建一个PickerViewFill.swift写入以下内容：</li></ol><pre class="line-numbers language-swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token builtin">UIKit</span><span class="token keyword">extension</span> 你要扩展的面controller<span class="token punctuation">:</span><span class="token builtin">UIPickerViewDelegate</span><span class="token punctuation">,</span><span class="token builtin">UIPickerViewDataSource</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>会自动填充出两个函数。<br>一个控制行，一个控制列。</p><p>如何区分不同的列呢。<br><code>component</code>就是列数 （从0开始）</p><p>联动：打didselect联想出这个函数：</p><pre class="line-numbers language-swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function">pickerView</span><span class="token punctuation">(</span><span class="token number">_</span> pickerView<span class="token punctuation">:</span> <span class="token builtin">UIPickerView</span><span class="token punctuation">,</span> didSelectRow row<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> inComponent component<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> pickerView<span class="token punctuation">.</span>tag <span class="token operator">==</span> <span class="token number">12</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> component <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>                pickerView<span class="token punctuation">.</span><span class="token function">reloadComponent</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Stepper"><a href="#Stepper" class="headerlink" title="Stepper"></a>Stepper</h2><pre class="line-numbers language-swift"><code class="language-swift"><span class="token atrule">@IBAction</span> <span class="token keyword">func</span> <span class="token function">mvStepper</span><span class="token punctuation">(</span><span class="token number">_</span> sender<span class="token punctuation">:</span> <span class="token builtin">UIStepper</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        textFieldMv<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token function">Int</span><span class="token punctuation">(</span>exactly<span class="token punctuation">:</span> sender<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">.</span>description    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="点击单元格"><a href="#点击单元格" class="headerlink" title="点击单元格"></a>点击单元格</h1><p><strong>didSelect</strong></p><pre class="line-numbers language-swift"><code class="language-swift"><span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function">tableView</span><span class="token punctuation">(</span><span class="token number">_</span> tableView<span class="token punctuation">:</span> <span class="token builtin">UITableView</span><span class="token punctuation">,</span> didSelectRowAt indexPath<span class="token punctuation">:</span> <span class="token builtin">IndexPath</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// indexPath就是坐标 [0,0] 第一个是session号，第二个是行</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Alert"><a href="#Alert" class="headerlink" title="Alert"></a>Alert</h2><h3 id="Alertsheet"><a href="#Alertsheet" class="headerlink" title="Alertsheet"></a>Alertsheet</h3><pre class="line-numbers language-swift"><code class="language-swift"> <span class="token keyword">let</span> actionSheet <span class="token operator">=</span> <span class="token function">UIAlertController</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string">"总标题"</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token constant">nil</span><span class="token punctuation">,</span> preferredStyle<span class="token punctuation">:</span> <span class="token punctuation">.</span>actionSheet<span class="token punctuation">)</span>            <span class="token keyword">let</span> action1 <span class="token operator">=</span> <span class="token function">UIAlertAction</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string">"111"</span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token keyword">default</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span><span class="token number">_</span><span class="token punctuation">)</span> <span class="token keyword">in</span>            <span class="token punctuation">}</span>            <span class="token keyword">let</span> action2 <span class="token operator">=</span> <span class="token function">UIAlertAction</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string">"222"</span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span><span class="token number">_</span><span class="token punctuation">)</span> <span class="token keyword">in</span>            <span class="token keyword">let</span> cancel <span class="token operator">=</span> <span class="token function">UIAlertAction</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string">"Cancel"</span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token punctuation">.</span>cancel<span class="token punctuation">,</span> handler<span class="token punctuation">:</span> <span class="token constant">nil</span><span class="token punctuation">)</span>            actionSheet<span class="token punctuation">.</span><span class="token function">addAction</span><span class="token punctuation">(</span>action1<span class="token punctuation">)</span>            actionSheet<span class="token punctuation">.</span><span class="token function">addAction</span><span class="token punctuation">(</span>action2<span class="token punctuation">)</span>            <span class="token function">present</span><span class="token punctuation">(</span>actionSheet<span class="token punctuation">,</span>animated<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
            <tag> Swfit </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift Demo2 查天气</title>
      <link href="/ios/swiftdemo2/"/>
      <url>/ios/swiftdemo2/</url>
      
        <content type="html"><![CDATA[<p>通过API查天气。</p><a id="more"></a><h1 id="载入"><a href="#载入" class="headerlink" title="载入"></a>载入</h1><p>界面简单，<br>三个Label（地址、温度、描述）<br>一个Btn。</p><p>先把Btn写出来。<br>弹出Alert，附带一个文本输入框，把输入框的值传给通过Api获取天气数据的函数。代码如下：</p><pre class="line-numbers language-swift"><code class="language-swift"><span class="token atrule">@IBAction</span> <span class="token keyword">func</span> <span class="token function">setCityBtn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//先来个alert</span>        <span class="token keyword">let</span> alert <span class="token operator">=</span> <span class="token function">UIAlertController</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string">"Set City"</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token constant">nil</span><span class="token punctuation">,</span> preferredStyle<span class="token punctuation">:</span> <span class="token punctuation">.</span>alert<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//加Cancel按钮   </span>        alert<span class="token punctuation">.</span><span class="token function">addAction</span><span class="token punctuation">(</span><span class="token function">UIAlertAction</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string">"Cancel"</span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token punctuation">.</span>cancel<span class="token punctuation">,</span> handler<span class="token punctuation">:</span> <span class="token constant">nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//加OK按钮，如果文本不为空则传给tf(TextField)，再用tf传给cityName，再用city传给getWeatherData函数</span>        alert<span class="token punctuation">.</span><span class="token function">addAction</span><span class="token punctuation">(</span><span class="token function">UIAlertAction</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string">"OK"</span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">,</span> handler<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>action<span class="token punctuation">)</span> <span class="token keyword">in</span>            <span class="token keyword">if</span> <span class="token keyword">let</span> tf <span class="token operator">=</span> alert<span class="token punctuation">.</span>textFields<span class="token operator">?</span><span class="token punctuation">.</span><span class="token builtin">first</span><span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token keyword">let</span> cityName <span class="token operator">=</span> tf<span class="token punctuation">.</span>text<span class="token punctuation">{</span>                    <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">getWeatherData</span><span class="token punctuation">(</span>cityName<span class="token punctuation">:</span> cityName<span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//加个文本框</span>        alert<span class="token punctuation">.</span><span class="token function">addTextField</span><span class="token punctuation">(</span>configurationHandler<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>tf<span class="token punctuation">)</span> <span class="token keyword">in</span>            tf<span class="token punctuation">.</span>placeholder<span class="token operator">=</span><span class="token string">"Please input city"</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//显示Alert</span>        <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">present</span><span class="token punctuation">(</span>alert<span class="token punctuation">,</span>animated<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>completion<span class="token punctuation">:</span> <span class="token constant">nil</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="天气Api"><a href="#天气Api" class="headerlink" title="天气Api"></a>天气Api</h1><p>用了知心天气的API。<a href="https://api.seniverse.com/v3/weather/now.json?key=123456&amp;location=jinan&amp;language=zh-Hans&amp;unit=c" target="_blank" rel="noopener">https://api.seniverse.com/v3/weather/now.json?key=123456&amp;location=jinan&amp;language=zh-Hans&amp;unit=c</a></p><p>其中如果要处理非HTTPS的网址，会报错。需要在info.plist文件中添加下面的选项：<br><img src="http://p66eruxmw.bkt.clouddn.com/15226535153796.jpg" alt=""></p><h2 id="SwiftyJSON"><a href="#SwiftyJSON" class="headerlink" title="SwiftyJSON"></a>SwiftyJSON</h2><p><del>说实话我遇到问题了。等我读了SwfityJSON的文档回来研究明白再说吧。有点尬了。撤了撤了。</del></p><p>根据我滴最新查询，使用Swift 4.0的Codable暂时可以舍弃SwiftyJSON。<br>我们走起。</p><p>先解决怎么读Url的内容问题：</p><h2 id="读url"><a href="#读url" class="headerlink" title="读url"></a>读url</h2>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>爬虫入门笔记+实战爬福利吧图片</title>
      <link href="/python/pa-chong-ru-men-bi-ji/"/>
      <url>/python/pa-chong-ru-men-bi-ji/</url>
      
        <content type="html"><![CDATA[<p>今天开始学爬虫。爬个啥呢还没想好。🤭我的Python已经饥渴难耐了~</p><a id="more"></a><h1 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h1><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><pre><code>import reptn = r&#39;正则表达式&#39;</code></pre><ul><li><p><code>re.compile()</code>函数是什么？<br>将正则表达式的字符串形式编译为Pattern<strong>实例</strong></p></li><li><p>正则小抄图片 影响文章排版 放到最下面了。</p></li><li>Note：数量词用在 <code>字符</code>或 <code>()</code> 之后，就是说对整个 <code>()</code> 生效</li></ul><h2 id="urllib"><a href="#urllib" class="headerlink" title="urllib"></a>urllib</h2><h3 id="读网页"><a href="#读网页" class="headerlink" title="读网页"></a>读网页</h3><pre><code>from urllib.request import urlopen# utf-8解码html = urlopen(&quot;https://o--o.win&quot;).read().decode(&#39;utf-8&#39;)print(html)</code></pre><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><pre><code>from urllib.request import urlretrieveurlretrieve(IMAGE_URL, &#39;./img/image1.png&#39;)</code></pre><h2 id="BeautifulSoup"><a href="#BeautifulSoup" class="headerlink" title="BeautifulSoup"></a>BeautifulSoup</h2><p><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc.zh/index.html" target="_blank" rel="noopener">官方文档</a></p><p>这才是正餐？<br>Ex：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> urlopen<span class="token keyword">import</span> re<span class="token keyword">import</span> random<span class="token comment" spellcheck="true">#import webbrowser</span>base_url <span class="token operator">=</span> <span class="token string">"https://baike.baidu.com"</span>his <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"/item/%e5%91%a8%e6%9d%b0%e4%bc%a6"</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#his = his.encode('uft-8')</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    url <span class="token operator">=</span> base_url <span class="token operator">+</span> his<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    html <span class="token operator">=</span> urlopen<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#webbrowser.open(url)</span>    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span>features<span class="token operator">=</span><span class="token string">'lxml'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'h1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'\n后缀：'</span><span class="token punctuation">,</span>his<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#正则找到 属性href是/item/开头 的 a标签</span>    sub_urls <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"target"</span><span class="token punctuation">:</span><span class="token string">"_blank"</span><span class="token punctuation">,</span><span class="token string">"href"</span><span class="token punctuation">:</span>re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">"/item/"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#随机选取一个a标签中的href属性值，接到his后。</span>    his<span class="token punctuation">.</span>append<span class="token punctuation">(</span>random<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>sub_urls<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'href'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#sample(population, k)从list中随机抽k个元素，也就是说抽完的结果还是个list，因此先跟了个[0]。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>若想加入容错,最后一句改成:</p><pre class="line-numbers language-Python"><code class="language-Python"> if len(sub_urls) != 0:        his.append(random.sample(sub_urls, 1)[0]['href'])    else:        # no valid sub link found        his.pop()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Requests"><a href="#Requests" class="headerlink" title="Requests"></a>Requests</h2><p>强大的外部需求模块<br><a href="http://docs.python-requests.org/zh_CN/latest/" target="_blank" rel="noopener">官方文档</a></p><h3 id="Get"><a href="#Get" class="headerlink" title="Get"></a>Get</h3><pre class="line-numbers language-Python"><code class="language-Python">import requestsimport webbrowserparam = {"wd": "炫猿"}  # 搜索的信息r = requests.get('http://www.baidu.com/s', params=param)print(r.url)webbrowser.open(r.url)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Post"><a href="#Post" class="headerlink" title="Post"></a>Post</h3><pre class="line-numbers language-python"><code class="language-python">data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'firstname'</span><span class="token punctuation">:</span> <span class="token string">'莫烦'</span><span class="token punctuation">,</span> <span class="token string">'lastname'</span><span class="token punctuation">:</span> <span class="token string">'周'</span><span class="token punctuation">}</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'http://pythonscraping.com/files/processing.php'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h3><pre class="line-numbers language-python"><code class="language-python">r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>IMAGE_URL<span class="token punctuation">)</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'./img/image2.png'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>r<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> requests 能让你下一点, 保存一点, 而不是要全部下载完才能保存去另外的地方. 这就是一个 chunk 一个 chunk 的下载. 使用 r.iter_content(chunk_size) 来控制每个 chunk 的大小, 然后在文件中写入这个 chunk 大小的数据.</p><pre><code>r = requests.get(IMAGE_URL, stream=True)    # stream loadingwith open(&#39;./img/image3.png&#39;, &#39;wb&#39;) as f:    for chunk in r.iter_content(chunk_size=32):        f.write(chunk)</code></pre><h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1><p>这样基本可以入门了。<br>就来爬一下我每天都要上的福利网址福利吧吧。福利吧每天有个文章叫汇总。里面充满了MM。就拿这些MM练手了~<br>Demo1：</p><pre><code>from bs4 import BeautifulSoupimport requestsbase_URL = &quot;http://fuliba.net/20180&quot;for i in range(1,10):    URL = base_URL+str(i)+&quot;.html&quot;    print(&quot;第 %s 期&quot; % i)    html = requests.get(URL).text    soup = BeautifulSoup(html,features=&quot;lxml&quot;)    imgs = soup.find_all(&#39;img&#39;,{&quot;class&quot;:&quot;alignnone size-large&quot;})    for img in imgs:        url = img[&#39;src&#39;]        r = requests.get(url,stream=True)        #图片地址用 / 分割，再选最后一块作文件名        image_name = url.split(&#39;/&#39;)[-1]        with open(&#39;/Users/lixs/Pictures/%s&#39; % image_name, &#39;wb&#39;) as f:            for chunk in r.iter_content(chunk_size=128):                f.write(chunk)        print(&#39;Saved %s&#39; % image_name)</code></pre><p>运行结果：<br><img src="http://p66eruxmw.bkt.clouddn.com/15229998430539.jpg" alt=""><br>战果：<br><img src="http://p66eruxmw.bkt.clouddn.com/15229999645914.jpg" alt=""></p><h1 id="Problems"><a href="#Problems" class="headerlink" title="Problems"></a>Problems</h1><h2 id="TypeError-expected-string-or-bytes-like-object"><a href="#TypeError-expected-string-or-bytes-like-object" class="headerlink" title="TypeError: expected string or bytes-like object"></a>TypeError: expected string or bytes-like object</h2><p>对着网上教程，开门就遇到这个报错。<br>搜了下，原来是<br><code>re.findall(r&quot;&lt;title&gt;(.+?)&lt;/title&gt;&quot;, html)</code><br>这种写法是Python2的。<br>在Python3中只需要改写成<br><code>res = re.findall(r&quot;&lt;title&gt;(.+?)&lt;/title&gt;&quot;, str(html))</code></p><h2 id="百度为什么要用Get而不用Post呢？"><a href="#百度为什么要用Get而不用Post呢？" class="headerlink" title="百度为什么要用Get而不用Post呢？"></a>百度为什么要用Get而不用Post呢？</h2><p>于是搜到这篇文章<br><a href="https://blog.csdn.net/yansong_8686/article/details/48638957" target="_blank" rel="noopener">为什么有了post那么多优点，还有还多网站用get，比如百度搜索</a></p><h2 id="网址是中文的情况"><a href="#网址是中文的情况" class="headerlink" title="网址是中文的情况"></a>网址是中文的情况</h2><p><code>html = urlopen(&quot;https://baike.baidu.com/item/周杰伦/&quot;).read().decode(&#39;utf-8&#39;)</code><br>很明显虽然 <code>decode(&#39;utf-8&#39;)</code>可以解决<strong>网页</strong>内容是中文的问题，<br>可当<strong>网址</strong>是中文的时候，还是会报错<br><code>UnicodeEncodeError: &#39;ascii&#39; codec can&#39;t encode characters in position 10-12: ordinal not in range(128)</code></p><blockquote><p>当我在博客里写下上面这行字的时候，<br>我就突发奇想要再url字符串后decode()一下，<br>哈哈，去试试。<br>哈哈,不行。</p></blockquote><p>于是乎搜到这两篇文章：<br><a href="http://www.ruanyifeng.com/blog/2010/02/url_encoding.html" target="_blank" rel="noopener">关于URL编码</a><br><a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html" target="_blank" rel="noopener">字符编码笔记：ASCII，Unicode 和 UTF-8</a><br><strong>最终解决方案：</strong><br><a href="http://tool.chinaz.com/Tools/Unicode.aspx" target="_blank" rel="noopener">在线Unicode编码转换</a></p><p>后来发现如果直接用Requests，不会有这种问题。</p><h1 id="正则表达式小抄"><a href="#正则表达式小抄" class="headerlink" title="正则表达式小抄"></a>正则表达式小抄</h1><p><img src="http://p66eruxmw.bkt.clouddn.com/15226337908654.jpg" alt="正则表达式小抄"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Demo </tag>
            
            <tag> Python </tag>
            
            <tag> Spider </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo渲染时设置例外</title>
      <link href="/website/hexo-xuan-ran-shi-she-zhi-li-wai/"/>
      <url>/website/hexo-xuan-ran-shi-she-zhi-li-wai/</url>
      
        <content type="html"><![CDATA[<p>由于网络书签同步总是不方便，我把常用的网址做成了一个导航站<a href="http://oo1.win" target="_blank" rel="noopener">炫猿</a> 这个站是纯HTML配合Bootstrap写的，所以没有任何后台。但当我把它整个拖到Hexo里时，Hexo就把它“毁了”。So,有了这篇文章。</p><a id="more"></a><h1 id="目前使用的方法："><a href="#目前使用的方法：" class="headerlink" title="目前使用的方法："></a>目前使用的方法：</h1><p>在HTML文件前增加</p><h2 id="layout-false"><a href="#layout-false" class="headerlink" title="layout: false"></a>layout: false</h2><p>来，体验一下：<br><a href="/oo1">炫猿</a></p><h1 id="方法二：设置例外目录"><a href="#方法二：设置例外目录" class="headerlink" title="方法二：设置例外目录"></a>方法二：设置例外目录</h1><p>假设你的Source文件夹里面有个Demo目录，要忽略Demo目录下的所有html页面，可以通过在<code>_config.yml</code>设置skip_render来忽略的目录，具体如下：<br><code>skip_render: Demo/*.html</code></p><p>文件匹配是基于正则匹配的，更复杂的情况如下</p><p>1.单个文件夹下全部文件：<code>skip_render: demo/*</code></p><p>2.单个文件夹下指定类型文件：<code>skip_render: demo/*.html</code><br>3.单个文件夹下全部文件以及子目录:<code>skip_render: demo/**</code></p><p>4.多个文件夹以及各种复杂情况：</p><pre><code>skip_render:    - &#39;demo/*.html&#39;    - &#39;demo/**&#39;</code></pre><p>哈哈。明年主机不用续费了。</p>]]></content>
      
      
      <categories>
          
          <category> Website </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS布局问题入门</title>
      <link href="/ios/ios-bu-ju-wen-ti/"/>
      <url>/ios/ios-bu-ju-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>昨天重拾iOS发现，怎么加Constraints等设计Layout的问题全忘了。赶紧复习一下。</p><a id="more"></a><h1 id="Alignment-居中"><a href="#Alignment-居中" class="headerlink" title="Alignment 居中"></a>Alignment 居中</h1><p><img src="http://p66eruxmw.bkt.clouddn.com/15225461854172.jpg" alt=""><br>这两个√解决</p><h1 id="AutoLayout-自动布局"><a href="#AutoLayout-自动布局" class="headerlink" title="AutoLayout 自动布局"></a>AutoLayout 自动布局</h1><p><img src="http://p66eruxmw.bkt.clouddn.com/15225464765593.jpg" alt=""><br>注意。边界要选Safe Area。</p><h1 id="Stack-View"><a href="#Stack-View" class="headerlink" title="Stack View"></a>Stack View</h1><p>选中多个组件。<br><img src="http://p66eruxmw.bkt.clouddn.com/15225472613960.jpg" alt=""><br>点击按钮即可组合成一个StackView。<br>StackView里内容的居中、各项间距、平铺等在右侧设置：<br><img src="http://p66eruxmw.bkt.clouddn.com/15225473613893.jpg" alt=""></p><h1 id="等宽登高"><a href="#等宽登高" class="headerlink" title="等宽登高"></a>等宽登高</h1><p>两个View等宽。点住一个右键（或Ctrl）拖到另一个View：<br><img src="http://p66eruxmw.bkt.clouddn.com/15225471342124.jpg" alt=""><br>选择等宽。一般是和Safe Area等宽</p><h1 id="竖屏-横屏的布局切换问题"><a href="#竖屏-横屏的布局切换问题" class="headerlink" title="竖屏/横屏的布局切换问题"></a>竖屏/横屏的布局切换问题</h1><h2 id="Size-Class"><a href="#Size-Class" class="headerlink" title="Size Class"></a>Size Class</h2><p>横屏竖屏布局必须先了解iOS的SizeClass机制。<br>R = Regular 正常<br>C = Compact 紧凑</p><table><thead><tr><th></th><th>iPad</th></tr></thead><tbody><tr><td>高</td><td>R</td></tr><tr><td>宽</td><td>R</td></tr></tbody></table><table><thead><tr><th>iPhone</th><th>竖屏</th><th>横屏</th></tr></thead><tbody><tr><td>高</td><td>R</td><td>C</td></tr><tr><td>宽</td><td>C</td><td>C/R(Plus)</td></tr></tbody></table><p>Note：iPhone X在横屏下竟然全是紧凑：<br><img src="http://p66eruxmw.bkt.clouddn.com/15225480367581.jpg" alt=""></p><p>也就是说只有Plus是在横屏下的宽是R。<br>设计时可以在iPhone X的布局下适配。</p><h2 id="增加变体"><a href="#增加变体" class="headerlink" title="增加变体"></a>增加变体</h2><p>懂了Size Class这个这时候就可以增加新的变体Constraints：<br><img src="http://p66eruxmw.bkt.clouddn.com/15225484528282.jpg" alt=""></p><hr><p>Note：<br>双击约束可以编辑。并增加变体约束。<br><img src="http://p66eruxmw.bkt.clouddn.com/15225489037498.jpg" alt=""></p><hr><p>最后的Installed可以设置这个Constraints在此Size Class下是否√生效：<img src="http://p66eruxmw.bkt.clouddn.com/15225491484322.jpg" alt=""></p><p>OK。这些布局差不多够入门的了。</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> Design </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>R常用命令</title>
      <link href="/others/r-xue-xi-ji-lu/"/>
      <url>/others/r-xue-xi-ji-lu/</url>
      
        <content type="html"><![CDATA[<p>R语言常用命令记录</p><a id="more"></a><ul><li><code>?&#39;mean&#39;</code>可以看介绍</li><li><code>apropos(&quot;mea&quot;)</code>搜包含mea字符的方法</li></ul><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><p>数学运算：<br>+，-，*，/，^，%%。(加，减，乘，除，乘方，求余。)</p><p>比较运算：</p><blockquote><p>，&lt;，&gt;=，&lt;=，==，!=。(大于，小于，大于等于，小于等于，等于，不等于。)</p></blockquote><p>逻辑运算：<br>&amp;，|，!。(与，或，非。)</p><ul><li>初始基本操作</li></ul><hr><blockquote><p>getwd()</p><ul><li>获取工作目录。</li></ul></blockquote><blockquote><p>setwd(“F:/R/myfun”)</p><ul><li>设定工作目录为F:/R/myfun。</li></ul></blockquote><blockquote><p>help(com)<br>?com</p><ul><li>获得对命令com的说明。</li></ul></blockquote><blockquote><p>example(com)</p><ul><li>命令com的使用实例。</li></ul></blockquote><blockquote><p>args(com)</p><ul><li>查看命令com的变量格式。</li></ul></blockquote><blockquote><p>library()</p><ul><li>列出已安装的包。</li></ul></blockquote><blockquote><p>library(AER)  -  或用<br>require(AER)</p><ul><li>载入包AER。</li></ul></blockquote><blockquote><p>library(help = AER)</p><ul><li>获取包AER的信息。</li></ul></blockquote><blockquote><p>detach(package:AER)</p><ul><li>去除载入的包AER。</li></ul></blockquote><blockquote><p>search()</p><ul><li>列出已载入的包。</li></ul></blockquote><blockquote><p>data()</p><ul><li>列出已载入的包中的所有数据集。</li></ul></blockquote><blockquote><p>data(package = .packages(all.available = TRUE))</p><ul><li>列出已安装的包中的所有数据集。</li></ul></blockquote><blockquote><p>try(data(package = “AER”) )</p><ul><li>列出包AER里的所有数据集。</li></ul></blockquote><blockquote><p>data(Affairs, “BankWages”)</p><ul><li>读入数据集Affairs和BankWages(这些数据集需已在data()中列出)。</li></ul></blockquote><blockquote><p>help(Affairs)</p><ul><li>获取数据集Affairs的信息。</li></ul></blockquote><blockquote><p>attach(Affairs)</p><ul><li>贴上数据集Affairs，其作用是可以直接对数据集里的变量进行操作。</li></ul></blockquote><blockquote><p>detach(Affairs)</p><ul><li>上述操作的逆操作。</li></ul></blockquote><hr><h1 id="对一般对象的基本操作"><a href="#对一般对象的基本操作" class="headerlink" title="对一般对象的基本操作"></a>对一般对象的基本操作</h1><blockquote><p>objects()<br>ls()</p><ul><li>列出所有对象。</li></ul></blockquote><blockquote><p>mode(x)</p><ul><li>查看对象x的模式：空，数值，字符，逻辑，复数，列表，函数(NULL，numeric，character，logical，complex，list，function)。</li></ul></blockquote><blockquote><p>class(x)</p><ul><li>查看对象x的类型：除了mode里列出的几种类型外，还有整数，矩阵，因子，阵列，数据框，时间序列(integer，matrix，factor，array，data frame，ts)等其他类型。mode主要用于区别数据存放的方式，而class是一种更细微的分类方式，比如矩阵，就是一种更“有序”的数据存放方式。此命令比mode常用。</li></ul></blockquote><blockquote><p>as.matrix(x)</p><ul><li>把对象x转为矩阵型。</li></ul></blockquote><blockquote><p>as.numeric(x)</p><ul><li>把对象x转为数值型。</li></ul></blockquote><blockquote><p>str(x)</p><ul><li>查看对象x的结构。str是structure的缩写。</li></ul></blockquote><blockquote><p>rm(x)</p><ul><li>移除对象x。</li></ul></blockquote><blockquote><p>rm(list=ls(all=TRUE))</p><ul><li>移除所有对象。</li></ul></blockquote><hr><h1 id="与向量有关的基本操作"><a href="#与向量有关的基本操作" class="headerlink" title="与向量有关的基本操作"></a>与向量有关的基本操作</h1><blockquote><p>x = c(1,2,4)</p><ul><li>生成元素依次为1,2,4的向量x，这里的c是concatenate的意思。注意其类型是数值，不是矩阵。</li></ul></blockquote><blockquote><p>x = c(“a”,”b”,”cd”)</p><ul><li>生成元素依次为”a”,”b”,”cd”的字符向量x。</li></ul></blockquote><blockquote><p>x = paste(“a”,”b”,”cd”)</p><ul><li>生成”a b cd”的字符x。</li></ul></blockquote><blockquote><p>x[a:b]</p><ul><li>向量x的第a到b个元素。</li></ul></blockquote><blockquote><p>x[-i]</p><ul><li>剔除向量x第i个元素所得的向量。</li></ul></blockquote><blockquote><p>length(x)</p><ul><li>向量x的长度。</li></ul></blockquote><blockquote><p>x = seq(a, b, length = n)</p><ul><li>生成以一个n维数值型向量x，第一个元素为a，最后一个元素为b，中间元素依次等距递增。(假设a&lt;b)</li></ul></blockquote><blockquote><p>x = seq(a, b, c)</p><ul><li>生成一个数值型向量x，第一个元素为a，其后元素依次加c，直到最后一个元素加c大于b。(假设a&lt;b)</li></ul></blockquote><blockquote><p>x = seq(a)</p><ul><li>从1开始生成一个递增或递减数值型向量x，最后一个元素绝对值为小于等于|a|的最大整数。</li></ul></blockquote><blockquote><p>x = a:b</p><ul><li>生成一个从a递增(减)到b的数值型向量x。(a和b都是整数)</li></ul></blockquote><blockquote><p>x = rep(v, n)</p><ul><li>对向量v进行n次复制生成新的向量x。</li></ul></blockquote><blockquote><p>x = rep(v, each = n)</p><ul><li>依次对向量v的每个元素复制n此生成新的向量x。</li></ul></blockquote><blockquote><p>x = round(v)</p><ul><li>生成一个向量x，其中每个元素是v对应元素的最近整数。</li></ul></blockquote><blockquote><p>order(x)</p><ul><li>获得向量x第i大元素在向量中的位置。</li></ul></blockquote><blockquote><p>rank(x)</p><ul><li>获得向量x每个元素大小位置。</li></ul></blockquote><blockquote><p>sort(x)</p><ul><li>对向量x从小到大进行排序。降序：sort(x, decreasing = TRUE)。</li></ul></blockquote><blockquote><p>tapply(x,f,g)</p><ul><li>根据因子f对向量x分类执行函数g。</li></ul></blockquote><blockquote><p>split(x,f)</p><ul><li>向量x按因子f分类。</li></ul></blockquote><blockquote><p>diff(x)</p><ul><li>返回向量x的差分向量。</li></ul></blockquote><blockquote><p>cumsum(x)</p><ul><li>返回向量x的累加向量。</li></ul></blockquote><hr><h1 id="与矩阵有关的基本操作"><a href="#与矩阵有关的基本操作" class="headerlink" title="与矩阵有关的基本操作"></a>与矩阵有关的基本操作</h1><hr><blockquote><p>M = matrix(0,c(m,n))</p><ul><li>生成m行n列的0矩阵。</li></ul></blockquote><blockquote><p>M = rbind(X,Y)</p><ul><li>按行合并矩阵X和Y形成新矩阵M。(X和Y列数需相同）</li></ul></blockquote><blockquote><p>M = cbind(X,Y)</p><ul><li>按列合并矩阵X和Y形成新矩阵M。(X和Y行数需相同）</li></ul></blockquote><blockquote><p>colnames(M)</p><ul><li>矩阵M的列名。</li></ul></blockquote><blockquote><p>rownames(M)</p><ul><li>矩阵M的行名。</li></ul></blockquote><blockquote><p>nrow(M)</p><ul><li>矩阵M的行数。</li></ul></blockquote><blockquote><p>ncol(M)</p><ul><li>矩阵M的列数。</li></ul></blockquote><blockquote><p>diag(M)</p><ul><li>矩阵M的对角线元素形成的向量</li></ul></blockquote><blockquote><p>M = diag(x)</p><ul><li>生成以向量x为对角线元素，其他位置元素为0的矩阵M。</li></ul></blockquote><blockquote><p>dim(M)</p><ul><li>矩阵M的维度。</li></ul></blockquote><blockquote><p>M[i,]</p><ul><li>矩阵M第i行。(数值型)</li></ul></blockquote><blockquote><p>M[i,,drop = FALSE]</p><ul><li>矩阵M第i行。(矩阵型)</li></ul></blockquote><blockquote><p>M = M[-i,]<br>lo9.-  删除矩阵M第i行。</p></blockquote><blockquote><p>M[,j]</p><ul><li>矩阵M第j列。</li></ul></blockquote><blockquote><p>M[i,j]</p><ul><li>矩阵M第i行j列元素。</li></ul></blockquote><blockquote><p>t(M)</p><ul><li>矩阵M的转置。若M为数值型向量，则t(M)为矩阵型行向量。</li></ul></blockquote><blockquote><p>X%*%Y</p><ul><li>矩阵X乘矩阵Y。若Y是数值型的向量，R会自动判断其为行向量还是列向量。若X与Y为维度匹配的数值型向量，则返回的是矩阵型向量的内积。</li></ul></blockquote><blockquote><p>x%o%y</p><ul><li>数值型向量x与y的外积(矩阵型)。</li></ul></blockquote><blockquote><p>X*Y</p><ul><li>矩阵X与矩阵Y的Hadamard乘积。加、减、除、求余的规则和乘相同，即相同位置的元素进行运算。</li></ul></blockquote><blockquote><p>eigen(M)$val<br>eigen(M)$vec</p><ul><li>求矩阵M的特征值和特征向量。</li></ul></blockquote><blockquote><p>solve(M)</p><ul><li>矩阵M求逆。</li></ul></blockquote><blockquote><p>solve(A,b)</p><ul><li>求解线性方程Ax=b。</li></ul></blockquote><blockquote><p>apply(M, dimcode, f, fargs)</p><ul><li>对矩阵M的行(dimcode=1)或列(dimcode=2)依次进行函数f操作，f的变量(arguments)方正fargs里。</li></ul></blockquote><hr><h1 id="与列表有关的基本操作"><a href="#与列表有关的基本操作" class="headerlink" title="与列表有关的基本操作"></a>与列表有关的基本操作</h1><blockquote><p>L = list(a = , b = , c = ,…)</p><ul><li>建立列表L。</li></ul></blockquote><blockquote><p>L$a<br>L[[a]]</p><ul><li>返回列表L里的对象a。</li></ul></blockquote><blockquote><p>L$a = NULL</p><ul><li>去除列表L里的对象a。</li></ul></blockquote><blockquote><p>names(L)</p><ul><li>列出列表L里的对象名。</li></ul></blockquote><blockquote><p>unname(L)</p><ul><li>去掉列表L里的对象名。</li></ul></blockquote><blockquote><p>lapply(…)</p><ul><li>list apply。功能与apply类似(参考上面的apply)，用于列表型数据。</li></ul></blockquote><blockquote><p>sapply(…)</p><ul><li>simplified apply。功能与lapply类似，区别在于函数结果的类型不是列表(list)。</li></ul></blockquote><hr><h1 id="与数据框有关的基本操作"><a href="#与数据框有关的基本操作" class="headerlink" title="与数据框有关的基本操作"></a>与数据框有关的基本操作</h1><ul><li>数据框是一种特殊的列表，所以对列表适用的函数往往对数据框也适用。此外，数据框也有矩阵型数据的特征，所以一些适用于矩阵型数据的函数，不如rbind，cbind，apply等也可以作用在数据框上。</li></ul><blockquote><p>Data = data.frame(…)</p><ul><li>创建数据框Data。</li></ul></blockquote><blockquote><p>fix(Data)</p><ul><li>编辑数据框Data。</li></ul></blockquote><blockquote><p>head(Data)</p><ul><li>显示数据框Data的前几行。</li></ul></blockquote><blockquote><p>attribute(Data)</p><ul><li>列出数据框Data的组成部分。</li></ul></blockquote><blockquote><p>names(Data)</p><ul><li>显示数据框Data的变量名。</li></ul></blockquote><blockquote><p>row.names(Data)</p><ul><li>显示数据框Data的行名。</li></ul></blockquote><blockquote><p>Data$name1</p><ul><li>数据框Data中名为name1的变量。</li></ul></blockquote><blockquote><p>Data[i]</p><ul><li>数据框Data中第i个变量形成的数据框。</li></ul></blockquote><blockquote><p>merge(D1,D2)</p><ul><li>合并数据框D1和D2，需要D1和D2中有至少一个相同的变量。</li></ul></blockquote><hr><h1 id="与逻辑型数据有关的基本操作"><a href="#与逻辑型数据有关的基本操作" class="headerlink" title="与逻辑型数据有关的基本操作"></a>与逻辑型数据有关的基本操作</h1><hr><blockquote><p>is.data.frame(x)</p><ul><li>判断是否对象x是数据框。类似命令有is.ts(x)，is.numeric(x)等。</li></ul></blockquote><blockquote><p>all(x&gt;a)</p><ul><li>判断是否对象x的每个元素都大于a。</li></ul></blockquote><blockquote><p>any(x&gt;a)</p><ul><li>判断对象x的元素中是否存在一个大于a。</li></ul></blockquote><blockquote><p>x&gt;y</p><ul><li>判断x的每个元素是否大于y的每个元素。</li></ul></blockquote><blockquote><p>x[x&gt;a]</p><ul><li>向量x中大于a的元素组成的新向量。</li></ul></blockquote><blockquote><p>subset(x, x&gt;a)</p><ul><li>向量x中大于a的元素组成的新向量。与上面例子的区别在于若向量元素里有NA，上面的例子会保留在结果中，而subset命令会剔除掉。</li></ul></blockquote><blockquote><p>which(x, x&gt;a)</p><ul><li>返回向量中大于a的元素的位置。</li></ul></blockquote><blockquote><p>x = ifelse(b, u, v)</p><ul><li>生成一个与b(逻辑向量)维度相同的数值向量，若b[i]为TRUE，则x[i]为u，反之为v。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
            <tag> Data Analysis </tag>
            
            <tag> R </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift Demo1 秒表</title>
      <link href="/ios/swiftdemo1/"/>
      <url>/ios/swiftdemo1/</url>
      
        <content type="html"><![CDATA[<p>这是阅读项目<a href="https://github.com/allenwong/30DaysofSwift.git" target="_blank" rel="noopener">30Days of Swift</a>源码的仿写记录，该项目受到国外一个教程：<a href="http://samvlu.com/index.html" target="_blank" rel="noopener">Swift100天</a>的启发。</p><a id="more"></a><h1 id="Demo-1-StopWatch"><a href="#Demo-1-StopWatch" class="headerlink" title="Demo 1 StopWatch"></a>Demo 1 StopWatch</h1><p>第一个小demo是个秒表。功能简单就是点击Play计时。Pause暂停。Reset重置。</p><h1 id="载入"><a href="#载入" class="headerlink" title="载入"></a>载入</h1><p>设一个计数器<code>counter</code>初值0.0.然后用String()方法转成字符串传给Label。</p><h1 id="Play"><a href="#Play" class="headerlink" title="Play"></a>Play</h1><p>一个<code>Timer</code>对象。<br>点下Play时：</p><pre class="line-numbers language-swift"><code class="language-swift">timer <span class="token operator">=</span> <span class="token builtin">Timer</span><span class="token punctuation">.</span><span class="token function">scheduledTimer</span><span class="token punctuation">(</span>    timeInterval<span class="token punctuation">:</span> <span class="token number">0.1</span><span class="token punctuation">,</span>     target<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">,</span>    selector<span class="token punctuation">:</span> #<span class="token function">selector</span><span class="token punctuation">(</span><span class="token builtin">ViewController</span><span class="token punctuation">.</span><span class="token builtin">UpdateTimer</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    userInfo<span class="token punctuation">:</span> <span class="token constant">nil</span><span class="token punctuation">,</span>    repeats<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中<code>UpdateTimer</code>方法是更新Label的。也就是每个时间间隔<code>timeInterval: 0.1</code>都会执行 <code>counter+=1</code></p><p>运行测试。没问题。点击Play后。每0.1s时间标签会累加。<br>如果想更规范可以这么写String以控制数字显示格式：</p><pre><code>timeLabel.text = String(format: &quot;%.1f&quot;, counter)</code></pre><h1 id="Pause"><a href="#Pause" class="headerlink" title="Pause"></a>Pause</h1><p>只需要一个方法：<br><code>timer.invalidate()</code><br>timer对象停止计时。</p><p>而此时我们的秒表有了<strong>跑</strong>和<strong>不跑</strong>两种状态。<br>我们新建一个Bool变量isPlaying。方便进行状态的检测。</p><p><code>isPlaying = True</code>时，<br><code>playBtn.isEnabled = false</code>Play按钮失效<br><code>pauseBtn.isEnabled = true</code>Pause按钮有效。<br>FALSE时同理。</p><h2 id="isPlaying作用"><a href="#isPlaying作用" class="headerlink" title="isPlaying作用"></a>isPlaying作用</h2><p>这时候已经发现小bug：多次点击Play按钮则会多次激活Timer计时器–》多次执行updateTimer方法–&gt;时间增加变快。<br>解决方法：<br>在Play按钮的Action中增加一个判断：</p><pre><code>if(isPlaying){    return}</code></pre><h1 id="Reset"><a href="#Reset" class="headerlink" title="Reset"></a>Reset</h1><p>没什么特别的了。Counter置0.传到Label就ok。</p><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><ul><li>关于状态isPlaying的控制极为重要。</li><li>按钮的布局忘了怎么加<strong>限制</strong>了。不过暂时是小问题找个视频学学就好啦~</li></ul><h1 id="GitHub地址"><a href="#GitHub地址" class="headerlink" title="GitHub地址"></a>GitHub地址</h1><p><a href="https://github.com/ixsim/Swift30demos.git" target="_blank" rel="noopener">https://github.com/ixsim/Swift30demos.git</a></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Demo </tag>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python文件处理实战</title>
      <link href="/python/python-wen-jian-chu-li-shi-zhan-1/"/>
      <url>/python/python-wen-jian-chu-li-shi-zhan-1/</url>
      
        <content type="html"><![CDATA[<p>刚刚开始写Hexo的博客。头部yaml的格式和我之前写日记的格式小有区别。</p><p>刚好在学Python，查查文档应该可以批量搞定这问题。话不多说，开始吧。</p><a id="more"></a><h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><h2 id="原文件头部"><a href="#原文件头部" class="headerlink" title="原文件头部"></a>原文件头部</h2><pre class="line-numbers language-markdown"><code class="language-markdown"><span class="token blockquote punctuation">></span> Title<span class="token blockquote punctuation">></span> Date<span class="token blockquote punctuation">></span> Tags<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="目标文件头部"><a href="#目标文件头部" class="headerlink" title="目标文件头部"></a>目标文件头部</h2><pre class="line-numbers language-markdown"><code class="language-markdown"><span class="token hr punctuation">---</span>title: Title<span class="token title important">date: Date<span class="token punctuation">---</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="处理思路"><a href="#处理思路" class="headerlink" title="处理思路"></a>处理思路</h2><p>根据差异。<code>&gt; Tags</code>是可以取消处理的。因为之前写的Md都是日记。也没有什么tag。</p><p>主要就是对<strong>title和date</strong>进行处理。</p><p>可以读取文章的前三行。然后把第一行的 <code>&gt;</code> 改成</p><pre><code>---title:</code></pre><p>第二行的<code>&gt;</code>改成<code>date:</code><br>第三行完全改成<code>---</code></p><h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1><h2 id="了解Python文件处理命令"><a href="#了解Python文件处理命令" class="headerlink" title="了解Python文件处理命令"></a>了解Python文件处理命令</h2><p>当然要先找一个单独的文档试试手啦。然后再看看如何进行批处理。</p><p>大体看了看。感觉要用到的代码：</p><pre class="line-numbers language-Python"><code class="language-Python">f = open(''，'r+') #读文件lines = f.readlines() #读到list#然后对list进行字符串修改f.writelines(lines) #写到file里<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后按下标改lines这个list。思路差不多了。再去看看字符串处理有啥函数。</p><p>lines[0]肯定是 &gt; 标题 找找字符串替换需要啥函数。</p><h2 id="单文件处理代码"><a href="#单文件处理代码" class="headerlink" title="单文件处理代码"></a>单文件处理代码</h2><p><strong>字符串替换遇到问题</strong></p><h3 id="字符串的替换函数replace有一个坑"><a href="#字符串的替换函数replace有一个坑" class="headerlink" title="字符串的替换函数replace有一个坑"></a>字符串的替换函数replace有一个坑</h3><pre class="line-numbers language-python"><code class="language-python">lines<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'> '</span><span class="token punctuation">,</span><span class="token string">'---\n title: '</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>lines<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>结果lines[0]并没有改变</p><p>看看replace函数的介绍，</p><blockquote><p>Return a copy of string S with all occurrences of substring old replaced by new.  If the optional argument count is given, only the first count occurrences are replaced.</p></blockquote><p>替换之后原来是返回一个新的copy，正确的做法是：</p><pre class="line-numbers language-python"><code class="language-python">lines<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> lines<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'> '</span><span class="token punctuation">,</span><span class="token string">'---\n title: '</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>lines<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-python"><code class="language-python">f<span class="token operator">=</span>open<span class="token punctuation">(</span><span class="token string">'abc.md'</span><span class="token punctuation">,</span><span class="token string">'r+'</span><span class="token punctuation">)</span>lines <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'源：\n'</span><span class="token punctuation">,</span>lines<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>lines<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>lines<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>lines<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> lines<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'> '</span><span class="token punctuation">,</span><span class="token string">'---\ntitle: '</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#注意\n和title没有空格。</span>lines<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> lines<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'> '</span><span class="token punctuation">,</span><span class="token string">'date: '</span><span class="token punctuation">)</span>lines<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'---\n'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'目标：\n'</span><span class="token punctuation">,</span>lines<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>lines<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>lines<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'abc.md'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>writelines<span class="token punctuation">(</span>lines<span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="http://p66eruxmw.bkt.clouddn.com/image-201803241116234.png" alt="image-201803241116234"></p><h2 id="批量处理整个文件夹"><a href="#批量处理整个文件夹" class="headerlink" title="批量处理整个文件夹"></a>批量处理整个文件夹</h2><p>好啦。单个文件测试完毕。</p><p>现在去查一下怎么批操作。</p><p>哈哈。搞定：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> osfilepath <span class="token operator">=</span> <span class="token string">'/Users/lixs/Desktop/jia'</span>filelist <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>filepath<span class="token punctuation">)</span><span class="token keyword">for</span> file <span class="token keyword">in</span> filelist<span class="token punctuation">:</span>    f<span class="token operator">=</span>open<span class="token punctuation">(</span><span class="token string">'/Users/lixs/Desktop/jia/'</span><span class="token operator">+</span>file<span class="token punctuation">,</span><span class="token string">'r+'</span><span class="token punctuation">)</span>    lines <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'源：\n'</span><span class="token punctuation">,</span>lines<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>lines<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>lines<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    lines<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> lines<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'> '</span><span class="token punctuation">,</span><span class="token string">'---\ntitle: '</span><span class="token punctuation">)</span>    lines<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> lines<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'> '</span><span class="token punctuation">,</span><span class="token string">'date: '</span><span class="token punctuation">)</span>    lines<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'---\n'</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'目标：\n'</span><span class="token punctuation">,</span>lines<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>lines<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>lines<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'/Users/lixs/Desktop/jia/'</span><span class="token operator">+</span>file<span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span>    f<span class="token punctuation">.</span>writelines<span class="token punctuation">(</span>lines<span class="token punctuation">)</span>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码在测试文件夹下没问题。文件夹下内容全部变成目标格式。</p><p>Now，开始处理我的日记了。</p><p>结果并不行：</p><p>报了一个错：</p><h1 id="‘utf-8’-codec-can’t-decode-byte-0x-in-position-问题"><a href="#‘utf-8’-codec-can’t-decode-byte-0x-in-position-问题" class="headerlink" title="‘utf-8’ codec can’t decode byte 0x  in position  问题"></a>‘utf-8’ codec can’t decode byte 0x  in position  问题</h1><p>然后去文件夹看，只有部分文件变成目标格式。</p><p>可我的Markdown肯定都是UTF-8编码的啊。到底哪里出错了呢。</p><p>我真是太机智了。</p><p>聪明的你看到这行应该也就懂了：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">if</span> file <span class="token operator">==</span> <span class="token string">'.DS_Store'</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span>    f<span class="token operator">=</span>open<span class="token punctuation">(</span><span class="token string">'/Users/lixs/Desktop/test/'</span><span class="token operator">+</span>file<span class="token punctuation">,</span><span class="token string">'r+'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>没错。正是 Mac系统的 <strong>.DS_Store</strong>文件在搞鬼。</p><p>百度上对于这个问题的解决。并没有人提到这一点。</p><p>哈哈。一切完工。吃饭咯。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Demo </tag>
            
            <tag> Python </tag>
            
            <tag> File Process </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>网页空白处点击弹出文字</title>
      <link href="/website/wang-ye-kong-bai-chu-dian-ji-dan-chu-wen-zi/"/>
      <url>/website/wang-ye-kong-bai-chu-dian-ji-dan-chu-wen-zi/</url>
      
        <content type="html"><![CDATA[<p>空白处点击鼠标，弹出文字的网页特效。</p><a id="more"></a><p>代码如下：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token comment" spellcheck="true">/* 鼠标特效 */</span><span class="token keyword">var</span> a_idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">jQuery</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>$<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"body"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token string">"富强"</span><span class="token punctuation">,</span> <span class="token string">"民主"</span><span class="token punctuation">,</span> <span class="token string">"文明"</span><span class="token punctuation">,</span> <span class="token string">"和谐"</span><span class="token punctuation">,</span> <span class="token string">"自由"</span><span class="token punctuation">,</span> <span class="token string">"平等"</span><span class="token punctuation">,</span> <span class="token string">"公正"</span> <span class="token punctuation">,</span><span class="token string">"法治"</span><span class="token punctuation">,</span> <span class="token string">"爱国"</span><span class="token punctuation">,</span> <span class="token string">"敬业"</span><span class="token punctuation">,</span> <span class="token string">"诚信"</span><span class="token punctuation">,</span> <span class="token string">"友善"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> $i <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"&lt;span/>"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>a_idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a_idx <span class="token operator">=</span> <span class="token punctuation">(</span>a_idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">var</span> x <span class="token operator">=</span> e<span class="token punctuation">.</span>pageX<span class="token punctuation">,</span>        y <span class="token operator">=</span> e<span class="token punctuation">.</span>pageY<span class="token punctuation">;</span>        $i<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token string">"z-index"</span><span class="token punctuation">:</span> <span class="token number">999999999999999999999999999999999999999999999999999999999999999999999</span><span class="token punctuation">,</span>            <span class="token string">"top"</span><span class="token punctuation">:</span> y <span class="token operator">-</span> <span class="token number">20</span><span class="token punctuation">,</span>            <span class="token string">"left"</span><span class="token punctuation">:</span> x<span class="token punctuation">,</span>            <span class="token string">"position"</span><span class="token punctuation">:</span> <span class="token string">"absolute"</span><span class="token punctuation">,</span>            <span class="token string">"font-weight"</span><span class="token punctuation">:</span> <span class="token string">"bold"</span><span class="token punctuation">,</span>            <span class="token string">"color"</span><span class="token punctuation">:</span> <span class="token string">"#ff6651"</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"body"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>$i<span class="token punctuation">)</span><span class="token punctuation">;</span>        $i<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token string">"top"</span><span class="token punctuation">:</span> y <span class="token operator">-</span> <span class="token number">180</span><span class="token punctuation">,</span>            <span class="token string">"opacity"</span><span class="token punctuation">:</span> <span class="token number">0</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token number">1500</span><span class="token punctuation">,</span>        <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            $i<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script type="text/javascript"> /* 鼠标特效 */ var a_idx = 0; jQuery(document).ready(function($) { $("body").click(function(e) { var a = new Array("富强", "民主", "文明", "和谐", "自由", "平等", "公正" ,"法治", "爱国", "敬业", "诚信", "友善"); var $i = $("<span/>").text(a[a_idx]); a_idx = (a_idx + 1) % a.length; var x = e.pageX, y = e.pageY; i.css({ "z-index": 999999999999999999999999999999999999999999999999999999999999999999999, "top": y - 20, "left": x, "position": "absolute", "font-weight": "bold", "color": "#ff6651" }); ("body").append($i); $i.animate({ "top": y - 180, "opacity": 0 }, 1500, function() { $i.remove(); }); }); }); </script>]]></content>
      
      
      <categories>
          
          <category> Website </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《Python数据分析》学习记录</title>
      <link href="/python/python-shu-ju-fen-xi-xue-xi-ji-lu/"/>
      <url>/python/python-shu-ju-fen-xi-xue-xi-ji-lu/</url>
      
        <content type="html"><![CDATA[<p>这是阅读《Python for Data Analysis》的读书笔记。</p><a id="more"></a><h1 id="第一章-准备工作"><a href="#第一章-准备工作" class="headerlink" title="第一章 准备工作"></a>第一章 准备工作</h1><p>不用准备了。🙂🙂🙂要啥有啥。</p><h1 id="第二章-引言"><a href="#第二章-引言" class="headerlink" title="第二章 引言"></a>第二章 引言</h1><h2 id="list-手动统计"><a href="#list-手动统计" class="headerlink" title="list 手动统计"></a>list 手动统计</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> collections improt defaultdict<span class="token keyword">def</span> <span class="token function">get_count</span><span class="token punctuation">(</span>sequence<span class="token punctuation">)</span><span class="token punctuation">:</span>    counts <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span>int<span class="token punctuation">)</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> sequence<span class="token punctuation">:</span>        counts<span class="token punctuation">[</span>x<span class="token punctuation">]</span>  <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> counts<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本章内容仅仅是向读者展示。跳~</p><h1 id="第三章-IPython"><a href="#第三章-IPython" class="headerlink" title="第三章 IPython"></a>第三章 IPython</h1><p>目前使用的IDE是Spyder，是集成了IPython的。值得一学。</p><h2 id="内省"><a href="#内省" class="headerlink" title="内省"></a>内省</h2><ul><li><p>变量前后加? 可查看该对象的通用信息</p><pre class="line-numbers language-python"><code class="language-python">  a?  Type<span class="token punctuation">:</span>        int  String form<span class="token punctuation">:</span> <span class="token number">10</span>  Docstring<span class="token punctuation">:</span>    int<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> integer  int<span class="token punctuation">(</span>x<span class="token punctuation">,</span> base<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> integer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li>如果对象是一个函数或实例方法。其docstring会被显示</li><li>?? 还将显示出该对象的源码</li></ul><ul><li><p>搜索IPython命名空间</p><pre class="line-numbers language-shell"><code class="language-shell">np.*load*? #列出NumPy顶级命名空间中含有“load”的所有函数np.loadnp.loadsnp.loadtxtno.pkgload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="run"><a href="#run" class="headerlink" title="%run"></a>%run</h3><pre class="line-numbers language-Python"><code class="language-Python">%run filename.py #运行这个文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>文件在一个空的命名空间中运行。此后该文件定义的全部变量就可以在IPython Shell中访问了。</p><p><strong>Note</strong><br>访问 Interactive 命名空间的变量：<br><code>%run -i</code></p><h3 id="中断执行的代码"><a href="#中断执行的代码" class="headerlink" title="中断执行的代码"></a>中断执行的代码</h3><p><code>Ctrl + C</code> </p><h3 id="执行剪贴板中的代码"><a href="#执行剪贴板中的代码" class="headerlink" title="执行剪贴板中的代码"></a>执行剪贴板中的代码</h3><p><code>%paster</code><br>执行后，剪贴板中的<strong>一切</strong>文本，在shell中以<strong>整体</strong>的形式执行。<br><code>%cpaste</code><br>执行后，你想粘贴多少就粘贴多少。按下<code>Ctrl + C</code>终止<code>%cpaste</code></p><h3 id="键盘快捷键"><a href="#键盘快捷键" class="headerlink" title="键盘快捷键"></a>键盘快捷键</h3><p>我是个没有快捷键会死星人。<br>记几个常用的吧：</p><table><thead><tr><th style="text-align:right">Ctrl+</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:right">A</td><td style="text-align:center">光标至行首</td></tr><tr><td style="text-align:right">E</td><td style="text-align:center">光标至行尾</td></tr><tr><td style="text-align:right">K</td><td style="text-align:center">从光标往后全删</td></tr><tr><td style="text-align:right">U</td><td style="text-align:center">从光标往前全删</td></tr><tr><td style="text-align:right">L</td><td style="text-align:center">清屏</td></tr></tbody></table><h3 id="魔术命令"><a href="#魔术命令" class="headerlink" title="魔术命令"></a>魔术命令</h3><p>魔术命令是以百分号为前缀的命令</p><p>常用</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>%quickref</td><td>显示IPython快速参考</td></tr><tr><td>%magic</td><td>显示所有magic文档</td></tr><tr><td>%debug</td><td></td></tr><tr><td>%hist</td><td>历史</td></tr><tr><td>%paste %cpaste</td><td></td></tr><tr><td>%reset</td><td>删除interactive命名空间中的全部变量/名称</td></tr><tr><td>%run script.py</td><td>执行脚本文件script.py</td></tr><tr><td>%time statement</td><td>报告statement的执行时间</td></tr><tr><td>%timeit statement</td><td>多次执行statement返回平均执行时间</td></tr><tr><td>%who %who_Is %whos</td><td>显示interactive命名空间中定义的变量</td></tr></tbody></table><h2 id="命令历史"><a href="#命令历史" class="headerlink" title="命令历史"></a>命令历史</h2><p>上下键能一个个切换<br><code>Ctrl + P/N</code>能根据你输入向前/后匹配历史</p><h3 id="输入输出变量"><a href="#输入输出变量" class="headerlink" title="输入输出变量"></a>输入输出变量</h3><p><code>_</code>和<code>__</code>分别是最后两个输出</p><p>输入变量：<br>第27行的输入：<code>_i27</code></p><p><code>%hist</code> 显示全部或部分输入输出历史，并可选是否带行号</p><h2 id="与OS交互"><a href="#与OS交互" class="headerlink" title="与OS交互"></a>与OS交互</h2><p>自认为还用不到。调用os Shell ，目录书签。以后研读。</p><h2 id="软件开发工具"><a href="#软件开发工具" class="headerlink" title="软件开发工具"></a>软件开发工具</h2><p>本章就这样了。快快开始学干货吧~</p><h1 id="第四章-Numpy"><a href="#第四章-Numpy" class="headerlink" title="第四章 Numpy"></a>第四章 Numpy</h1><h2 id="ndarray"><a href="#ndarray" class="headerlink" title="ndarray"></a>ndarray</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>array</td><td>将输入数据(list,tuple,etc)转为ndarry</td></tr><tr><td>asarray</td><td>与array区别：当输入是个ndarry时，不进行复制</td></tr><tr><td>arange</td><td>不解释</td></tr><tr><td>ones\ones_like</td><td>全1。ones可设shape。而ones_like是传入一个数组a，生成的数组与其同shape。</td></tr><tr><td>zeros\zeros_like</td><td>同上</td></tr><tr><td>empty\empty_like</td><td>不解释</td></tr><tr><td>eye\identity</td><td>NxN单位矩阵（对角1，其余0）</td></tr></tbody></table><p><strong>array和asarray区别</strong>：都可以将结构数据转化为ndarray，但是主要区别就是当数据源是ndarray时，array仍然会copy出一个副本，占用新的内存，但asarray不会。</p><h3 id="索引和切片"><a href="#索引和切片" class="headerlink" title="索引和切片"></a>索引和切片</h3><ul><li>数组切片是原是数组的视图。这意味着：<strong>这些数据不是被复制的，视图上的任何修改都会被直接反映到原数组上。</strong><br>（我虽然改的是切片，但其实原数组也改了）</li><li>如果你想得到的是副本也不是视图。要显式复制：<code>arr[5:8].copy()</code></li></ul><h3 id="布尔型索引"><a href="#布尔型索引" class="headerlink" title="布尔型索引"></a>布尔型索引</h3><pre class="line-numbers language-python"><code class="language-python">arrary <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token boolean">True</span><span class="token punctuation">,</span><span class="token boolean">False</span><span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dtype <span class="token operator">=</span> bool<span class="token punctuation">)</span>data<span class="token punctuation">[</span>arrary<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#输出第1、3行</span><span class="token comment" spellcheck="true">#还可以与切片混用</span>data<span class="token punctuation">[</span>arrary<span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#输出1、3行的前两列</span><span class="token comment" spellcheck="true">#索引还可以同时满足多个条件</span>mask <span class="token operator">=</span> <span class="token punctuation">(</span>names <span class="token operator">==</span> <span class="token string">'Bob'</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>names <span class="token operator">!=</span> <span class="token string">'Will'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#mask就是一个bool型数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="花式索引"><a href="#花式索引" class="headerlink" title="花式索引"></a>花式索引</h3><pre class="line-numbers language-python"><code class="language-python">arr<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 输出第5、1、7行</span>arr<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 输出倒数1、5行</span>arr<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#输出坐标(1,0) (5,3)(4,1)三个数</span><span class="token comment" spellcheck="true">#那如何利用索引输出该行列呢</span><span class="token comment" spellcheck="true">#要用切片配合</span>arr<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#输出1、5、4行的0、2、1列</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Note</strong> 花式索引跟切片不一样。不是视图是复制。</p><h3 id="转置"><a href="#转置" class="headerlink" title="转置"></a>转置</h3><p>转置返回的是<strong>视图</strong></p><h3 id="通用函数"><a href="#通用函数" class="headerlink" title="通用函数"></a>通用函数</h3><p>ufuns(元素级数组方法)<br>函数<br><code>abs、fabs</code><br>计算整数、浮点数或复数的绝对值。对于非复数值,可以使用更快的fabs<br><code>sgrt</code><br>计算各元素的平方根。相当于arr <strong> 0.5<br><code>square</code><br>计算各元素的平方。相当于arr </strong> 2<br><code>exp</code><br>计算各元素的指数e<br><code>log、log10、log2、log1p</code><br>分别为自然对数(底数为e)、底数为10的log、底数为2的log、log(1+x)<br><code>sign</code><br>计算各元素的正负号:1(正数)、0(零)1(负数)<br><code>ceil</code><br>计算各元素的 ceiling值,即大于等于该值的最小整数<br><code>floor</code><br>计算各元素的for值,即小于等于该值的最大整数<br><code>rint</code><br>将各元素值四舍五入到最接近的整数,保留 dtype<br><code>modf</code><br>将数组的小数和整数部分以两个独立数组的形式返回<br><code>isnan</code><br>返回一个表示“哪些值是NaN(这不是一个数字)”的布尔型数组<br><code>isfinite、 isinf</code><br>分别返回一个表示“哪些元素是有穷的(非inf,feiNaN)”或“哪些元素是无穷的”的布尔型数组<br><code>cos、cosh、sin、Sinh、tan、tanh</code><br>普通型和双曲型三角函数<br><img src="http://p66eruxmw.bkt.clouddn.com/15221187685515.jpg" alt=""></p><h3 id="将条件逻辑表述为数组运算"><a href="#将条件逻辑表述为数组运算" class="headerlink" title="将条件逻辑表述为数组运算"></a>将条件逻辑表述为数组运算</h3><p><code>np.where</code></p><pre><code>result = [(x if c else y) for x,y,c in zip(xarr,yarr,cond)]#对大数组不快。无法用于多维数组。不如直接用whereresul =  np.where(cond,xarr,yarr)#将正值设为2np.where(arr&gt;0,2,arr)</code></pre><h3 id="基本数组统计方法"><a href="#基本数组统计方法" class="headerlink" title="基本数组统计方法"></a>基本数组统计方法</h3><p>有个axis参数。横着是1  竖着是0<br>sum求和<br>mean平均数<br>std、var标准差方差<br>min\max<br>argmin\argmax 最大、小值的索引</p><p>cumsum 所有元素累积和<br>cumprod 所有元素累计积<br>这两个函数还会产生中间结果<br>Ex：</p><pre><code>import numpy as nparr = np.arange(0,9).reshape(3,3)print(arr)[[0 1 2] [3 4 5] [6 7 8]]print(arr.cumsum(0)) #竖着加[[ 0  1  2] [ 3  5  7] [ 9 12 15]]print(arr.cumprod(1)) #横着乘[[  0   0   0] [  3  12  60] [  6  42 336]]</code></pre><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><p><code>unique(x)</code><br>计算x中的唯一元素,并返回有序结果<br><code>intersected(x, y)</code><br>计算x和y中的公共元素,并返回有序结果<br>unionid(x, y)<br>计算x和y的并集,并返回有序结果<br><code>in 1d(x, y)</code><br>得到一个表示“x的元素是否包含于y”的布尔型数组<br><code>setdiff1d(x, y)</code><br>集合的差,即元素在x中且不在y中<br><code>setxor1d(x, y)</code><br>集合的对称差,即存在于一个数组中但不同时存在于两个数组中的元素</p><h2 id="文件输入输出"><a href="#文件输入输出" class="headerlink" title="文件输入输出"></a>文件输入输出</h2><pre><code>arr = np.arrange(10)np.save(&#39;some_array&#39;,arr) # 被存为.npy文件np.load(&#39;a.npy&#39;) #读取arch = np.savez(&#39;archive.npz&#39;,a=arr, b=arr) #多个数组压缩至一个npz文件#加载时会对各个数组进行延迟加载arch[&#39;b&#39;] #可单独访问</code></pre><h2 id="线代"><a href="#线代" class="headerlink" title="线代"></a>线代</h2><p><code>diag</code><br>以一维数组的形式返回方阵的对角线(或非对角线)元素,或将一维数组转换为方阵(非对角线元素为0)<br><code>dot</code><br>矩阵乘法<br><code>trace</code><br>计算对角线元素的和<br><code>det</code><br>计算矩阵行列式<br><code>eig</code><br>计算方阵的本征值和本征向量<br><code>inv</code><br>计算方阵的逆<br><code>pinv</code><br>计算矩阵的 Moore- Penrose伪逆<br><code>qr</code><br>计算QR分解<br><code>svd</code><br>计算奇异值分解(SVD)<br><code>solve</code><br>解线性方程组AX=b,其中A为一个方阵<br><code>lstsq</code><br>计算Ax=b的最小二乘解</p><h2 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h2><p><code>seed</code><br>确定随机数生成器的种子<br><code>permutation</code><br>返回一个序列的随机排列或返回一个随机排列的范围<br><code>shuffle</code>对一个序列就地随机排列<br><code>rand</code><br>产生均匀分布的样本值<br><code>randint</code><br>从给定的上下限范围内随机选取整数<br><code>randn</code><br>产生正态分布(平均值为0,标准差为1)的样本值,类似于 MATLAB接口<br><code>binomial</code><br>产生二项分布的样本值<br><code>nomal</code><br>产生正态(高斯)分布的样本值<br><code>beta</code><br>产生Beta分布的样本值<br><code>chisquare\gamma\uniform</code>卡方、Gamma、01分布</p><h2 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h2><p>例子不错。而然我并不想记。不错不错第四章结束~喜大普奔迎接pandas</p><h1 id="第五章-pandas"><a href="#第五章-pandas" class="headerlink" title="第五章 pandas"></a>第五章 pandas</h1><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h3><ul><li><p>一维数组对象。<br>（可传入字典建立，就像把字典列成表）</p></li><li><p>在算数运算中会自动对齐不同索引的数据。</p></li><li><p>Series对象本身和其索引都有一个name属性。<br>就等于这个表有个名 <code>obj.name</code>。索引有个名<code>obj.index.name</code>。</p></li></ul><h3 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h3><ul><li>通过索引返回的列是<strong>视图</strong></li></ul><p>创建方法<br><img src="http://p66eruxmw.bkt.clouddn.com/15223741416892.jpg" alt=""><br>P123表待插入</p><h3 id="索引对象"><a href="#索引对象" class="headerlink" title="索引对象"></a>索引对象</h3><ul><li>Index对象是<strong>不可修改</strong>的</li></ul><h2 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h2><h3 id="重新索引"><a href="#重新索引" class="headerlink" title="重新索引"></a>重新索引</h3><pre class="line-numbers language-python"><code class="language-python">obj<span class="token punctuation">.</span>reindex<span class="token punctuation">(</span><span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">#新索引</span>    method<span class="token punctuation">,</span><span class="token comment" spellcheck="true">#差插值填充方式：=ffill/pad 向前填充 =bfill/backfill向后填充</span>    fill_vaule，<span class="token comment" spellcheck="true">#缺失值填充</span>    limit<span class="token punctuation">,</span><span class="token comment" spellcheck="true">#向前、后填充时的最大填充量</span>    level<span class="token punctuation">,</span><span class="token comment" spellcheck="true">#没看懂</span>    copy<span class="token comment" spellcheck="true">#默认True，无论如何都复制。设为FALSE则新旧相等就不复制了)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="丢弃"><a href="#丢弃" class="headerlink" title="丢弃"></a>丢弃</h3><p><code>obj.drop([&#39;d&#39;,&#39;c&#39;])</code><br><code>obj.drop([&#39;1&#39;,&#39;3&#39;],axis=1)</code>竖着丢 </p><p><code>drop</code>方法返回的是一个在指定轴上删除了指定值的新对象：<br><code>new_obj = obj.drop(&#39;c&#39;)</code></p><h3 id="索引选取过滤"><a href="#索引选取过滤" class="headerlink" title="索引选取过滤"></a>索引选取过滤</h3><p><code>obj[&#39;a&#39;:&#39;c&#39;]</code> 这是根据列名来 选取（过滤）列<br>与Python切片不同的是c是<strong>包含</strong>的。<br><code>obj.ix[val]</code> 这是根据行名来选取行。<br><code>obj.ix[:,val]</code> 选取列</p><p>从例子和选取方法上看，我认为使用之前还是用demo调试着进行选取吧。有点乱~</p><h3 id="算数运算和数据对齐"><a href="#算数运算和数据对齐" class="headerlink" title="算数运算和数据对齐"></a>算数运算和数据对齐</h3><p>不重叠的索引引入NA值</p><h3 id="DataFrame-和-Series-之间的运算"><a href="#DataFrame-和-Series-之间的运算" class="headerlink" title="DataFrame 和 Series 之间的运算"></a>DataFrame 和 Series 之间的运算</h3><p>将<strong>Series</strong>的索引匹配到<strong>DataFrame</strong>的列。然后沿着行一直向下广播。</p><p>如果想匹配行且在列上广播。则必须使用算数方法：</p><p><code>a.sub(series,axis=0)</code></p><h3 id="函数应用和映射"><a href="#函数应用和映射" class="headerlink" title="函数应用和映射"></a>函数应用和映射</h3><p>NumPy的ufuncs也可用于操作pandas对象</p><p>DataFrame的apply方法可以：将函数应用到各行或各列的一维数组上。</p><h3 id="排序和排名"><a href="#排序和排名" class="headerlink" title="排序和排名"></a>排序和排名</h3><p>sort_index方法可以按索引（字典序）排序。</p><p>到此为止吧。数据分析。有缘再见！</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
            <tag> Data Analysis </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python廖雪峰练习</title>
      <link href="/python/python-liao-xue-feng-lian-xi/"/>
      <url>/python/python-liao-xue-feng-lian-xi/</url>
      
        <content type="html"><![CDATA[<p>这是刚学Python的第一天，对着Python廖雪峰的教程做的练习。<br>莫烦的教程虽然简单上手快，但是廖雪峰的这个练习还是不错的，让我回想起当初学C的一个寒假，我对着OJ和一个同学做那些“无聊”的题目。一晃就是四年啊！</p><a id="more"></a><h2 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h2><pre class="line-numbers language-Python"><code class="language-Python">def product(*number):      if number == ():     raise TypeError   a = 1  for x in number:      a = x*a  return a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h2><pre class="line-numbers language-Python"><code class="language-Python">def move(n, a, b, c):    if n == 1:        print ( a , '-->' , c)    else:        move(n-1,a,c,b) #假设move函数没问题，A上前n-1个会被移动至B        move(1,a,b,c) #此时把最大的放到C        move(n-1,b,a,c)#move(4,'A','B','C')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">trim</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> s <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> s    <span class="token keyword">while</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">:</span>        s <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> s <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">''</span>    <span class="token keyword">while</span> s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">:</span>        s <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h2><pre class="line-numbers language-Python"><code class="language-Python">def findMinAndMax(L):    if L == []:        return (None,None)    else:        a = L[0]        b = L[0]        for i in L:            if i < a:                a = i            if i > b:                b = i    return (a,b)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="列表生成式"><a href="#列表生成式" class="headerlink" title="列表生成式"></a>列表生成式</h2><pre class="line-numbers language-Python"><code class="language-Python">L1 = ['Hello', 'World', 18, 'Apple', None]L2 = [ x.lower() for x in L1 if isinstance(x,str) ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><pre class="line-numbers language-Python"><code class="language-Python">def triangles():    n = 2    a = [1,1]    b = [1]    yield [1]    yield [1,1]    while 1:        for i in range(1,n):            b.append(a[i] + a[i-1])        b.append(1)        n = n+1        a = b        b = [1]        yield a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="map-reduce"><a href="#map-reduce" class="headerlink" title="map/reduce"></a>map/reduce</h2><pre class="line-numbers language-Python"><code class="language-Python">def normalize(name):    return name[0].upper() + name[1:].lower()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-Python"><code class="language-Python">def cheng(x,y):    return x*yreturn reduce(cheng,L)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-Python"><code class="language-Python">from functools import reducedef str2float(s):    DIGITS = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, '.': 999}    def fn(x, y):        if y == 999:            return x        return x * 10 + y    def char2num(s):        return DIGITS[s]    n = s.index('.')    return reduce(fn, map(char2num, s))/(10**n)#跳过小数点：#我把 '.' 转换成 999 当遇到999 不做计算 return x 。像个傻子 🤪#正确方法：#s[:n]+s[n+1:] n是小数点位置。取 前n个和第n+1个开始往后的字符串即可。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="fliter"><a href="#fliter" class="headerlink" title="fliter"></a>fliter</h2><p>跳过</p><h2 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h2><pre class="line-numbers language-Python"><code class="language-Python">def by_name(t):    return t[0]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-Python"><code class="language-Python">def by_score(t):    return -t[1]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python初探</title>
      <link href="/python/python-chu-tan/"/>
      <url>/python/python-chu-tan/</url>
      
        <content type="html"><![CDATA[<p>这是我刚开始学习Python时做的笔记，百度Python后先看到有廖雪峰的教程。就对着看了一遍。紧接着同学推荐了莫烦的教程，果然，这个教程上手更快。<br>另外我认为Python作为一个脚本语言，很多东西是在学习的时候没法记忆的，勤查着点就够了。<br>因此在学习了几小时以后，我基本上没有再做新的笔记。在以后学习的路上遇到什么问题再记录吧！</p><a id="more"></a><h1 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h1><h2 id="廖雪峰Part"><a href="#廖雪峰Part" class="headerlink" title="廖雪峰Part"></a>廖雪峰Part</h2><ul><li><p>/ 是除法  //是整除</p></li><li><p>name = input(‘please enter your name: ‘)</p></li><li><p>list 有序  元素类型不限制</p><p>tuple 定以后不可变</p></li><li><p>if  else 后要有 <code>:</code></p></li><li><p>pass作为函数占位符。日后再说</p></li><li><p>返回值是一个tuple。但是，在语法上，返回一个tuple可以省略括号，而多个变量可以同时接收一个tuple，按位置赋给对应的值，所以，Python的函数返回多值其实就是返回一个tuple，但写起来更方便。</p></li><li><p>默认参数也是变量，必须是个不可变对象</p></li><li><p>参数前加<code>*</code>定义可变参数</p></li></ul><ul><li><code>*list_name</code> 做参数传入该list的所有元素</li></ul><ul><li><p><strong>关键字参数</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> extra <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'city'</span><span class="token punctuation">:</span> <span class="token string">'Beijing'</span><span class="token punctuation">,</span> <span class="token string">'job'</span><span class="token punctuation">:</span> <span class="token string">'Engineer'</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> person<span class="token punctuation">(</span><span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token operator">**</span>extra<span class="token punctuation">)</span>name<span class="token punctuation">:</span> Jack age<span class="token punctuation">:</span> <span class="token number">24</span> other<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'city'</span><span class="token punctuation">:</span> <span class="token string">'Beijing'</span><span class="token punctuation">,</span> <span class="token string">'job'</span><span class="token punctuation">:</span> <span class="token string">'Engineer'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>**extra</code>表示把<code>extra</code>这个dict的所有key-value用关键字参数传入到函数的<code>**kw</code>参数，<code>kw</code>将获得一个dict，注意<code>kw</code>获得的dict是<code>extra</code>的一份拷贝，对<code>kw</code>的改动不会影响到函数外的<code>extra</code>。</p><p><strong>命名关键字参数</strong></p><p>对于关键字参数，函数的调用者可以传入任意不受限制的关键字参数。至于到底传入了哪些，就需要在函数内部通过<code>kw</code>检查。</p><p>仍以<code>person()</code>函数为例，我们希望检查是否有<code>city</code>和<code>job</code>参数：</p><pre class="line-numbers language-Python"><code class="language-Python">def person(name, age, **kw):    if 'city' in kw:        # 有city参数        pass    if 'job' in kw:        # 有job参数        pass    print('name:', name, 'age:', age, 'other:', kw)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是调用者仍可以传入不受限制的关键字参数：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> person<span class="token punctuation">(</span><span class="token string">'Jack'</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span>city<span class="token operator">=</span><span class="token string">'Beijing'</span><span class="token punctuation">,</span>addr<span class="token operator">=</span><span class="token string">'Chaoyang'</span><span class="token punctuation">,</span>zipcode<span class="token operator">=</span><span class="token number">123456</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果要限制关键字参数的名字，就可以用命名关键字参数，例如，<strong>只接收<code>city</code>和<code>job</code>作为关键字参数</strong>。这种方式定义的函数如下：</p><pre class="line-numbers language-Python"><code class="language-Python">def person(name, age, *, city, job):    print(name, age, city, job)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>和关键字参数<code>**kw</code>不同，命名关键字参数需要一个特殊分隔符<code>*</code>，<code>*</code>后面的参数被视为命名关键字参数。</p><p>调用方式如下：</p><pre class="line-numbers language-Python"><code class="language-Python">>>> person('Jack', 24, city='Beijing', job='Engineer')Jack 24 Beijing Engineer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果函数定义中已经有了一个可变参数，后面跟着的命名关键字参数就不再需要一个特殊分隔符<code>*</code>了：</p><pre class="line-numbers language-Python"><code class="language-Python">def person(name, age, *args, city, job):    print(name, age, args, city, job)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>命名关键字参数必须传入参数名，这和位置参数不同。如果没有传入参数名，调用将报错：</p><pre class="line-numbers language-Python"><code class="language-Python">>>> person('Jack', 24, 'Beijing', 'Engineer')Traceback (most recent call last):  File "<stdin>", line 1, in <module>TypeError: person() takes 2 positional arguments but 4 were given<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>由于调用时缺少参数名<code>city</code>和<code>job</code>，Python解释器把这4个参数均视为位置参数，但<code>person()</code>函数仅接受2个位置参数。</p><p>命名关键字参数可以有缺省值，从而简化调用：</p><pre class="line-numbers language-Python"><code class="language-Python">def person(name, age, *, city='Beijing', job):    print(name, age, city, job)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>由于命名关键字参数<code>city</code>具有默认值，调用时，可不传入<code>city</code>参数：</p><pre class="line-numbers language-Python"><code class="language-Python">>>> person('Jack', 24, job='Engineer')Jack 24 Beijing Engineer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用命名关键字参数时，要特别注意，<strong>如果没有可变参数，就必须加一个<code>*</code>作为特殊分隔符</strong>。如果缺少<code>*</code>，Python解释器将无法识别位置参数和命名关键字参数：</p><pre class="line-numbers language-Python"><code class="language-Python">def person(name, age, city, job):    # 缺少 *，city和job被视为位置参数    pass<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>参数定义的顺序必须是：</p><ol><li>必选参数</li><li>默认参数</li><li>可变参数</li><li>命名关键字参数</li><li>关键字参数</li></ol></li><li><p>默认情况下，dict迭代的是key。如果要迭代value，可以用<code>for value in d.values()</code>，如果要同时迭代key和value，可以用<code>for k, v in d.items()</code>。</p></li><li><p>如果一个函数定义中包含<code>yield</code>关键字，那么这个函数就不再是一个普通函数，而是一个generator</p></li><li><pre class="line-numbers language-Python"><code class="language-Python">>>> from functools import reduce>>> def fn(x, y):...     return x * 10 + y...>>> reduce(fn, [1, 3, 5, 7, 9])13579<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>lambda</code> 匿名函数   <code>lambda x: x * x</code></p></li><li><p><a href="https://docs.python.org/3/library/functions.html" target="_blank" rel="noopener">Python内置函数</a></p></li><li><pre class="line-numbers language-Python"><code class="language-Python">#!/usr/bin/env python3# -*- coding: utf-8 -*-' a test module '__author__ = 'Michael Liao'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第1行和第2行是标准注释，第1行注释可以让这个<code>hello.py</code>文件直接在Unix/Linux/Mac上运行，</p><p>第2行注释表示.py文件本身使用标准UTF-8编码；</p><p>第4行是一个字符串，表示模块的文档注释，任何模块代码的第一个字符串都被视为模块的文档注释；</p><p>第6行使用<code>__author__</code>变量把作者写进去，这样当你公开源代码后别人就可以瞻仰你的大名</p></li><li><p>不能直接访问<code>__name</code>是因为Python解释器对外把<code>__name</code>变量改成了<code>_Student__name</code>，所以，仍然可以通过<code>_Student__name</code>来访问<code>__name</code>变量</p></li><li><p>takes 0 positional arguments but 1 was given：解决方法<br>在类方法的参数里加入<code>self</code></p></li><li><p>判断一个变量是否是某个类型可以用<code>isinstance()</code>判断：</p></li><li><pre class="line-numbers language-PYthon"><code class="language-PYthon">>>> type(fn)==types.FunctionTypeTrue>>> type(abs)==types.BuiltinFunctionTypeTrue>>> type(lambda x: x)==types.LambdaTypeTrue>>> type((x for x in range(10)))==types.GeneratorTypeTrue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>types</code>模块中定义的常量</p></li><li><p>获得一个对象的所有属性和方法，可以使用<code>dir()</code>函数</p></li></ul><h2 id="莫烦Part"><a href="#莫烦Part" class="headerlink" title="莫烦Part"></a>莫烦Part</h2><ul><li><p>如果想要使用顺序一致的字典，请使用 <code>collections</code> 模块 中的 <code>OrderedDict</code> 对象。</p></li><li><p>只要类中实现了 <code>__iter__</code>和 <code>next</code> 函数，那么对象就可以在 <code>for</code> 语句中使用。</p></li><li><p>没有&amp;&amp;只有and </p></li><li><pre class="line-numbers language-Python"><code class="language-Python">try:    file=open('eeee.txt','r+')except Exception as e:    print(e)    response = input('do you want to create a new file:')    if response=='y':        file=open('eeee.txt','w')    else:        passelse:    file.write('ssss')    file.close()"""[Errno 2] No such file or directory: 'eeee.txt'do you want to create a new file:yssss  #eeee.txt中会写入'ssss'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><pre><code>&gt;&gt;&gt; list(map(fun,[1,2],[3,4]))&quot;&quot;&quot;[4,6]&quot;&quot;&quot;</code></pre><h3 id="Numpy"><a href="#Numpy" class="headerlink" title="Numpy"></a>Numpy</h3></li><li><p>Numpy官方教材 <a href="https://docs.scipy.org/doc/numpy-dev/user/quickstart.html" target="_blank" rel="noopener">https://docs.scipy.org/doc/numpy-dev/user/quickstart.html</a></p></li><li><p><code>flatten</code>是一个展开性质的函数，将多维的矩阵进行展开成1行的数列。而<code>flat</code>是一个迭代器，本身是一个<code>object</code>属性。</p></li><li><pre class="line-numbers language-Python"><code class="language-Python">A[:,np.newaxis]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可将一行元素转置</p></li><li><p><code>split()</code>是等量分割。<code>array_split()</code>可以不等量分割</p></li><li><p><code>=</code> 赋值会有关联性 <code>copy</code>赋值则没有</p><h3 id="Pandas"><a href="#Pandas" class="headerlink" title="Pandas"></a>Pandas</h3></li><li><p>​</p></li></ul><h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h1><ul><li><p><del>没有变量常量。数据类型声明？</del></p></li><li><p>Key：选中一行</p></li><li><p>没有 ++ 语法？ Y</p></li><li><p><code>Iterator</code>:惰性序列 啥玩意</p></li><li><p>没有自动补全？Tab</p></li><li><p>返回函数–闭包</p></li><li><pre><code>def build(x, y):    return lambda: x * x + y * y这段加labmda有什么用~答：返回了函数地址</code></pre></li><li><p>!不能取逆？Y</p></li><li><p>3-1 如果想对数据的 index 进行排序并输出:如果想翻转数据, transpose:</p></li><li><p>loc iloc ix 的区别？</p></li><li><p>查看DataFrame()语法</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo建站问题总结</title>
      <link href="/website/hexo01/"/>
      <url>/website/hexo01/</url>
      
        <content type="html"><![CDATA[<p>昨天收到一封域名过期的邮件，顺手上去看了看有没有合适的域名。顺手也就搭了个Jekyll的博客。</p><p>本托管在coding上，不过云里雾里，弄得还是不满意。</p><p>今天决定换成Hexo。再托管在Git上。一节课的功夫，很顺利的就完成了。写个文章记录下。</p><a id="more"></a><p>[TOC]</p><p>今天博客就算是搭建完成了。</p><h1 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h1><h2 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h2><p>参考<a href="https://hexo.io/docs/" target="_blank" rel="noopener">官方文档</a>，安装还是顺利的。</p><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>知乎搜到这个<a href="http://theme-next.iissnan.com" target="_blank" rel="noopener">Next主题</a>。</p><h1 id="Problems"><a href="#Problems" class="headerlink" title="Problems"></a>Problems</h1><h2 id="分类创建"><a href="#分类创建" class="headerlink" title="分类创建"></a>分类创建</h2><p>下载了Next主题。默认是没有开启分类的。查阅文档，找到了创建命令：</p><pre class="line-numbers language-shell"><code class="language-shell">hexo new page "categorie"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后打开自动建立的<code>index.md</code> 加入一行：</p><pre><code>type: &quot;categories&quot;</code></pre><h2 id="设置多Tag"><a href="#设置多Tag" class="headerlink" title="设置多Tag"></a>设置多Tag</h2><p>只需要在tag标签里这么写：</p><pre><code>tag: [tag1,tag2,...]</code></pre><h2 id="md文件命名"><a href="#md文件命名" class="headerlink" title="md文件命名"></a>md文件命名</h2><blockquote><p>在终端下，Hexo new 出的文章被完全放在<code>-post</code>一个文件夹下。</p><p>时间长了这个文件夹岂不是会很乱？</p><p>可是我也不想用Jekyll那种日期的命名方式。</p><p>我是想用子文件夹来当做分类，感觉管理起来也方便很多。</p></blockquote><p>暂时用<code>date-title</code>命名的方式吧。</p><h2 id="插图问题"><a href="#插图问题" class="headerlink" title="插图问题"></a>插图问题</h2><p><img src="http://p66eruxmw.bkt.clouddn.com/image-201803221954468.png" alt="image-201803221954468"></p><h2 id="插入媒体"><a href="#插入媒体" class="headerlink" title="插入媒体"></a>插入媒体</h2><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=544918737&auto=1&height=66"><br></iframe><pre class="line-numbers language-markdown"><code class="language-markdown"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">marginwidth</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">marginheight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span>330</span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span>86</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//music.163.com/outchain/player?type<span class="token punctuation">=</span>2&amp;id<span class="token punctuation">=</span>544918737&amp;auto<span class="token punctuation">=</span>1&amp;height<span class="token punctuation">=</span>66<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>看来Hexo是支持<code>iframe</code>的</p><h2 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h2><p>手上有个空闲的<code>.win</code>域名。就先凑合用着吧。<code>.io</code> 等博客成型了就买一个。</p><p>试了下把代码部署到 coding.net 上 ,<a href="https://ixsim.coding.me" target="_blank" rel="noopener">访问地址</a>，ping 的平均延迟都能低于50ms </p><p>然而部署都 github.io ，ping 最快也得100 ms【香港节点 2ms，然并卵】</p><p>自定义域名方法：</p><blockquote><p>1、在source文件夹中新建一个CNAME文件（无后缀名），然后用文本编辑器打开，在首行添加你的网站域名，如<a href="https://link.zhihu.com/?target=http%3A//xxxx.com" target="_blank" rel="noopener">http://xxxx.com</a>，<strong>注意前面没有http://，也没有www</strong>，然后使用<code>hexo g &amp;&amp; hexo d</code>上传部署。</p><p>2、在域名解析提供商，下面以dnspod为例。<br>（1）先添加一个CNAME，主机记录写@，后面记录值写上你的<a href="https://link.zhihu.com/?target=http%3A//xxxx.github.io" target="_blank" rel="noopener">http://xxxx.github.io</a><br>（2）再添加一个CNAME，主机记录写www，后面记录值也是<a href="https://link.zhihu.com/?target=http%3A//xxxx.github.io" target="_blank" rel="noopener">http://xxxx.github.io</a><br>这样别人用www和不用www都能访问你的网站（其实www的方式，会先解析成<a href="https://link.zhihu.com/?target=http%3A//xxxx.github.io" target="_blank" rel="noopener">http://xxxx.github.io</a>，然后根据CNAME再变成<a href="https://link.zhihu.com/?target=http%3A//xxx.com" target="_blank" rel="noopener">http://xxx.com</a>，即中间是经过一次转换的）。上面，我们用的是CNAME别名记录，也有人使用A记录，后面的记录值是写github page里面的ip地址，但有时候IP地址会更改，导致最后解析不正确，所以还是推荐用CNAME别名记录要好些，不建议用IP。3、等十分钟左右，刷新浏览器，用你自己域名访问下试试</p><p>作者：skycrown链接：<a href="https://www.zhihu.com/question/31377141/answer/87541858" target="_blank" rel="noopener">https://www.zhihu.com/question/31377141/answer/87541858</a></p><p>来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote><p>访问下试试 <a href="https://o--o.win">https://o--o.win</a></p><h2 id="同时部署到github和coding"><a href="#同时部署到github和coding" class="headerlink" title="同时部署到github和coding"></a>同时部署到github和coding</h2><p>根据Hexo的官方文档，只需要这么设置：</p><blockquote><p>deploy:<br>    type: git<br>    message: [message]<br>    repo:<br>        github: <repository url="">,[branch]<br>        gitcafe: <repository url="">,[branch] </repository></repository></p></blockquote><p>Example:</p><p><img src="http://p66eruxmw.bkt.clouddn.com/15220318479586.jpg" alt=""></p><p>Note: <code>&lt;repository url&gt;,[branch]</code>   中 <code>,</code>后不要跟空格直接根branch名。</p><p>最终还是把域名绑在了Coding。速度快多了。</p>]]></content>
      
      
      <categories>
          
          <category> Website </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SQL</title>
      <link href="/others/sql/"/>
      <url>/others/sql/</url>
      
        <content type="html"><![CDATA[<p>noSql数据库满天飞的情况下，安下心来让SQL尘埃落定吧。（出来混总要还的😌）<br>《SQL必知必会》读书笔记，Ben Forta著。</p><a id="more"></a><h1 id="了解SQL"><a href="#了解SQL" class="headerlink" title="了解SQL"></a>了解SQL</h1><p>Structured Query Language 结构化查询语言</p><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><blockquote><p>|   表示 在可选项中选择一个</p><p>[ ] 表示这个参数可选</p></blockquote><ul><li>ALTER TABLE</li></ul><p>更新  已存在  表  的  结构</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token keyword">table</span><span class="token punctuation">(</span>    <span class="token keyword">ADD</span><span class="token operator">|</span><span class="token keyword">DROP</span> <span class="token keyword">column</span> datatype <span class="token punctuation">[</span><span class="token boolean">NULL</span><span class="token operator">|</span><span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>CONSTRAINTS<span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token keyword">ADD</span><span class="token operator">|</span><span class="token keyword">DROP</span> <span class="token keyword">column</span> datatype <span class="token punctuation">[</span><span class="token boolean">NULL</span><span class="token operator">|</span><span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>CONSTRAINTS<span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>COMMIT</li></ul><p>将 事务 写入 数据库。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">COMMIT</span> <span class="token punctuation">[</span><span class="token keyword">TRANSACTION</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>CREATE INDEX</li></ul><p>在 一个或多个 列 上 创建 索引。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> i ndexname<span class="token keyword">ON</span> tablename <span class="token punctuation">(</span><span class="token keyword">column</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>CREATE PROCEDURE</li></ul><p>创建存储过程。 Oracle 使用的语法稍有不同。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> procedurename <span class="token punctuation">[</span>parameters<span class="token punctuation">]</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span><span class="token keyword">AS</span>SQL statement<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>CREATE TABLE </li></ul><p>创建 新数据库表。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> tablename<span class="token punctuation">(</span>    <span class="token keyword">column</span> datatype <span class="token punctuation">[</span><span class="token boolean">NULL</span> INOT <span class="token boolean">NULL</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>CONSTRAINTS<span class="token punctuation">]</span> <span class="token punctuation">,</span>    <span class="token keyword">column</span> datatype <span class="token punctuation">[</span><span class="token boolean">NULL</span> INOT <span class="token boolean">NULL</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>CONSTRAINTS<span class="token punctuation">]</span> <span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>CREATE VIEW</li></ul><p>用来创建 一个或多个 表上的新视图。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> viewname <span class="token keyword">AS</span><span class="token keyword">SELECT</span> <span class="token keyword">columns</span><span class="token punctuation">,</span> 。。。<span class="token keyword">FROM</span> <span class="token keyword">tables</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token keyword">WHERE</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">HAVING</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>DELETE</li></ul><p>从表中 删除 一行或多行。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> tablename<span class="token punctuation">[</span><span class="token keyword">WHERE</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>DROP</li></ul><p>永久地删除数据厍对象</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> <span class="token operator">|</span> <span class="token keyword">PROCEDURE</span> <span class="token operator">|</span> <span class="token keyword">TABLE</span> <span class="token operator">|</span> <span class="token keyword">VIEW</span>indexname <span class="token operator">|</span> procedurename <span class="token operator">|</span> tablename <span class="token operator">|</span> viewname<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>INSERT</li></ul><p>为表添加一行。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tablename <span class="token punctuation">[</span><span class="token punctuation">(</span>co1umns<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token keyword">values</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>INSERT SELECT </li></ul><p>将SELECT的结果插人到一个表</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tablename <span class="token punctuation">[</span> <span class="token punctuation">(</span><span class="token keyword">columns</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">SELECT</span> <span class="token keyword">columns</span> ， <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">FROM</span> tablename <span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token keyword">WHERE</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>ROLLBACK</li></ul><p>用于撤销-一个事务块。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">ROLLBACK</span> <span class="token punctuation">[</span><span class="token keyword">TO</span> savepointname<span class="token punctuation">]</span><span class="token punctuation">;</span>或<span class="token keyword">ROLLBACK</span> TRANSCATION<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>SELECT</li></ul><p>用于从一个或多个表(视图)中检索数据。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> columnname ，<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">FROM</span> tablename ， <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token keyword">WHERE</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">UNION</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">HAVING</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">[</span>ORDERBY <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>UPDATE</li></ul><p>更新表中的一行或多行。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">UPDATE</span> tablename<span class="token keyword">SET</span> columname <span class="token operator">=</span> <span class="token keyword">value</span> <span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token keyword">WHERE</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><ul><li>CHAR<ul><li>1-255个字符的定长字符串。长度必须在创建时规定。</li></ul></li><li>NCHAR<ul><li>CHAR的特殊形式。用来支持多字节或Unicode字符。</li></ul></li><li>TEXT (也称 LONG\MEMO\VARCHAR)<ul><li>变长文本</li></ul></li><li>NVARCHAR<ul><li>TEXT的特殊形式。</li></ul></li></ul><h3 id="数值"><a href="#数值" class="headerlink" title="数值"></a>数值</h3><ul><li>BTT 单个二进制位</li><li>DECIMAL 定点、或浮点可变的浮点值</li><li>FLOAT 浮点值</li><li>INT 4字节整数</li><li>REAL 4字节浮点</li><li>SMALLINT 2字节整数</li><li>TINYINT 1字节，0-255的整数</li></ul><blockquote><p>多数DMBS支持货币数据类型 <code>MONEY/CURRENCY</code> 有特定取值范围的DECIMAL类型。更适合存货币值</p></blockquote><h3 id="日期时间"><a href="#日期时间" class="headerlink" title="日期时间"></a>日期时间</h3><ul><li>DATE 日期</li><li>DATETIME 日期时间</li><li>SMALLDATETIME 日期时间精确到分</li><li>TIME 时间</li></ul><h1 id="检索数据"><a href="#检索数据" class="headerlink" title="检索数据"></a>检索数据</h1><ul><li>SELECT <em> `</em>`选择所有</li><li>SELECT DISTINCT name <code>DISTINCT</code> 结果去重</li></ul><h3 id="限制结果"><a href="#限制结果" class="headerlink" title="限制结果"></a>限制结果</h3><p>返回前5行</p><ul><li><p>MySQL PostgreSQL SQLite MariaDB<br>  SELECT xxx FROM xxx LIMIT 5;</p></li><li><p>进阶：LIMIT 后跟两个参数</p><pre class="line-numbers language-sql"><code class="language-sql">  <span class="token keyword">LIMIT</span> <span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span> <span class="token comment" spellcheck="true">-- 从第10个往后输出2个。输出的是 11 和 12</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 可以这样</span><span class="token keyword">SELECT</span> xxx <span class="token comment" spellcheck="true">-- 可以这样</span><span class="token comment" spellcheck="true">/*也可以这样*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="排序检索数据"><a href="#排序检索数据" class="headerlink" title="排序检索数据"></a>排序检索数据</h1><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>grade<span class="token keyword">FROM</span> Stu<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> grade<span class="token punctuation">,</span>name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--当出现并列分数则按姓名排列</span><span class="token comment" spellcheck="true">#也可以写成：</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--3就是grade 2就是name 。对应于SELECT第一句</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>重要：应保证 ORDER BY 子句是 SELECT 语句中的 <em>最后一个</em> 子句 ，否则会报错！</strong></p><h2 id="排序方向："><a href="#排序方向：" class="headerlink" title="排序方向："></a>排序方向：</h2><p>默认升序[A~Z] ，改降序：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> grade <span class="token keyword">DESC</span><span class="token comment" spellcheck="true">#多个属性想降序，必须对每一列都进行声明！</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> grade <span class="token keyword">DESC</span><span class="token punctuation">,</span> name  <span class="token comment" spellcheck="true">--name就是升序(ASC)排列</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="过滤数据"><a href="#过滤数据" class="headerlink" title="过滤数据"></a>过滤数据</h1><p>WHERE 子句操作符：</p><table><thead><tr><th>= 等于</th><th>&gt; 大于</th><th>&gt;= 或 !&lt; 大于等于</th><th>BEWTEEN AND在指定值之间</th></tr></thead><tbody><tr><td>&lt;&gt; 或 != 不等于</td><td>&lt; &lt;=</td><td>&lt;= 或  !&gt; 小于等于</td><td>IS NULL 为NULL</td></tr></tbody></table><h1 id="高级过滤"><a href="#高级过滤" class="headerlink" title="高级过滤"></a>高级过滤</h1><h2 id="组合WHERE子句"><a href="#组合WHERE子句" class="headerlink" title="组合WHERE子句"></a>组合WHERE子句</h2><p>用AND或OR组合子句</p><h2 id="AND和OR的顺序"><a href="#AND和OR的顺序" class="headerlink" title="AND和OR的顺序"></a>AND和OR的顺序</h2><p>AND级别比OR高。 如果需要改变顺序，请加括号：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">WHERE</span> <span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">'XiaoMing'</span> <span class="token operator">OR</span> name <span class="token operator">=</span> <span class="token string">'XiaoHong'</span><span class="token punctuation">)</span>    <span class="token operator">AND</span> grade <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="IN操作符"><a href="#IN操作符" class="headerlink" title="IN操作符"></a>IN操作符</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">WHERE</span> id <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">'001'</span><span class="token punctuation">,</span><span class="token string">'002'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#等价于OR</span><span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token string">'001'</span> <span class="token operator">OR</span> id <span class="token operator">=</span> <span class="token string">'002'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>IN的优点：</p><p>简单直观。比OR更快。</p><p>可以包含其他SELECT子句后面会介绍。</p><h2 id="NOT-操作符"><a href="#NOT-操作符" class="headerlink" title="NOT 操作符"></a>NOT 操作符</h2><p>否定后面的条件。不单独使用。</p><pre class="line-numbers language-SQL"><code class="language-SQL">WHERE NOT id = '01'#等价于WHERE id != '01'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>那为啥还要用NOT呢？</p><p>在复杂的条件中，可以迅速找出 <strong>不符合</strong> 条件的</p><h1 id="通配符过滤"><a href="#通配符过滤" class="headerlink" title="通配符过滤"></a>通配符过滤</h1><p>使用谓词 <code>LIKE</code> </p><ul><li>%通配符</li></ul><p>表示任意字符出现任意次</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> <span class="token string">'Xiao%'</span><span class="token comment" spellcheck="true">#XiaoMing XiaoHong XiaoLiang就都被搜出来了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>%可以匹配 0 个 1 个 多个字符（包括空格）。当然 ，并不会匹配NULL值</p><ul><li>_通配符</li></ul><p>_只匹配一个字符</p><ul><li>[]通配符</li></ul><p>匹配字符集（仅SQL Server支持）从<code>[ ]</code>里取一个字符</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> <span class="token string">'Xiao[MH]'</span>  <span class="token comment" spellcheck="true">-- 匹配XiaoM和XiaoH</span><span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> <span class="token string">'Xiao[^MH]'</span> <span class="token comment" spellcheck="true">-- 除了XiaoM和XiaoH所有的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="通配符技巧"><a href="#通配符技巧" class="headerlink" title="通配符技巧"></a>通配符技巧</h2><ul><li>不要过度使用通配符。有其他操作符能达到目的应优先考虑其他。</li><li>通配符置于开始处，搜索起来是最慢的</li></ul><hr><p><strong>SELECT name + ‘(‘ + classId + ‘)’拼接字段</strong></p><p>就是合并列</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#在SQL Server中 用 +</span><span class="token keyword">SELECT</span> name <span class="token operator">+</span> <span class="token string">'('</span> <span class="token operator">+</span> classId <span class="token operator">+</span> <span class="token string">')'</span><span class="token comment" spellcheck="true">#在DB2 Oracle PostgreSQL SQLite中 用 ||</span><span class="token keyword">SELECT</span> name <span class="token operator">||</span> <span class="token string">'('</span> <span class="token operator">||</span> classId <span class="token operator">||</span> <span class="token string">')'</span><span class="token comment" spellcheck="true">#在 MySQL MariaDB 中</span><span class="token keyword">SELECT</span> Concat<span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">' ('</span><span class="token punctuation">,</span> classId<span class="token punctuation">,</span> <span class="token string">')'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>TRIM 函数 去某个字段的空格</p><p>LTRIM() 去掉字符左边的空格  RTRIM()右边   TRIM()两边</p></blockquote><h2 id="使用别名"><a href="#使用别名" class="headerlink" title="使用别名"></a>使用别名</h2><p>拼接之后 AS newName 给新的字段用别名</p><h2 id="算数计算"><a href="#算数计算" class="headerlink" title="算数计算"></a>算数计算</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> quantity<span class="token punctuation">,</span> price<span class="token punctuation">,</span> quantity<span class="token operator">*</span>price <span class="token keyword">AS</span> Pay<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>不同的sql还不一样名。不怎么通用。 P65 Mark</p><h1 id="汇总数据"><a href="#汇总数据" class="headerlink" title="汇总数据"></a>汇总数据</h1><h2 id="聚集函数"><a href="#聚集函数" class="headerlink" title="聚集函数"></a>聚集函数</h2><ul><li><p>AVG() 返回列的平均值</p></li><li><p>COUNT()返回列的行数</p><ul><li>COUNT(columnName) 对特定的列计数，忽略NULL值</li><li>COUNT( * ) 表中的行数计数。不论是不是NIULL都计数。</li></ul></li><li><p>MAX() MIN()</p></li><li><p>SUM() 列值之和</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">AS</span> avg_price <span class="token keyword">FROM</span> xxx<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--返回平均价格</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="DISTINCT去重"><a href="#DISTINCT去重" class="headerlink" title="DISTINCT去重"></a>DISTINCT去重</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> price<span class="token punctuation">)</span> <span class="token keyword">AS</span> avg_price<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h1><p>GROPU BY和HAVING</p><h2 id="不用GROUP-BY"><a href="#不用GROUP-BY" class="headerlink" title="不用GROUP BY"></a>不用GROUP BY</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span> <span class="token keyword">AS</span> 小明的总分 <span class="token keyword">FROM</span> Stu<span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">'小明'</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>但这时候如果还想看小红，还想看小亮的总分，总不能挨个都写到WHERE里。</p><h2 id="GROUP-BY"><a href="#GROUP-BY" class="headerlink" title="GROUP BY"></a>GROUP BY</h2><pre class="line-numbers language-Sql"><code class="language-Sql">SELECT nmae, SUM(grade) AS 总分 FROM StuGROUP BY name;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>GROUP BY必须出现于WHERE之后 ORDER BY之前</li><li>NULL也会被分成一组</li></ul><h2 id="过滤分组"><a href="#过滤分组" class="headerlink" title="过滤分组"></a>过滤分组</h2><p>WHERE过滤的只是行，看上去像是分组了。</p><p>如果想排除分组怎么办？（比如不看小丽的总分）</p><p>HAVING，支持所有WHERE操作符。语法相同。</p><blockquote><p>差别：</p><p>WHERE在分组前进行过滤，过滤掉的行不参与分组。</p><p>HAVING再对分组后的结果过滤</p></blockquote><h1 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h1><h2 id="IN-SELECT"><a href="#IN-SELECT" class="headerlink" title="IN(SELECT)"></a>IN(SELECT)</h2><p>用 IN 操作符 嵌套 SECLECT 查询</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> name <span class="token keyword">FROM</span> Stu<span class="token keyword">WHERE</span> grade <span class="token operator">IN</span> <span class="token punctuation">(</span>        <span class="token keyword">SELECT</span> grade <span class="token keyword">FROM</span> Stu        <span class="token keyword">WHERE</span> grade <span class="token operator">></span> <span class="token number">60</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>作为子查询的SELECT子句只能是单列</li><li>多次嵌套会影响效率</li></ul><h2 id="作为计算字段"><a href="#作为计算字段" class="headerlink" title="作为计算字段"></a>作为计算字段</h2><p>当做返回值</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> name<span class="token punctuation">,</span> <span class="token punctuation">(</span>        <span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span>        <span class="token keyword">FROM</span> tab1        <span class="token keyword">WHERE</span> tab1<span class="token punctuation">.</span>id <span class="token operator">=</span> tab2<span class="token punctuation">.</span>id    <span class="token punctuation">)</span> <span class="token keyword">AS</span> quantity<span class="token keyword">FROM</span> tab2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>完全限定列名</p><p>两个表里都已id字段，要加前缀的</p></li><li><p>后面学习的JOIN代替上面的方法更有效</p></li></ul><h1 id="联结表"><a href="#联结表" class="headerlink" title="联结表"></a>联结表</h1><h2 id="笛卡尔积"><a href="#笛卡尔积" class="headerlink" title="笛卡尔积"></a>笛卡尔积</h2><p>WHERE条件子句不写，直接</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span>name，grade<span class="token keyword">FROM</span> tab1<span class="token punctuation">,</span>tab2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="内联结-等值联结"><a href="#内联结-等值联结" class="headerlink" title="内联结 等值联结"></a>内联结 等值联结</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> grade<span class="token keyword">FROM</span> Stu <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> Quit    <span class="token keyword">ON</span> Stu<span class="token punctuation">.</span>id <span class="token operator">=</span> Quit<span class="token punctuation">.</span>id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>等价于</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> grade<span class="token keyword">FROM</span> Stu<span class="token punctuation">,</span> Quit<span class="token keyword">WHERE</span> Stu<span class="token punctuation">.</span>id <span class="token operator">=</span> Quit<span class="token punctuation">.</span>id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>只不过关键词 WHERE 换成 ON</p><blockquote><p>ANSI SQL规范首选 INNER JOIN 语法</p><p>第二种写法是很Low的哦</p></blockquote><p>但第二种写法还可以联结多个表，当然性能会下降</p><h1 id="高级联结"><a href="#高级联结" class="headerlink" title="高级联结"></a>高级联结</h1><h2 id="表的别名"><a href="#表的别名" class="headerlink" title="表的别名"></a>表的别名</h2><p>使用AS ，注意，也可以在FROM之前的SELECT中使用哦</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> A<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span> B<span class="token punctuation">.</span>name<span class="token keyword">FROM</span> tab1 <span class="token keyword">AS</span> A<span class="token punctuation">,</span> tab2 <span class="token keyword">AS</span> B<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><p>除了内联结（等值联结） 还有三种其他联结</p><h2 id="自联结"><a href="#自联结" class="headerlink" title="自联结"></a>自联结</h2><p>假如查询和小明考了一样分数的同学们的名字，用嵌套查询的方式可以这样：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> name <span class="token keyword">FROM</span> Grade<span class="token keyword">WHERE</span> grade <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> grade <span class="token keyword">FROM</span> Grade               <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">'小明'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>用自联结就可以这样：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> name<span class="token keyword">FROM</span> Grade <span class="token keyword">AS</span> g1<span class="token punctuation">,</span> Grade <span class="token keyword">AS</span> g2<span class="token keyword">WHERE</span> g2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'小明'</span>     <span class="token operator">AND</span> g1<span class="token punctuation">.</span>grade <span class="token operator">=</span> g2<span class="token punctuation">.</span>grade<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>一般情况下使用[[联结]]比使用[[子查询]]快得多。</p><p>当然也可以试用两种方法，以确定哪种性能更好</p></blockquote><h2 id="自然联结"><a href="#自然联结" class="headerlink" title="自然联结"></a>自然联结</h2><p>排除多次出现。每一列只返回一次。</p><p>一般通过对一个表使用通配符(SELECT *)，对其他表使用 明确的 子集来完成。</p><p>比如查询同学的成绩。学号的那张表肯定是唯一的，就可以</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> S<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token punctuation">,</span> xxxxxx<span class="token keyword">FROM</span> Stu <span class="token keyword">AS</span> S<span class="token punctuation">,</span> tab2<span class="token punctuation">,</span> xxxxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="外联结"><a href="#外联结" class="headerlink" title="外联结"></a>外联结</h2><p>左外联结和右外联结，</p><p>有时候 表1 和 表2 联结，并不能出现一一对应的情况，这时候以表一的数据为准，【表一中有，表二中没有的】 联结之后填充NULL值。就是左外联结。 关键词是</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">FROM</span> tab1 <span class="token keyword">LEFT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> tab2    <span class="token keyword">ON</span> 条件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>右外联结 就是 <code>RIGHT OUTER JOIN</code></p><blockquote><p><strong>全外联结</strong>  <code>FULL OUTER JOIN</code></p><p>带上左右不关联的行全部返回。但是 MySQL  SQLite MariaDB等不支持 FULL OUTER JOIN 的 语法</p></blockquote><h1 id="组合查询"><a href="#组合查询" class="headerlink" title="组合查询"></a>组合查询</h1><p>用 UNION 联结两条 SELECT</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> name<span class="token punctuation">,</span>id <span class="token keyword">FROM</span> xxx<span class="token keyword">WHERE</span> id <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">'001'</span><span class="token punctuation">,</span><span class="token string">'002'</span><span class="token punctuation">,</span><span class="token string">'003'</span><span class="token punctuation">)</span><span class="token keyword">UNION</span><span class="token keyword">SELECT</span> name<span class="token punctuation">,</span>id <span class="token keyword">FROM</span> xxx<span class="token keyword">WHERE</span> xxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>上面的例子当然可以用 WHERE 配合 OR 来组合条件完成，</p><p>但是当遇到复杂的过滤条件， UNION 处理起来更简单。</p><p>性能上的差别，最好是测试以确定更优。</p></blockquote><ul><li>Note：列的数据类型必须完全兼容。上面我给的例子是完全相同的两个列，实际上，只要类型兼容即可（即 必须是DBMS可以隐含转换的类型）。</li></ul><h2 id="重复的行"><a href="#重复的行" class="headerlink" title="重复的行"></a>重复的行</h2><p>UNOIN 默认会去除重复行。（看上去效果和使用了多个WHERE子句一样）</p><p>如果想返回所有行。请使用 <code>UNOIN ALL</code> 关键词。实现合并两个集合而不去重。这样可以解决【用WHERE会去重】的问题。</p><blockquote><p><strong>其他UNION</strong></p><p>既然有并集。就还有 差集：<code>EXCEPT</code>    交集：<code>INTERSECT</code></p><p>但实际上他们很少使用，因为可以用 联结  来得到结果</p></blockquote><h1 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h1><p>学了这么久，查插删改一直在查，终于到了插了：</p><ul><li>插入完整的行</li><li>插入行的一部分</li><li>插入查询的结果</li></ul><h2 id="插入完整的行"><a href="#插入完整的行" class="headerlink" title="插入完整的行"></a>插入完整的行</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tab1<span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'001'</span><span class="token punctuation">,</span><span class="token string">'XiaoMing'</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token boolean">Null</span><span class="token punctuation">,</span><span class="token boolean">Null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>但是这种方法不安全。完全依赖列的顺序插入。表的结构变动后，迟早会出问题。更安全（麻烦）的方法：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tab1<span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>math<span class="token punctuation">,</span>english<span class="token punctuation">,</span>PE<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'001'</span><span class="token punctuation">,</span><span class="token string">'XiaoMing'</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token boolean">Null</span><span class="token punctuation">,</span><span class="token boolean">Null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="插入部分行"><a href="#插入部分行" class="headerlink" title="插入部分行"></a>插入部分行</h2><p>就是说列名可以不写全。但必须满足以下某个条件：</p><ul><li>该列定义 允许 NULL值</li><li>表定义中给出了默认值</li></ul><h2 id="插入检索的数据"><a href="#插入检索的数据" class="headerlink" title="插入检索的数据"></a>插入检索的数据</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tab1<span class="token punctuation">(</span>xxx<span class="token punctuation">,</span>xxx<span class="token punctuation">,</span>xxx<span class="token punctuation">)</span><span class="token keyword">SELECT</span> xxx<span class="token punctuation">,</span>xxx<span class="token punctuation">,</span>xxx <span class="token keyword">FROM</span> xxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中INSERT 和 SELECT 的列名不要求匹配。插入只看位置。</p><h2 id="从一张表复制到另一张表"><a href="#从一张表复制到另一张表" class="headerlink" title="从一张表复制到另一张表"></a>从一张表复制到另一张表</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">INTO</span> tabCopy <span class="token comment" spellcheck="true">-- 创建一张新表</span><span class="token keyword">FROM</span> tab1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果只是复制部分列，把 * 换成 列名</p><p><strong>MySQL  Oracle  PostgreSQL  SQLite</strong>语法不同：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> tabCopy <span class="token keyword">AS</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> tab1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="删改"><a href="#删改" class="headerlink" title="删改"></a>删改</h1><h2 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">UPDATE</span> Stu<span class="token keyword">SET</span> QQ <span class="token operator">=</span> <span class="token string">'123'</span><span class="token punctuation">,</span> WeChat <span class="token operator">=</span> <span class="token string">'123'</span><span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token string">'001'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>更新总是要以  要更新的 表名 开始。</p><p>会以 WHERE 子句结束，它告诉DBMS要更新哪一行。</p><p><strong>没有WHERE子句会更新所有行</strong> 这不是我们所希望的</p><h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> Stu<span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token string">'001'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>DELETE删除的是【行】。一定要带上WHERE，不然就删了所有的行。</p><blockquote><p>如果想删除所有行，请使用 TRUNCATE TABLE ,它完成相同的工作速度 更快。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS 圆角、阴影通用配置</title>
      <link href="/ios/uiviewhelper.swift/"/>
      <url>/ios/uiviewhelper.swift/</url>
      
        <content type="html"><![CDATA[<p>这是在小波老师的课上学到的一劳永逸地给控件添加圆角、阴影效果的代码。保存备用。<br><a id="more"></a></p><pre class="line-numbers language-swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token builtin">UIKit</span><span class="token comment" spellcheck="true">//圆角</span><span class="token keyword">extension</span> <span class="token builtin">UIView</span> <span class="token punctuation">{</span>  <span class="token atrule">@IBInspectable</span> <span class="token comment" spellcheck="true">//让它可见</span>  <span class="token keyword">var</span> cornerReadius<span class="token punctuation">:</span> <span class="token builtin">CGFloat</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//打var选get-set模板 //图形相关属性CG开头</span>      <span class="token keyword">get</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> layer<span class="token punctuation">.</span>cornerRadius      <span class="token punctuation">}</span>      <span class="token keyword">set</span> <span class="token punctuation">{</span>          layer<span class="token punctuation">.</span>cornerRadius <span class="token operator">=</span> newValue      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//阴影圆角</span>  <span class="token atrule">@IBInspectable</span>  <span class="token keyword">var</span> shadowRadius<span class="token punctuation">:</span> <span class="token builtin">CGFloat</span> <span class="token punctuation">{</span>      <span class="token keyword">get</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> layer<span class="token punctuation">.</span>shadowRadius      <span class="token punctuation">}</span>      <span class="token keyword">set</span> <span class="token punctuation">{</span>          layer<span class="token punctuation">.</span>shadowRadius <span class="token operator">=</span> newValue      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//阴影透明度</span>  <span class="token atrule">@IBInspectable</span>  <span class="token keyword">var</span> shawodOpacity<span class="token punctuation">:</span> <span class="token builtin">Float</span> <span class="token punctuation">{</span>      <span class="token keyword">get</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> layer<span class="token punctuation">.</span>shadowOpacity      <span class="token punctuation">}</span>      <span class="token keyword">set</span> <span class="token punctuation">{</span>          layer<span class="token punctuation">.</span>shadowOpacity <span class="token operator">=</span> newValue      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//阴影颜色</span>  <span class="token atrule">@IBInspectable</span>  <span class="token keyword">var</span> shadowColor<span class="token punctuation">:</span> <span class="token builtin">UIColor</span><span class="token operator">?</span> <span class="token punctuation">{</span>      <span class="token keyword">get</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> layer<span class="token punctuation">.</span>shadowColor <span class="token operator">!=</span> <span class="token constant">nil</span> <span class="token operator">?</span> <span class="token function">UIColor</span><span class="token punctuation">(</span>cgColor<span class="token punctuation">:</span> layer<span class="token punctuation">.</span>shadowColor<span class="token operator">!</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token constant">nil</span>      <span class="token punctuation">}</span>      <span class="token keyword">set</span> <span class="token punctuation">{</span>          layer<span class="token punctuation">.</span>shadowColor <span class="token operator">=</span> newValue<span class="token operator">?</span><span class="token punctuation">.</span>cgColor      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//阴影大小</span>  <span class="token atrule">@IBInspectable</span>  <span class="token keyword">var</span> shadowOffset<span class="token punctuation">:</span> <span class="token builtin">CGSize</span> <span class="token punctuation">{</span>      <span class="token keyword">get</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> layer<span class="token punctuation">.</span>shadowOffset      <span class="token punctuation">}</span>      <span class="token keyword">set</span> <span class="token punctuation">{</span>          layer<span class="token punctuation">.</span>shadowOffset <span class="token operator">=</span> newValue      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>小波iOS11初级篇笔记</title>
      <link href="/ios/xiao-bo-ios11-chu-ji-pian-bi-ji/"/>
      <url>/ios/xiao-bo-ios11-chu-ji-pian-bi-ji/</url>
      
        <content type="html"><![CDATA[<p>这份Swift4.0的教程来自<a href="http://xiaoboswift.com/my/course/90" target="_blank" rel="noopener">小波说雨燕</a> 是能搜到的第一份Swift 4.0开发<strong>中文教程</strong><br>我要是英语好早去听YouTube了</p><a id="more"></a><h1 id="小知识点"><a href="#小知识点" class="headerlink" title="小知识点"></a>小知识点</h1><ul><li><p>IB : Interface Builder 界面构建器</p></li><li><p>这种写法来防止id出错</p></li></ul><pre class="line-numbers language-swift"><code class="language-swift">  <span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>describing<span class="token punctuation">:</span> <span class="token builtin">CardCell</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span>  withIdentifier<span class="token punctuation">:</span> <span class="token string">"id"</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>ctrl + B 光标左移 </li><li>点行号前面是加断点。去断点把它拖到外面就好了。</li><li>加 ！是强制</li></ul><h1 id="导航和转场"><a href="#导航和转场" class="headerlink" title="导航和转场"></a>导航和转场</h1><h2 id="新场景"><a href="#新场景" class="headerlink" title="新场景"></a>新场景</h2><ol><li>拖一个新的UITableViewController，就要新建对应的场景控制器。</li><li>New File –&gt; Cocoa Class –&gt; 起个名,父类选择UITableViewController</li><li>在StoryBoard中，identity栏讲场景与类绑定</li></ol><h2 id="添加导航："><a href="#添加导航：" class="headerlink" title="添加导航："></a>添加导航：</h2><p>菜单栏-Editor–&gt;Embed in–&gt;Nav~</p><ul><li>怎么转到新场景：<br>控件上ctrl拖到新场景 选择 Show (Present是模态展示，没有层级关系)</li></ul><h2 id="转场"><a href="#转场" class="headerlink" title="转场"></a>转场</h2><p>自动生成的代码中找到// MARK: - Navigation 解除注释</p><h1 id="Table-View-代理模式"><a href="#Table-View-代理模式" class="headerlink" title="Table View[代理模式]"></a>Table View[代理模式]</h1><p>在ViewControler场景后加上<code>UITableViewDataSource</code>就支持了TableView的数据源协议。<br>加上后会报一个当前不支持的错，点Fix自动填写两个方法。<br>第一个是说Table中有多少行。Ex:<code>return 10</code><br>第二个方法设置每个单元格的模板。Ex:</p><pre class="line-numbers language-swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function">tableView</span><span class="token punctuation">(</span><span class="token number">_</span> tableView<span class="token punctuation">:</span> <span class="token builtin">UITableView</span><span class="token punctuation">,</span> cellForRowAt indexPath<span class="token punctuation">:</span> <span class="token builtin">IndexPath</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">UITableViewCell</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> cell <span class="token operator">=</span> tableView<span class="token punctuation">.</span><span class="token function">dequeueReusableCell</span><span class="token punctuation">(</span>withIdentifier<span class="token punctuation">:</span> <span class="token string">"WeaponCell"</span><span class="token punctuation">,</span> <span class="token keyword">for</span><span class="token punctuation">:</span> indexPath<span class="token punctuation">)</span>        cell<span class="token punctuation">.</span>textLabel<span class="token operator">?</span><span class="token punctuation">.</span>text <span class="token operator">=</span> weapons<span class="token punctuation">[</span>indexPath<span class="token punctuation">.</span>row<span class="token punctuation">]</span>        <span class="token keyword">return</span> cell    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为什么要重复使用模板呢？</p><blockquote><p>答：这样可以在滑动的时候，把消失的单元格从内存回收</p></blockquote><p>协议连接：在TableView上ctrl拖到ViewControler上，选DataSource：<br><img src="http://p66eruxmw.bkt.clouddn.com/15230037794942.jpg" alt=""></p><h2 id="识别单元格"><a href="#识别单元格" class="headerlink" title="识别单元格"></a>识别单元格</h2><p>点击的是第几个单元格呢？</p><pre><code>@IBAction func favBtnTap(_ sender: UIButton) {//点击的坐标（相对于TableView）        let btnPos = sender.convert(CGPoint.zero, to: self.tableView)//所在的行        let indexPath = tableView.indexPathForRow(at:btnPos)!}</code></pre><ul><li>indexPath有两个属性[session,row]<br>就是第几列第几行 [横坐标,纵坐标]</li></ul><h2 id="左-右滑动"><a href="#左-右滑动" class="headerlink" title="左/右滑动"></a>左/右滑动</h2><pre class="line-numbers language-swift"><code class="language-swift"><span class="token comment" spellcheck="true">//←  左滑 输入leading就能联想出</span><span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function">tableView</span><span class="token punctuation">(</span><span class="token number">_</span> tableView<span class="token punctuation">:</span> <span class="token builtin">UITableView</span><span class="token punctuation">,</span> leadingSwipeActionsConfigurationForRowAt indexPath<span class="token punctuation">:</span> <span class="token builtin">IndexPath</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">UISwipeActionsConfiguration</span><span class="token operator">?</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> aaa <span class="token operator">=</span> <span class="token function">UIContextualAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">//操作内容</span>    <span class="token function">completion</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//点完收起来</span>    <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//分享按钮</span>    <span class="token keyword">let</span> shareAction <span class="token operator">=</span> <span class="token function">UIContextualAction</span><span class="token punctuation">(</span>style<span class="token punctuation">:</span> <span class="token punctuation">.</span>normal<span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">"Share"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span><span class="token number">_</span><span class="token punctuation">,</span> <span class="token number">_</span><span class="token punctuation">,</span> completion<span class="token punctuation">)</span> <span class="token keyword">in</span>            <span class="token keyword">let</span> text <span class="token operator">=</span> <span class="token string">"这是一把<span class="token interpolation"><span class="token delimiter variable">\(</span><span class="token keyword">self</span><span class="token punctuation">.</span>weapons<span class="token punctuation">[</span>indexPath<span class="token punctuation">.</span>row<span class="token punctuation">]</span><span class="token delimiter variable">)</span></span>xue"</span>            <span class="token keyword">let</span> image <span class="token operator">=</span> <span class="token function">UIImage</span><span class="token punctuation">(</span>named<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">.</span>weaponImages<span class="token punctuation">[</span>indexPath<span class="token punctuation">.</span>row<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!</span>            <span class="token keyword">let</span> ac <span class="token operator">=</span> <span class="token function">UIActivityViewController</span><span class="token punctuation">(</span>activityItems<span class="token punctuation">:</span> <span class="token punctuation">[</span>text<span class="token punctuation">,</span>image<span class="token punctuation">]</span><span class="token punctuation">,</span> applicationActivities<span class="token punctuation">:</span> <span class="token constant">nil</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//解决iPad用模态框不好看的问题</span>            <span class="token keyword">if</span> <span class="token keyword">let</span> pc <span class="token operator">=</span> ac<span class="token punctuation">.</span>popoverPresentationController<span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token keyword">let</span> cell <span class="token operator">=</span> tableView<span class="token punctuation">.</span><span class="token function">cellForRow</span><span class="token punctuation">(</span>at<span class="token punctuation">:</span> indexPath<span class="token punctuation">)</span><span class="token punctuation">{</span>                    pc<span class="token punctuation">.</span>sourceView <span class="token operator">=</span> cell                    pc<span class="token punctuation">.</span>sourceRect <span class="token operator">=</span> cell<span class="token punctuation">.</span>bounds                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">present</span><span class="token punctuation">(</span>ac<span class="token punctuation">,</span> animated<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span>            <span class="token function">completion</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//点完收起来</span>    <span class="token punctuation">}</span>        shareAction<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token builtin">UIColor</span><span class="token punctuation">.</span>orange        <span class="token keyword">let</span> config <span class="token operator">=</span> <span class="token function">UISwipeActionsConfiguration</span><span class="token punctuation">(</span>actions<span class="token punctuation">:</span> <span class="token punctuation">[</span>aaa<span class="token punctuation">,</span>shareAction<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//告诉系统有几个按钮</span>        <span class="token keyword">return</span> config<span class="token punctuation">}</span><span class="token comment" spellcheck="true">//→ 右滑改成 trailingSwipe</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="属性监视器-观察者模式"><a href="#属性监视器-观察者模式" class="headerlink" title="属性监视器[观察者模式]"></a>属性监视器[观察者模式]</h1><p>变量后加大括号就是属性监视器 。</p><pre class="line-numbers language-swift"><code class="language-swift"><span class="token keyword">var</span> favorite <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//属性变化之前</span>        <span class="token keyword">willSet</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> newValue<span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//即 if newValue == True</span>                favBtn<span class="token punctuation">.</span><span class="token function">setImage</span><span class="token punctuation">(</span>#<span class="token function">imageLiteral</span><span class="token punctuation">(</span>resourceName<span class="token punctuation">:</span> <span class="token string">"fav"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>normal<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                favBtn<span class="token punctuation">.</span><span class="token function">setImage</span><span class="token punctuation">(</span>#<span class="token function">imageLiteral</span><span class="token punctuation">(</span>resourceName<span class="token punctuation">:</span> <span class="token string">"unfav"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>normal<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Swift语法笔记</title>
      <link href="/ios/yu-fa-wen-ti/"/>
      <url>/ios/yu-fa-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>语法学习记录。学习Swift的语法，大概就是 <strong>面向过程</strong> –》<strong>面向对象</strong> –》 <strong>面向协议</strong> 的过程。<br>另外学习过程中，越来越感觉到设计模式的重要性。想起之前读过的《大话设计模式》，有时间要再读一读了。</p><a id="more"></a><ul><li><p>Tuple 元组：定义变量的一个组合</p><pre class="line-numbers language-swift"><code class="language-swift"><span class="token keyword">var</span> 向量 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//向量.0即第一个元素</span><span class="token keyword">var</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//用 x,y,z即访问</span><span class="token keyword">var</span> 课程名 <span class="token operator">=</span> <span class="token punctuation">(</span>day<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span> unit<span class="token punctuation">:</span><span class="token string">"天"</span><span class="token punctuation">,</span> lang<span class="token punctuation">:</span><span class="token string">"Swfit"</span><span class="token punctuation">,</span> ver<span class="token punctuation">:</span><span class="token string">"4.0"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//课程.lang</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>Optional 选填类型</strong><br><code>var 变量:类型?</code>  默认值是 nil    类型后紧跟?不可省略</p><p><code>var addr : String?</code></p></li><li><p>鼠标放在变量上，点虚线可以批量对变量改名</p></li><li><p>数组 a = [Int]</p><ul><li>创建数组<code>reaptelement</code>方法批量赋值。</li><li>数组 <code>append()</code> 方法是在后面添加元素</li><li><code>insert(a,at: 4)</code> 插入</li><li><code>remove(at:8)</code>删除</li></ul></li><li><p><strong>Set类型</strong> 【集合】 不重复。无序。</p><ul><li><p>aΠb <code>a.intersectrs(b)</code></p></li><li><p>aUb <code>a.union(b)</code></p><p>剩下的自己查文档吧！</p></li></ul></li><li><p><strong>函数类型</strong> <code>(Int,Int) -&gt; Int</code></p><ul><li><pre class="line-numbers language-swift"><code class="language-swift"><span class="token keyword">func</span> <span class="token function">calculate</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span><span class="token builtin">Int</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span><span class="token builtin">Int</span><span class="token punctuation">,</span> method<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span><span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">method</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>18 课 闭包。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS《笨猫快乐学编程》学习笔记</title>
      <link href="/ios/lan-mao-ji-lu/"/>
      <url>/ios/lan-mao-ji-lu/</url>
      
        <content type="html"><![CDATA[<p>这是我找到的国内第一份Swift4.0教程，发布在<a href="https://zhuanlan.zhihu.com/p/29746936" target="_blank" rel="noopener">知乎专栏-让不懂编程的人爱上iPhone开发(2017秋iOS11+Swift4+Xcode9版)</a>。</p><p>一份纯文字加图片的教程。但让我感到了快乐。</p><p>下面是学习过程中记录的一些东西。尽管都是傻傻的知识点，但我的iOS之路就是这么开始的。</p><p>感谢那些分享的人！希望有一天我也能用我的能力，来回报这个社会。</p><a id="more"></a><ul><li><p>右下角是Object  Library（对象库）</p></li><li><p>Swift是大小写敏感的</p></li><li><p>Xcode提示”ParseIssue”或”Expected<something>”的时候，很可能忘了在每行代码最后加上个花括号或)。</something></p></li><li><p>kits: 组件</p></li><li><p>你以为躲起来就找不到你了嘛？像你这么拉风的男人，无论在什么地方，都像漆黑中的萤火虫一样，那样的鲜明，那样的出众。</p></li><li><p>如果某个动作方 法有个参数，那么Interface Builder就会在名称后 添加 个冒号。</p></li><li><p>\()  是占位符</p></li><li><p><code>command  T</code> 多标签更方便</p></li><li><p>能用let别用var</p></li><li><p>​</p><ul><li>和控件有关的 方法：<code>@IBAction func</code></li><li>和控件有关的 变量：<code>@IBOutelet weak var</code></li></ul></li><li><p>Info.plist</p><ul><li><p>Localiztion native development region–本地化相关,如果用户所在地没有相应的语言资源,则用这个key的vae来作为默认</p></li><li><p>Executable file – 程序安装包的名称</p><p>Bundle identifier-该束的唯一标识字符串,该字符串的格式类似<code>com.yourcompany.yourapp</code>,<strong>*如果</strong>使用模拟器跑你的应用,<strong>这个字段没有用处</strong>,<strong>如果</strong>你需要把你的应用部署到设备上,你必须生成一个证书,而在生成证书的时候,在 apple的网站上需要增加相应的 <strong>app Ids</strong>.这里有一个字段Bundle identifier,如果这个 Bundle identifier是一个完整字符串,那么文件中的这个字段必须和后者完全相同,如果<strong>appIDs</strong>中的字段含有通配符*,那么文件中的字符串必须符合后者的描述。设置程序安装后显示的名称。应用程序名称限制在10-12个字符,如果超出,将被显示缩写名称。</p></li><li><p>InfoDictionary Version-lnfo.plist格式的版本信息</p></li><li><p>Bundle name-产品名称</p></li><li><p>Bundle OS Type code-用来标识束类型的四个字母长的代码,</p></li><li><p>Bundle version string, short-面向用户市场的束的版本字符串</p></li><li><p>Bundle version-应用程序版本号,每次部署应用程序的一个新版本时,将会增加这个编号,在 app store上用的。</p></li><li><p>Application requires iphone environment用于指示程序包是否只能运行在 iphone os系</p><p>统上。 Xcode自动加入这个键,并将它的值设置为true。您不应该改变这个键的值。                                                                                                                        </p></li><li><p>Launch screen interface file base name-启动界面的文件名称</p></li><li><p>Main storyboard file base name-一个字符串,指定应用的主 storyboard文件名称</p></li><li><p>Required device capabilities跟设备相关的属性设置</p></li><li><p>Status bar is initially hidden-这个字符串的作用应该很清楚了,就是刚才是否隐藏状态栏</p></li><li><p>Supported interface orientations-程序默认支持的方向</p></li><li><p>Supported interface orientations(Pad)-程序默认支持的方向(iPad)</p></li></ul></li><li><p>Editor Size to Fit Content 快捷键为 <code>command =</code> </p></li><li><p>按住 <code>option</code>点方法名。可查看介绍</p></li><li><p><code>let oneImage = 图片名</code>可直接将图片赋给常量（还有image literal可视化效果）</p></li><li><p>​</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iOS算法笔记</title>
      <link href="/ios/suan-fa-bi-ji/"/>
      <url>/ios/suan-fa-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="尾递归：防止内存爆炸"><a href="#尾递归：防止内存爆炸" class="headerlink" title="尾递归：防止内存爆炸"></a>尾递归：防止内存爆炸</h2><ul><li>只返回函数本身。</li><li>量放在参数中。<br>Ex:</li></ul><pre class="line-numbers language-swift"><code class="language-swift">fun <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token number">_</span> n <span class="token punctuation">:</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token number">_</span> total <span class="token punctuation">:</span><span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> total <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token keyword">func</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> total <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Git笔记</title>
      <link href="/others/git-bi-ji/"/>
      <url>/others/git-bi-ji/</url>
      
        <content type="html"><![CDATA[<p>Git肯定不是看一本书去一次学会的，而是先掌握了最基础的命令后，在一次次地遇到各种要应对的情况时去查文档解决。解决了问题当然要记一下咯，于是就有了这篇文章。</p><a id="more"></a><h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><ul><li><p>回滚版本</p><pre class="line-numbers language-shell"><code class="language-shell">git reset --hard HEAD^git reset --hard HEAD^^git reset --hard HEAD~10git reset --hard SHA1串(而且不需要写全就能匹配，8位就够)#忘记了SHA1号怎么办？git log #查看提交历史，以便确定要回退到哪个版本git reflog #查看命令历史，以便确定要回到未来的哪个版本。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>回滚文件</p><pre class="line-numbers language-shell"><code class="language-shell">git checkout --a.txt #这样就撤销了对这个文件的修改。（注意一定要带--  不然就成了加分支）#如果修改后又git add .了呢？（文件已经在暂存区）git reset HEAD a.txt#git reset 命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用 HEAD 时，表示最新的版本。 运行了上一层命令，git status看一下状态，会发现，暂存区里已经回滚。 再执行 checkout --a.txt 就把文件回滚了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>分支</p></li></ul><pre class="line-numbers language-shell"><code class="language-shell">git checkout -b newBranch#-b表示创建并切换，相当于以下两条命令git branch newBranchgit checkout newBranchgit branch #查看分支#合并到mastergit checkout mastergit merge newBranchgit branch -d newBranch #删除分支<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>普通的<code>git merge</code>合并使用fast forward的合并模式，就是把HEAD指针指到分支commit的最新指针上了。 使用命令<code>git merge --no-ff -m &quot;合并内容&quot; newBranchName</code>禁用了ff，合并的时候会创建一个commit。</p></blockquote><h1 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h1><ul><li>所有空行或#开头的行都会被忽略；</li><li>可以使用标准的 glob 模式匹配；</li><li>文件或目录前加 <code>/</code> 表示仓库根目录的对应文件；</li><li>匹配模式最后跟反斜杠 <code>/</code> 说明要忽略的是目录；</li><li>要特殊不忽略某个文件或目录，可以在模式前加上取反 <code>!</code> 。</li></ul><p>其中 glob 模式是指 shell 所使用的简化了的正则表达式。</p><ul><li>星号 <code>*</code> 匹配零个或多个任意字符；</li><li><code>[abc]</code>匹配任何一个列在方括号中的字符（这个例子要么匹配一个 a，要么匹配一个 b，要么匹配一个 c）；- - 问号 <code>?</code> 只匹配一个任意字符；</li><li>如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配（比如 <code>[0-9]</code> 表示匹配所有 0 到 9 的数字）。</li></ul><p>下面是一个 <code>.gitignore</code> 文件例子，注释上附录有说明：</p><pre class="line-numbers language-shell"><code class="language-shell">*.a                    # 所有以 '.a' 为后缀的文件都屏蔽掉# Office 缓存文件~'$'*.docx~'$'*.ppt~'$'*.pptx ~'$'*.xlstags                   # 仓库中所有名为 tags 的文件都屏蔽core.*                 # 仓库中所有以 'core.' 开头的文件都屏蔽tools/                # 屏蔽目录 toolslog/*                  # 屏蔽目录 log 下的所有文件，但不屏蔽 log 目录本身/log.log               # 只屏蔽仓库根目录下的 log.log 文件，其他目录中的不屏蔽readme.md       # 屏蔽仓库中所有名为 readme.md 的文件!/readme.md     # 在上一条屏蔽规则的条件下，不屏蔽仓库根目录下的 readme.md 文件 例子中的最后两条的顺序很重要，必须要先屏蔽所有的，然后才建立特殊不屏蔽的规则<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Git-Pull冲突问题"><a href="#Git-Pull冲突问题" class="headerlink" title="Git Pull冲突问题"></a>Git Pull冲突问题</h1><ul><li><p>方法1 <strong>git stash</strong></p><pre class="line-numbers language-git"><code class="language-git">git stash 暂存本地修改git pull 从远程版本库拉取新的修改git stash pop 将暂存起来的修改合并到本地工作库，如果有冲突会有相应的提示，解决冲突并提交即可<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>Note：</strong><br><code>git stash</code>一般用于你在某一分支工作做了一半(还不值得做一次提交或者压根还不想提交)时，你突然想切换到其他分支做一点儿别的事。这时，用<code>git stash</code>就再合适不过了。<br>stash的恢复方法：</p><pre class="line-numbers language-shell"><code class="language-shell">git stash list #查看stash# 恢复方法一git stash apply #恢复，stash内容并不删除，需要用git stash drop #来删除。# 上面两句相当于下面的方法二：git stash pop #恢复的同时把stash的内容也删了。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>方法2  Pull is not possible because you have unmerged files.<br>本地的push和merge会形成MERGE-HEAD(FETCH-HEAD), HEAD（PUSH-HEAD）这样的引用。HEAD代表本地最近成功push后形成的引用。MERGE-HEAD表示成功pull后形成的引用。可以通过MERGE-HEAD或者HEAD来实现类型与svn revet的效果。<br>解决：<br>1.将本地的冲突文件冲掉，不仅需要reset到MERGE-HEAD或者HEAD,还需要–hard。没有后面的hard，不会冲掉本地工作区。只会冲掉stage区。<br><code>git reset --hard FETCH_HEAD</code></p></li></ul><p>2.<code>git pull</code>就会成功。</p><h1 id="多个Git账号问题"><a href="#多个Git账号问题" class="headerlink" title="多个Git账号问题"></a>多个Git账号问题</h1><ul><li><p>配置账号时</p><pre class="line-numbers language-shell"><code class="language-shell">git config --global user.name "Your Name"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中 –global 参数就是表示这台机器所有Git仓库都使用这个配置。</p></li></ul><p><a href="https://www.jianshu.com/p/fbbf6efb50ba" target="_blank" rel="noopener">https://www.jianshu.com/p/fbbf6efb50ba</a></p><h1 id="悟"><a href="#悟" class="headerlink" title="悟"></a>悟</h1><blockquote><p>一次我Clone 一个仓库后，往里加了一个abc文件，然后 <code>add .</code>  <code>commit</code>  。这时候我发现这个abc文件我搞错了。趁着还没<code>push</code> 我就删除了，然后放上正确的CBA文件又执行 <code>add .</code> <code>commit -m</code>。然后我<code>push</code>。</p><p>竟然发现，git 还是会传刚刚删除的abc文件。（传上去再删掉，执行我刚刚的两次commit）</p><p>我一看这样太慢了（那个文件很大）。</p><p>就<code>reset</code>到了第一次clone的版本。这时候我本地查看文件，发现仓库里并不是最初clone下来的样子，还是最终的带有CBA文件的样子，只不过这时候我<code>add .</code>  <code>commit</code>  <code>push</code> 就一次性完成了。</p></blockquote><ul><li><p><code>push</code>这个过程会按照你的<code>commit</code>顺序一步步来。并不是按最后一次<code>commit</code></p></li><li><p>github单文件最大只允许100Mb</p></li><li><p><code>reset</code>只清除了暂存区，如何真正恢复到想去的那个版本呢？</p><p>ANSWER: 回滚了暂存区再用<code>checkout --文件名</code>回滚文件啊！</p><pre class="line-numbers language-shell"><code class="language-shell">git checkout . #本地所有修改的。没有的提交的，都返回到原来的状态<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
